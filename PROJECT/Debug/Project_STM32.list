
Project_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b90  08002b90  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b90  08002b90  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b90  08002b90  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000001c  08002bb4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08002bb4  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d37d  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb0  00000000  00000000  0002d3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0002f278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002ff30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017539  00000000  00000000  00030af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4ec  00000000  00000000  00048031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e18  00000000  00000000  0005651d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd335  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003304  00000000  00000000  000dd388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b4c 	.word	0x08002b4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002b4c 	.word	0x08002b4c

0800014c <SetMode>:
int mode4_flag = 0;
int save_counterTimeSet = 0;
int Time_red = 5;
int Time_green = 3;
int Time_yellow = 2;
void SetMode(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(ProcessButton3() == 1){
 8000150:	f000 fbba 	bl	80008c8 <ProcessButton3>
 8000154:	4603      	mov	r3, r0
 8000156:	2b01      	cmp	r3, #1
 8000158:	d174      	bne.n	8000244 <SetMode+0xf8>
		if(counterMode == 2){
 800015a:	4b3b      	ldr	r3, [pc, #236]	; (8000248 <SetMode+0xfc>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b02      	cmp	r3, #2
 8000160:	d126      	bne.n	80001b0 <SetMode+0x64>
			Time_red = counterTimeSet;
 8000162:	4b3a      	ldr	r3, [pc, #232]	; (800024c <SetMode+0x100>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	4a3a      	ldr	r2, [pc, #232]	; (8000250 <SetMode+0x104>)
 8000168:	6013      	str	r3, [r2, #0]
			if(Time_red <= Time_green || Time_red <= Time_yellow){
 800016a:	4b39      	ldr	r3, [pc, #228]	; (8000250 <SetMode+0x104>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	4b39      	ldr	r3, [pc, #228]	; (8000254 <SetMode+0x108>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	429a      	cmp	r2, r3
 8000174:	dd05      	ble.n	8000182 <SetMode+0x36>
 8000176:	4b36      	ldr	r3, [pc, #216]	; (8000250 <SetMode+0x104>)
 8000178:	681a      	ldr	r2, [r3, #0]
 800017a:	4b37      	ldr	r3, [pc, #220]	; (8000258 <SetMode+0x10c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	429a      	cmp	r2, r3
 8000180:	dc07      	bgt.n	8000192 <SetMode+0x46>
				Time_red = Time_green + Time_yellow;
 8000182:	4b34      	ldr	r3, [pc, #208]	; (8000254 <SetMode+0x108>)
 8000184:	681a      	ldr	r2, [r3, #0]
 8000186:	4b34      	ldr	r3, [pc, #208]	; (8000258 <SetMode+0x10c>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4413      	add	r3, r2
 800018c:	4a30      	ldr	r2, [pc, #192]	; (8000250 <SetMode+0x104>)
 800018e:	6013      	str	r3, [r2, #0]
 8000190:	e006      	b.n	80001a0 <SetMode+0x54>
			}
			else{
				Time_green = Time_red - Time_yellow;
 8000192:	4b2f      	ldr	r3, [pc, #188]	; (8000250 <SetMode+0x104>)
 8000194:	681a      	ldr	r2, [r3, #0]
 8000196:	4b30      	ldr	r3, [pc, #192]	; (8000258 <SetMode+0x10c>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	1ad3      	subs	r3, r2, r3
 800019c:	4a2d      	ldr	r2, [pc, #180]	; (8000254 <SetMode+0x108>)
 800019e:	6013      	str	r3, [r2, #0]
			}
			number_clock1 = Time_red;
 80001a0:	4b2b      	ldr	r3, [pc, #172]	; (8000250 <SetMode+0x104>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a2d      	ldr	r2, [pc, #180]	; (800025c <SetMode+0x110>)
 80001a6:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 80001a8:	4b2a      	ldr	r3, [pc, #168]	; (8000254 <SetMode+0x108>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a2c      	ldr	r2, [pc, #176]	; (8000260 <SetMode+0x114>)
 80001ae:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 3){
 80001b0:	4b25      	ldr	r3, [pc, #148]	; (8000248 <SetMode+0xfc>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b03      	cmp	r3, #3
 80001b6:	d120      	bne.n	80001fa <SetMode+0xae>
			Time_green = counterTimeSet;
 80001b8:	4b24      	ldr	r3, [pc, #144]	; (800024c <SetMode+0x100>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a25      	ldr	r2, [pc, #148]	; (8000254 <SetMode+0x108>)
 80001be:	6013      	str	r3, [r2, #0]
			if(Time_red <= Time_green){
 80001c0:	4b23      	ldr	r3, [pc, #140]	; (8000250 <SetMode+0x104>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b23      	ldr	r3, [pc, #140]	; (8000254 <SetMode+0x108>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	dc07      	bgt.n	80001dc <SetMode+0x90>
				Time_red =  Time_yellow + Time_green;
 80001cc:	4b22      	ldr	r3, [pc, #136]	; (8000258 <SetMode+0x10c>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b20      	ldr	r3, [pc, #128]	; (8000254 <SetMode+0x108>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4413      	add	r3, r2
 80001d6:	4a1e      	ldr	r2, [pc, #120]	; (8000250 <SetMode+0x104>)
 80001d8:	6013      	str	r3, [r2, #0]
 80001da:	e006      	b.n	80001ea <SetMode+0x9e>
			}
			else{
				Time_yellow = Time_red - Time_green;
 80001dc:	4b1c      	ldr	r3, [pc, #112]	; (8000250 <SetMode+0x104>)
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b1c      	ldr	r3, [pc, #112]	; (8000254 <SetMode+0x108>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	1ad3      	subs	r3, r2, r3
 80001e6:	4a1c      	ldr	r2, [pc, #112]	; (8000258 <SetMode+0x10c>)
 80001e8:	6013      	str	r3, [r2, #0]
			}
			number_clock1 = Time_red;
 80001ea:	4b19      	ldr	r3, [pc, #100]	; (8000250 <SetMode+0x104>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a1b      	ldr	r2, [pc, #108]	; (800025c <SetMode+0x110>)
 80001f0:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <SetMode+0x108>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a1a      	ldr	r2, [pc, #104]	; (8000260 <SetMode+0x114>)
 80001f8:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 4){
 80001fa:	4b13      	ldr	r3, [pc, #76]	; (8000248 <SetMode+0xfc>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b04      	cmp	r3, #4
 8000200:	d120      	bne.n	8000244 <SetMode+0xf8>
			Time_yellow = counterTimeSet;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <SetMode+0x100>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a14      	ldr	r2, [pc, #80]	; (8000258 <SetMode+0x10c>)
 8000208:	6013      	str	r3, [r2, #0]
			if(Time_red <= Time_yellow){
 800020a:	4b11      	ldr	r3, [pc, #68]	; (8000250 <SetMode+0x104>)
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	4b12      	ldr	r3, [pc, #72]	; (8000258 <SetMode+0x10c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	429a      	cmp	r2, r3
 8000214:	dc07      	bgt.n	8000226 <SetMode+0xda>
				Time_red =  Time_yellow + Time_green;
 8000216:	4b10      	ldr	r3, [pc, #64]	; (8000258 <SetMode+0x10c>)
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <SetMode+0x108>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4413      	add	r3, r2
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <SetMode+0x104>)
 8000222:	6013      	str	r3, [r2, #0]
 8000224:	e006      	b.n	8000234 <SetMode+0xe8>
			}
			else{
				Time_green = Time_red - Time_yellow;
 8000226:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <SetMode+0x104>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <SetMode+0x10c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	1ad3      	subs	r3, r2, r3
 8000230:	4a08      	ldr	r2, [pc, #32]	; (8000254 <SetMode+0x108>)
 8000232:	6013      	str	r3, [r2, #0]
			}
			number_clock1 =  Time_red;
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <SetMode+0x104>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a08      	ldr	r2, [pc, #32]	; (800025c <SetMode+0x110>)
 800023a:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <SetMode+0x108>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <SetMode+0x114>)
 8000242:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000060 	.word	0x20000060
 800024c:	20000064 	.word	0x20000064
 8000250:	20000000 	.word	0x20000000
 8000254:	20000004 	.word	0x20000004
 8000258:	20000008 	.word	0x20000008
 800025c:	20000054 	.word	0x20000054
 8000260:	20000058 	.word	0x20000058

08000264 <ChangeModeX>:
void ChangeModeX(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <ChangeModeX+0x58>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d102      	bne.n	8000276 <ChangeModeX+0x12>
		mode4_flag = 0;
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <ChangeModeX+0x5c>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <ChangeModeX+0x58>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2b02      	cmp	r3, #2
 800027c:	d104      	bne.n	8000288 <ChangeModeX+0x24>
		statusx = MAN_RED;
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <ChangeModeX+0x60>)
 8000280:	2205      	movs	r2, #5
 8000282:	601a      	str	r2, [r3, #0]
		InitLED();
 8000284:	f000 fcc4 	bl	8000c10 <InitLED>
	}
	if(counterMode == 3){
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <ChangeModeX+0x58>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b03      	cmp	r3, #3
 800028e:	d107      	bne.n	80002a0 <ChangeModeX+0x3c>
		mode2_flag = 0;
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <ChangeModeX+0x64>)
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
		statusx = MAN_GREEN;
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <ChangeModeX+0x60>)
 8000298:	2206      	movs	r2, #6
 800029a:	601a      	str	r2, [r3, #0]
		InitLED();
 800029c:	f000 fcb8 	bl	8000c10 <InitLED>
	}
	if(counterMode == 4){
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <ChangeModeX+0x58>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b04      	cmp	r3, #4
 80002a6:	d107      	bne.n	80002b8 <ChangeModeX+0x54>
		mode3_flag = 0;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <ChangeModeX+0x68>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
		statusx = MAN_YELLOW;
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <ChangeModeX+0x60>)
 80002b0:	2207      	movs	r2, #7
 80002b2:	601a      	str	r2, [r3, #0]
		InitLED();
 80002b4:	f000 fcac 	bl	8000c10 <InitLED>
	}
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000060 	.word	0x20000060
 80002c0:	20000044 	.word	0x20000044
 80002c4:	2000004c 	.word	0x2000004c
 80002c8:	2000003c 	.word	0x2000003c
 80002cc:	20000040 	.word	0x20000040

080002d0 <ChangeModeY>:
void ChangeModeY(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <ChangeModeY+0x58>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d102      	bne.n	80002e2 <ChangeModeY+0x12>
		mode4_flag = 0;
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <ChangeModeY+0x5c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <ChangeModeY+0x58>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d104      	bne.n	80002f4 <ChangeModeY+0x24>
		statusy = MAN_RED;
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <ChangeModeY+0x60>)
 80002ec:	2205      	movs	r2, #5
 80002ee:	601a      	str	r2, [r3, #0]
		InitLED();
 80002f0:	f000 fc8e 	bl	8000c10 <InitLED>
	}
	if(counterMode == 3){
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <ChangeModeY+0x58>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d107      	bne.n	800030c <ChangeModeY+0x3c>
		mode2_flag = 0;
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <ChangeModeY+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
		statusy = MAN_GREEN;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <ChangeModeY+0x60>)
 8000304:	2206      	movs	r2, #6
 8000306:	601a      	str	r2, [r3, #0]
		InitLED();
 8000308:	f000 fc82 	bl	8000c10 <InitLED>
	}
	if(counterMode == 4){
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <ChangeModeY+0x58>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b04      	cmp	r3, #4
 8000312:	d107      	bne.n	8000324 <ChangeModeY+0x54>
		mode3_flag = 0;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <ChangeModeY+0x68>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
		statusy = MAN_YELLOW;
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <ChangeModeY+0x60>)
 800031c:	2207      	movs	r2, #7
 800031e:	601a      	str	r2, [r3, #0]
		InitLED();
 8000320:	f000 fc76 	bl	8000c10 <InitLED>
	}
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000060 	.word	0x20000060
 800032c:	20000044 	.word	0x20000044
 8000330:	20000050 	.word	0x20000050
 8000334:	2000003c 	.word	0x2000003c
 8000338:	20000040 	.word	0x20000040

0800033c <fsm_automatic_runx>:
//			DisplayCounter = 0;
//		}
//		setTimer(6, 100);
//	}
//}
void fsm_automatic_runx(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	switch(statusx){
 8000340:	4b44      	ldr	r3, [pc, #272]	; (8000454 <fsm_automatic_runx+0x118>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3b01      	subs	r3, #1
 8000346:	2b03      	cmp	r3, #3
 8000348:	d87a      	bhi.n	8000440 <fsm_automatic_runx+0x104>
 800034a:	a201      	add	r2, pc, #4	; (adr r2, 8000350 <fsm_automatic_runx+0x14>)
 800034c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000350:	08000361 	.word	0x08000361
 8000354:	0800038d 	.word	0x0800038d
 8000358:	080003c9 	.word	0x080003c9
 800035c:	08000405 	.word	0x08000405
	case INIT:
		statusx = AUTO_RED;
 8000360:	4b3c      	ldr	r3, [pc, #240]	; (8000454 <fsm_automatic_runx+0x118>)
 8000362:	2202      	movs	r2, #2
 8000364:	601a      	str	r2, [r3, #0]
		number_clock1 = Time_red;
 8000366:	4b3c      	ldr	r3, [pc, #240]	; (8000458 <fsm_automatic_runx+0x11c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a3c      	ldr	r2, [pc, #240]	; (800045c <fsm_automatic_runx+0x120>)
 800036c:	6013      	str	r3, [r2, #0]
		setTimer(0,number_clock1 * 1000);
 800036e:	4b3b      	ldr	r3, [pc, #236]	; (800045c <fsm_automatic_runx+0x120>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000376:	fb02 f303 	mul.w	r3, r2, r3
 800037a:	4619      	mov	r1, r3
 800037c:	2000      	movs	r0, #0
 800037e:	f000 ff0f 	bl	80011a0 <setTimer>
		setTimer(2,100);
 8000382:	2164      	movs	r1, #100	; 0x64
 8000384:	2002      	movs	r0, #2
 8000386:	f000 ff0b 	bl	80011a0 <setTimer>
		break;
 800038a:	e060      	b.n	800044e <fsm_automatic_runx+0x112>
	case AUTO_RED:
		DisplayREDX();
 800038c:	f000 fb8c 	bl	8000aa8 <DisplayREDX>
//		fsm_clock();
		SetMode();
 8000390:	f7ff fedc 	bl	800014c <SetMode>
		ChangeModeX();
 8000394:	f7ff ff66 	bl	8000264 <ChangeModeX>
		if(timer_flag[0] == 1){
 8000398:	4b31      	ldr	r3, [pc, #196]	; (8000460 <fsm_automatic_runx+0x124>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d151      	bne.n	8000444 <fsm_automatic_runx+0x108>
			InitLED();
 80003a0:	f000 fc36 	bl	8000c10 <InitLED>
			statusx = AUTO_GREEN;
 80003a4:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <fsm_automatic_runx+0x118>)
 80003a6:	2203      	movs	r2, #3
 80003a8:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_green;
 80003aa:	4b2e      	ldr	r3, [pc, #184]	; (8000464 <fsm_automatic_runx+0x128>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a2b      	ldr	r2, [pc, #172]	; (800045c <fsm_automatic_runx+0x120>)
 80003b0:	6013      	str	r3, [r2, #0]
			setTimer(0,number_clock1 * 1000);
 80003b2:	4b2a      	ldr	r3, [pc, #168]	; (800045c <fsm_automatic_runx+0x120>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ba:	fb02 f303 	mul.w	r3, r2, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	2000      	movs	r0, #0
 80003c2:	f000 feed 	bl	80011a0 <setTimer>
		}
		break;
 80003c6:	e03d      	b.n	8000444 <fsm_automatic_runx+0x108>
	case AUTO_GREEN:
		DisplayGREENX();
 80003c8:	f000 fba6 	bl	8000b18 <DisplayGREENX>
//		fsm_clock();
		SetMode();
 80003cc:	f7ff febe 	bl	800014c <SetMode>
		ChangeModeX();
 80003d0:	f7ff ff48 	bl	8000264 <ChangeModeX>
		if(timer_flag[0] == 1){
 80003d4:	4b22      	ldr	r3, [pc, #136]	; (8000460 <fsm_automatic_runx+0x124>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d135      	bne.n	8000448 <fsm_automatic_runx+0x10c>
			InitLED();
 80003dc:	f000 fc18 	bl	8000c10 <InitLED>
			statusx = AUTO_YELLOW;
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <fsm_automatic_runx+0x118>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_yellow;
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <fsm_automatic_runx+0x12c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a1c      	ldr	r2, [pc, #112]	; (800045c <fsm_automatic_runx+0x120>)
 80003ec:	6013      	str	r3, [r2, #0]
			setTimer(0,number_clock1 * 1000);
 80003ee:	4b1b      	ldr	r3, [pc, #108]	; (800045c <fsm_automatic_runx+0x120>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	4619      	mov	r1, r3
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 fecf 	bl	80011a0 <setTimer>
		}
		break;
 8000402:	e021      	b.n	8000448 <fsm_automatic_runx+0x10c>
	case AUTO_YELLOW:
		DisplayYELLOWX();
 8000404:	f000 fb6c 	bl	8000ae0 <DisplayYELLOWX>
//		fsm_clock();
		SetMode();
 8000408:	f7ff fea0 	bl	800014c <SetMode>
		ChangeModeX();
 800040c:	f7ff ff2a 	bl	8000264 <ChangeModeX>
		if(timer_flag[0] == 1){
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <fsm_automatic_runx+0x124>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d119      	bne.n	800044c <fsm_automatic_runx+0x110>
			InitLED();
 8000418:	f000 fbfa 	bl	8000c10 <InitLED>
			statusx = AUTO_RED;
 800041c:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <fsm_automatic_runx+0x118>)
 800041e:	2202      	movs	r2, #2
 8000420:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_red;
 8000422:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <fsm_automatic_runx+0x11c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a0d      	ldr	r2, [pc, #52]	; (800045c <fsm_automatic_runx+0x120>)
 8000428:	6013      	str	r3, [r2, #0]
			setTimer(0,number_clock1 * 1000);
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <fsm_automatic_runx+0x120>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000432:	fb02 f303 	mul.w	r3, r2, r3
 8000436:	4619      	mov	r1, r3
 8000438:	2000      	movs	r0, #0
 800043a:	f000 feb1 	bl	80011a0 <setTimer>
		}
		break;
 800043e:	e005      	b.n	800044c <fsm_automatic_runx+0x110>
	default:
		break;
 8000440:	bf00      	nop
 8000442:	e004      	b.n	800044e <fsm_automatic_runx+0x112>
		break;
 8000444:	bf00      	nop
 8000446:	e002      	b.n	800044e <fsm_automatic_runx+0x112>
		break;
 8000448:	bf00      	nop
 800044a:	e000      	b.n	800044e <fsm_automatic_runx+0x112>
		break;
 800044c:	bf00      	nop
	}
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000004c 	.word	0x2000004c
 8000458:	20000000 	.word	0x20000000
 800045c:	20000054 	.word	0x20000054
 8000460:	20000144 	.word	0x20000144
 8000464:	20000004 	.word	0x20000004
 8000468:	20000008 	.word	0x20000008

0800046c <fsm_automatic_runy>:
void fsm_automatic_runy(){
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	switch(statusy){
 8000470:	4b72      	ldr	r3, [pc, #456]	; (800063c <fsm_automatic_runy+0x1d0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3b01      	subs	r3, #1
 8000476:	2b03      	cmp	r3, #3
 8000478:	f200 80d6 	bhi.w	8000628 <fsm_automatic_runy+0x1bc>
 800047c:	a201      	add	r2, pc, #4	; (adr r2, 8000484 <fsm_automatic_runy+0x18>)
 800047e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000482:	bf00      	nop
 8000484:	08000495 	.word	0x08000495
 8000488:	080004c5 	.word	0x080004c5
 800048c:	0800053d 	.word	0x0800053d
 8000490:	080005b3 	.word	0x080005b3
	case INIT:
		DisplayGREENY();
 8000494:	f000 fb9c 	bl	8000bd0 <DisplayGREENY>
		statusy = AUTO_GREEN;
 8000498:	4b68      	ldr	r3, [pc, #416]	; (800063c <fsm_automatic_runy+0x1d0>)
 800049a:	2203      	movs	r2, #3
 800049c:	601a      	str	r2, [r3, #0]
		number_clock2 = Time_green;
 800049e:	4b68      	ldr	r3, [pc, #416]	; (8000640 <fsm_automatic_runy+0x1d4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a68      	ldr	r2, [pc, #416]	; (8000644 <fsm_automatic_runy+0x1d8>)
 80004a4:	6013      	str	r3, [r2, #0]
		setTimer(1,number_clock2 * 1000);
 80004a6:	4b67      	ldr	r3, [pc, #412]	; (8000644 <fsm_automatic_runy+0x1d8>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ae:	fb02 f303 	mul.w	r3, r2, r3
 80004b2:	4619      	mov	r1, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	f000 fe73 	bl	80011a0 <setTimer>
		setTimer(3,100);
 80004ba:	2164      	movs	r1, #100	; 0x64
 80004bc:	2003      	movs	r0, #3
 80004be:	f000 fe6f 	bl	80011a0 <setTimer>
		break;
 80004c2:	e0b8      	b.n	8000636 <fsm_automatic_runy+0x1ca>
	case AUTO_RED:
		DisplayREDY();
 80004c4:	f000 fb44 	bl	8000b50 <DisplayREDY>
		SetMode();
 80004c8:	f7ff fe40 	bl	800014c <SetMode>
		ChangeModeY();
 80004cc:	f7ff ff00 	bl	80002d0 <ChangeModeY>
		if(mode2_flag == 1){
 80004d0:	4b5d      	ldr	r3, [pc, #372]	; (8000648 <fsm_automatic_runy+0x1dc>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d118      	bne.n	800050a <fsm_automatic_runy+0x9e>
			InitLED();
 80004d8:	f000 fb9a 	bl	8000c10 <InitLED>
			statusy = MAN_RED;
 80004dc:	4b57      	ldr	r3, [pc, #348]	; (800063c <fsm_automatic_runy+0x1d0>)
 80004de:	2205      	movs	r2, #5
 80004e0:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 80004e2:	4b5a      	ldr	r3, [pc, #360]	; (800064c <fsm_automatic_runy+0x1e0>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ea:	fb02 f303 	mul.w	r3, r2, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fe55 	bl	80011a0 <setTimer>
			number_clock2 = timer_counter[1]/100;
 80004f6:	4b56      	ldr	r3, [pc, #344]	; (8000650 <fsm_automatic_runy+0x1e4>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	4a56      	ldr	r2, [pc, #344]	; (8000654 <fsm_automatic_runy+0x1e8>)
 80004fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000500:	1152      	asrs	r2, r2, #5
 8000502:	17db      	asrs	r3, r3, #31
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	4a4f      	ldr	r2, [pc, #316]	; (8000644 <fsm_automatic_runy+0x1d8>)
 8000508:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 800050a:	4b53      	ldr	r3, [pc, #332]	; (8000658 <fsm_automatic_runy+0x1ec>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	2b01      	cmp	r3, #1
 8000510:	f040 808c 	bne.w	800062c <fsm_automatic_runy+0x1c0>
			InitLED();
 8000514:	f000 fb7c 	bl	8000c10 <InitLED>
			statusy = AUTO_GREEN;
 8000518:	4b48      	ldr	r3, [pc, #288]	; (800063c <fsm_automatic_runy+0x1d0>)
 800051a:	2203      	movs	r2, #3
 800051c:	601a      	str	r2, [r3, #0]
			number_clock2 = Time_green;
 800051e:	4b48      	ldr	r3, [pc, #288]	; (8000640 <fsm_automatic_runy+0x1d4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a48      	ldr	r2, [pc, #288]	; (8000644 <fsm_automatic_runy+0x1d8>)
 8000524:	6013      	str	r3, [r2, #0]
			setTimer(1,number_clock2 * 1000);
 8000526:	4b47      	ldr	r3, [pc, #284]	; (8000644 <fsm_automatic_runy+0x1d8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	4619      	mov	r1, r3
 8000534:	2001      	movs	r0, #1
 8000536:	f000 fe33 	bl	80011a0 <setTimer>
		}
		break;
 800053a:	e077      	b.n	800062c <fsm_automatic_runy+0x1c0>
	case AUTO_GREEN:
		DisplayGREENY();
 800053c:	f000 fb48 	bl	8000bd0 <DisplayGREENY>
		SetMode();
 8000540:	f7ff fe04 	bl	800014c <SetMode>
		ChangeModeY();
 8000544:	f7ff fec4 	bl	80002d0 <ChangeModeY>
		if(mode3_flag == 1){
 8000548:	4b44      	ldr	r3, [pc, #272]	; (800065c <fsm_automatic_runy+0x1f0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d118      	bne.n	8000582 <fsm_automatic_runy+0x116>
			InitLED();
 8000550:	f000 fb5e 	bl	8000c10 <InitLED>
			statusy = MAN_GREEN;
 8000554:	4b39      	ldr	r3, [pc, #228]	; (800063c <fsm_automatic_runy+0x1d0>)
 8000556:	2206      	movs	r2, #6
 8000558:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 800055a:	4b3c      	ldr	r3, [pc, #240]	; (800064c <fsm_automatic_runy+0x1e0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	4619      	mov	r1, r3
 8000568:	2001      	movs	r0, #1
 800056a:	f000 fe19 	bl	80011a0 <setTimer>
			number_clock2 = timer_counter[1]/100;
 800056e:	4b38      	ldr	r3, [pc, #224]	; (8000650 <fsm_automatic_runy+0x1e4>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	4a38      	ldr	r2, [pc, #224]	; (8000654 <fsm_automatic_runy+0x1e8>)
 8000574:	fb82 1203 	smull	r1, r2, r2, r3
 8000578:	1152      	asrs	r2, r2, #5
 800057a:	17db      	asrs	r3, r3, #31
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	4a31      	ldr	r2, [pc, #196]	; (8000644 <fsm_automatic_runy+0x1d8>)
 8000580:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 8000582:	4b35      	ldr	r3, [pc, #212]	; (8000658 <fsm_automatic_runy+0x1ec>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d152      	bne.n	8000630 <fsm_automatic_runy+0x1c4>
			InitLED();
 800058a:	f000 fb41 	bl	8000c10 <InitLED>
			statusy = AUTO_YELLOW;
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <fsm_automatic_runy+0x1d0>)
 8000590:	2204      	movs	r2, #4
 8000592:	601a      	str	r2, [r3, #0]
			number_clock2 = Time_yellow;
 8000594:	4b32      	ldr	r3, [pc, #200]	; (8000660 <fsm_automatic_runy+0x1f4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a2a      	ldr	r2, [pc, #168]	; (8000644 <fsm_automatic_runy+0x1d8>)
 800059a:	6013      	str	r3, [r2, #0]
			setTimer(1,number_clock2 * 1000);
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <fsm_automatic_runy+0x1d8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a4:	fb02 f303 	mul.w	r3, r2, r3
 80005a8:	4619      	mov	r1, r3
 80005aa:	2001      	movs	r0, #1
 80005ac:	f000 fdf8 	bl	80011a0 <setTimer>
		}
		break;
 80005b0:	e03e      	b.n	8000630 <fsm_automatic_runy+0x1c4>
	case AUTO_YELLOW:
		DisplayYELLOWY();
 80005b2:	f000 faed 	bl	8000b90 <DisplayYELLOWY>
		SetMode();
 80005b6:	f7ff fdc9 	bl	800014c <SetMode>
		ChangeModeY();
 80005ba:	f7ff fe89 	bl	80002d0 <ChangeModeY>
		if(mode4_flag == 1){
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <fsm_automatic_runy+0x1f8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d118      	bne.n	80005f8 <fsm_automatic_runy+0x18c>
			InitLED();
 80005c6:	f000 fb23 	bl	8000c10 <InitLED>
			statusy = MAN_YELLOW;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <fsm_automatic_runy+0x1d0>)
 80005cc:	2207      	movs	r2, #7
 80005ce:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <fsm_automatic_runy+0x1e0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d8:	fb02 f303 	mul.w	r3, r2, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fdde 	bl	80011a0 <setTimer>
			number_clock2 = timer_counter[1]/100;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <fsm_automatic_runy+0x1e4>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <fsm_automatic_runy+0x1e8>)
 80005ea:	fb82 1203 	smull	r1, r2, r2, r3
 80005ee:	1152      	asrs	r2, r2, #5
 80005f0:	17db      	asrs	r3, r3, #31
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <fsm_automatic_runy+0x1d8>)
 80005f6:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <fsm_automatic_runy+0x1ec>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d119      	bne.n	8000634 <fsm_automatic_runy+0x1c8>
			InitLED();
 8000600:	f000 fb06 	bl	8000c10 <InitLED>
			statusy = AUTO_RED;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <fsm_automatic_runy+0x1d0>)
 8000606:	2202      	movs	r2, #2
 8000608:	601a      	str	r2, [r3, #0]
			number_clock2 = Time_red;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <fsm_automatic_runy+0x1fc>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <fsm_automatic_runy+0x1d8>)
 8000610:	6013      	str	r3, [r2, #0]
			setTimer(1,number_clock2 * 1000);
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <fsm_automatic_runy+0x1d8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061a:	fb02 f303 	mul.w	r3, r2, r3
 800061e:	4619      	mov	r1, r3
 8000620:	2001      	movs	r0, #1
 8000622:	f000 fdbd 	bl	80011a0 <setTimer>
		}
		break;
 8000626:	e005      	b.n	8000634 <fsm_automatic_runy+0x1c8>
	default:
		break;
 8000628:	bf00      	nop
 800062a:	e004      	b.n	8000636 <fsm_automatic_runy+0x1ca>
		break;
 800062c:	bf00      	nop
 800062e:	e002      	b.n	8000636 <fsm_automatic_runy+0x1ca>
		break;
 8000630:	bf00      	nop
 8000632:	e000      	b.n	8000636 <fsm_automatic_runy+0x1ca>
		break;
 8000634:	bf00      	nop
	}
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000050 	.word	0x20000050
 8000640:	20000004 	.word	0x20000004
 8000644:	20000058 	.word	0x20000058
 8000648:	2000003c 	.word	0x2000003c
 800064c:	20000048 	.word	0x20000048
 8000650:	2000011c 	.word	0x2000011c
 8000654:	51eb851f 	.word	0x51eb851f
 8000658:	20000144 	.word	0x20000144
 800065c:	20000040 	.word	0x20000040
 8000660:	20000008 	.word	0x20000008
 8000664:	20000044 	.word	0x20000044
 8000668:	20000000 	.word	0x20000000

0800066c <fsm_for_input_processing1>:
enum ButtonState buttonState1 = BUTTON_RELEASED;
enum ButtonState buttonState2 = BUTTON_RELEASED;
enum ButtonState buttonState3 = BUTTON_RELEASED;
int counterMode = 0;
int counterTimeSet = 0;
void fsm_for_input_processing1(void){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	switch(buttonState1){
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <fsm_for_input_processing1+0xa0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d038      	beq.n	80006ea <fsm_for_input_processing1+0x7e>
 8000678:	2b02      	cmp	r3, #2
 800067a:	dc45      	bgt.n	8000708 <fsm_for_input_processing1+0x9c>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <fsm_for_input_processing1+0x1a>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d01e      	beq.n	80006c2 <fsm_for_input_processing1+0x56>
			if(!is_button_pressed(0)){
				buttonState1 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000684:	e040      	b.n	8000708 <fsm_for_input_processing1+0x9c>
			if(is_button_pressed(0)){
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f9da 	bl	8000a40 <is_button_pressed>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d035      	beq.n	80006fe <fsm_for_input_processing1+0x92>
				buttonState1 = BUTTON_PRESSED ;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <fsm_for_input_processing1+0xa0>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
				if(ProcessButton1() == 1){
 8000698:	f000 f8da 	bl	8000850 <ProcessButton1>
 800069c:	4603      	mov	r3, r0
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d12d      	bne.n	80006fe <fsm_for_input_processing1+0x92>
					  counterMode++;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <fsm_for_input_processing1+0xa4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <fsm_for_input_processing1+0xa4>)
 80006aa:	6013      	str	r3, [r2, #0]
					  counterTimeSet = 0;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <fsm_for_input_processing1+0xa8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
					  if(counterMode > 4){
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <fsm_for_input_processing1+0xa4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	dd21      	ble.n	80006fe <fsm_for_input_processing1+0x92>
						  counterMode = 1;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <fsm_for_input_processing1+0xa4>)
 80006bc:	2201      	movs	r2, #1
 80006be:	601a      	str	r2, [r3, #0]
		break;
 80006c0:	e01d      	b.n	80006fe <fsm_for_input_processing1+0x92>
			if(!is_button_pressed(0)){
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f9bc 	bl	8000a40 <is_button_pressed>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d103      	bne.n	80006d6 <fsm_for_input_processing1+0x6a>
				buttonState1 = BUTTON_RELEASED;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <fsm_for_input_processing1+0xa0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
		break;
 80006d4:	e015      	b.n	8000702 <fsm_for_input_processing1+0x96>
				if(is_button_pressed_1s(0) == 1){
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f9cc 	bl	8000a74 <is_button_pressed_1s>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d10f      	bne.n	8000702 <fsm_for_input_processing1+0x96>
					buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <fsm_for_input_processing1+0xa0>)
 80006e4:	2202      	movs	r2, #2
 80006e6:	701a      	strb	r2, [r3, #0]
		break;
 80006e8:	e00b      	b.n	8000702 <fsm_for_input_processing1+0x96>
			if(!is_button_pressed(0)){
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 f9a8 	bl	8000a40 <is_button_pressed>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d107      	bne.n	8000706 <fsm_for_input_processing1+0x9a>
				buttonState1 = BUTTON_RELEASED;
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <fsm_for_input_processing1+0xa0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
		break;
 80006fc:	e003      	b.n	8000706 <fsm_for_input_processing1+0x9a>
		break;
 80006fe:	bf00      	nop
 8000700:	e002      	b.n	8000708 <fsm_for_input_processing1+0x9c>
		break;
 8000702:	bf00      	nop
 8000704:	e000      	b.n	8000708 <fsm_for_input_processing1+0x9c>
		break;
 8000706:	bf00      	nop
	}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000005c 	.word	0x2000005c
 8000710:	20000060 	.word	0x20000060
 8000714:	20000064 	.word	0x20000064

08000718 <fsm_for_input_processing2>:
void fsm_for_input_processing2(void){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	switch(buttonState2){
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <fsm_for_input_processing2+0x9c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d035      	beq.n	8000790 <fsm_for_input_processing2+0x78>
 8000724:	2b02      	cmp	r3, #2
 8000726:	dc42      	bgt.n	80007ae <fsm_for_input_processing2+0x96>
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <fsm_for_input_processing2+0x1a>
 800072c:	2b01      	cmp	r3, #1
 800072e:	d01b      	beq.n	8000768 <fsm_for_input_processing2+0x50>
			if(!is_button_pressed(1)){
				buttonState2 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000730:	e03d      	b.n	80007ae <fsm_for_input_processing2+0x96>
			if(is_button_pressed(1)){
 8000732:	2001      	movs	r0, #1
 8000734:	f000 f984 	bl	8000a40 <is_button_pressed>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d032      	beq.n	80007a4 <fsm_for_input_processing2+0x8c>
				buttonState2 = BUTTON_PRESSED ;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <fsm_for_input_processing2+0x9c>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
				if(ProcessButton2() == 1){
 8000744:	f000 f8a2 	bl	800088c <ProcessButton2>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d12a      	bne.n	80007a4 <fsm_for_input_processing2+0x8c>
					  counterTimeSet++;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <fsm_for_input_processing2+0xa0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <fsm_for_input_processing2+0xa0>)
 8000756:	6013      	str	r3, [r2, #0]
					  if(counterTimeSet > 99){
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <fsm_for_input_processing2+0xa0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b63      	cmp	r3, #99	; 0x63
 800075e:	dd21      	ble.n	80007a4 <fsm_for_input_processing2+0x8c>
						  counterTimeSet = 0;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <fsm_for_input_processing2+0xa0>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
		break;
 8000766:	e01d      	b.n	80007a4 <fsm_for_input_processing2+0x8c>
			if(!is_button_pressed(1)){
 8000768:	2001      	movs	r0, #1
 800076a:	f000 f969 	bl	8000a40 <is_button_pressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d103      	bne.n	800077c <fsm_for_input_processing2+0x64>
				buttonState2 = BUTTON_RELEASED;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <fsm_for_input_processing2+0x9c>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
		break;
 800077a:	e015      	b.n	80007a8 <fsm_for_input_processing2+0x90>
				if(is_button_pressed_1s(1) == 1){
 800077c:	2001      	movs	r0, #1
 800077e:	f000 f979 	bl	8000a74 <is_button_pressed_1s>
 8000782:	4603      	mov	r3, r0
 8000784:	2b01      	cmp	r3, #1
 8000786:	d10f      	bne.n	80007a8 <fsm_for_input_processing2+0x90>
					buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <fsm_for_input_processing2+0x9c>)
 800078a:	2202      	movs	r2, #2
 800078c:	701a      	strb	r2, [r3, #0]
		break;
 800078e:	e00b      	b.n	80007a8 <fsm_for_input_processing2+0x90>
			if(!is_button_pressed(1)){
 8000790:	2001      	movs	r0, #1
 8000792:	f000 f955 	bl	8000a40 <is_button_pressed>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d107      	bne.n	80007ac <fsm_for_input_processing2+0x94>
				buttonState2 = BUTTON_RELEASED;
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <fsm_for_input_processing2+0x9c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
		break;
 80007a2:	e003      	b.n	80007ac <fsm_for_input_processing2+0x94>
		break;
 80007a4:	bf00      	nop
 80007a6:	e002      	b.n	80007ae <fsm_for_input_processing2+0x96>
		break;
 80007a8:	bf00      	nop
 80007aa:	e000      	b.n	80007ae <fsm_for_input_processing2+0x96>
		break;
 80007ac:	bf00      	nop
	}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000005d 	.word	0x2000005d
 80007b8:	20000064 	.word	0x20000064

080007bc <fsm_for_input_processing3>:
void fsm_for_input_processing3(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	switch(buttonState3){
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <fsm_for_input_processing3+0x78>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d024      	beq.n	8000812 <fsm_for_input_processing3+0x56>
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	dc31      	bgt.n	8000830 <fsm_for_input_processing3+0x74>
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <fsm_for_input_processing3+0x1a>
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d00a      	beq.n	80007ea <fsm_for_input_processing3+0x2e>
			if(!is_button_pressed(2)){
				buttonState3 = BUTTON_RELEASED;
			}
		break;
		}
	}
 80007d4:	e02c      	b.n	8000830 <fsm_for_input_processing3+0x74>
			if(is_button_pressed(2)){
 80007d6:	2002      	movs	r0, #2
 80007d8:	f000 f932 	bl	8000a40 <is_button_pressed>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d021      	beq.n	8000826 <fsm_for_input_processing3+0x6a>
				buttonState3 = BUTTON_PRESSED ;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <fsm_for_input_processing3+0x78>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
		break;
 80007e8:	e01d      	b.n	8000826 <fsm_for_input_processing3+0x6a>
			if(!is_button_pressed(2)){
 80007ea:	2002      	movs	r0, #2
 80007ec:	f000 f928 	bl	8000a40 <is_button_pressed>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d103      	bne.n	80007fe <fsm_for_input_processing3+0x42>
				buttonState3 = BUTTON_RELEASED;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <fsm_for_input_processing3+0x78>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
		break;
 80007fc:	e015      	b.n	800082a <fsm_for_input_processing3+0x6e>
				if(is_button_pressed_1s(2) == 1){
 80007fe:	2002      	movs	r0, #2
 8000800:	f000 f938 	bl	8000a74 <is_button_pressed_1s>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10f      	bne.n	800082a <fsm_for_input_processing3+0x6e>
					buttonState3 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <fsm_for_input_processing3+0x78>)
 800080c:	2202      	movs	r2, #2
 800080e:	701a      	strb	r2, [r3, #0]
		break;
 8000810:	e00b      	b.n	800082a <fsm_for_input_processing3+0x6e>
			if(!is_button_pressed(2)){
 8000812:	2002      	movs	r0, #2
 8000814:	f000 f914 	bl	8000a40 <is_button_pressed>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d107      	bne.n	800082e <fsm_for_input_processing3+0x72>
				buttonState3 = BUTTON_RELEASED;
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <fsm_for_input_processing3+0x78>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
		break;
 8000824:	e003      	b.n	800082e <fsm_for_input_processing3+0x72>
		break;
 8000826:	bf00      	nop
 8000828:	e002      	b.n	8000830 <fsm_for_input_processing3+0x74>
		break;
 800082a:	bf00      	nop
 800082c:	e000      	b.n	8000830 <fsm_for_input_processing3+0x74>
		break;
 800082e:	bf00      	nop
	}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000005e 	.word	0x2000005e

08000838 <Button1Run>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
void Button1Run(void){
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
 	button1_flag = 1;
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <Button1Run+0x14>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
 }
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000080 	.word	0x20000080

08000850 <ProcessButton1>:
int ProcessButton1(void){
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
	 if(button1_flag == 1){
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <ProcessButton1+0x20>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d104      	bne.n	8000866 <ProcessButton1+0x16>
		 button1_flag = 0;
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <ProcessButton1+0x20>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
		 return 1;
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <ProcessButton1+0x18>
	 }
	 return 0;
 8000866:	2300      	movs	r3, #0
 }
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000080 	.word	0x20000080

08000874 <Button2Run>:
void Button2Run(void){
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
 	button2_flag = 1;
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <Button2Run+0x14>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
 }
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000084 	.word	0x20000084

0800088c <ProcessButton2>:
int ProcessButton2(void){
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	 if(button2_flag == 1){
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <ProcessButton2+0x20>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d104      	bne.n	80008a2 <ProcessButton2+0x16>
		 button2_flag = 0;
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <ProcessButton2+0x20>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
		 return 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <ProcessButton2+0x18>
	 }
	 return 0;
 80008a2:	2300      	movs	r3, #0
 }
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000084 	.word	0x20000084

080008b0 <Button3Run>:
void Button3Run(void){
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
 	button3_flag = 1;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <Button3Run+0x14>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	601a      	str	r2, [r3, #0]
 }
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000088 	.word	0x20000088

080008c8 <ProcessButton3>:
int ProcessButton3(void){
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	 if(button3_flag == 1){
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <ProcessButton3+0x20>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d104      	bne.n	80008de <ProcessButton3+0x16>
		 button3_flag = 0;
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <ProcessButton3+0x20>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
		 return 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	e000      	b.n	80008e0 <ProcessButton3+0x18>
	 }
	 return 0;
 80008de:	2300      	movs	r3, #0
 }
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000088 	.word	0x20000088

080008ec <button_reading>:
		void button_reading(void){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 80008f2:	2300      	movs	r3, #0
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	e08b      	b.n	8000a10 <button_reading+0x124>
				 debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4949      	ldr	r1, [pc, #292]	; (8000a24 <button_reading+0x138>)
 80008fe:	5c89      	ldrb	r1, [r1, r2]
 8000900:	4a49      	ldr	r2, [pc, #292]	; (8000a28 <button_reading+0x13c>)
 8000902:	54d1      	strb	r1, [r2, r3]
				 if(i == 0){
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d108      	bne.n	800091c <button_reading+0x30>
				 debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 800090a:	2102      	movs	r1, #2
 800090c:	4847      	ldr	r0, [pc, #284]	; (8000a2c <button_reading+0x140>)
 800090e:	f000 ffc1 	bl	8001894 <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <button_reading+0x138>)
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e016      	b.n	800094a <button_reading+0x5e>
				 }
				 else if(i == 1){
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d108      	bne.n	8000934 <button_reading+0x48>
				 debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 8000922:	2110      	movs	r1, #16
 8000924:	4841      	ldr	r0, [pc, #260]	; (8000a2c <button_reading+0x140>)
 8000926:	f000 ffb5 	bl	8001894 <HAL_GPIO_ReadPin>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <button_reading+0x138>)
 8000930:	705a      	strb	r2, [r3, #1]
 8000932:	e00a      	b.n	800094a <button_reading+0x5e>
				 }
				 else if(i == 2){
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d107      	bne.n	800094a <button_reading+0x5e>
				 debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port,Button3_Pin);
 800093a:	2101      	movs	r1, #1
 800093c:	483c      	ldr	r0, [pc, #240]	; (8000a30 <button_reading+0x144>)
 800093e:	f000 ffa9 	bl	8001894 <HAL_GPIO_ReadPin>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <button_reading+0x138>)
 8000948:	709a      	strb	r2, [r3, #2]
				 }
				 if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4a35      	ldr	r2, [pc, #212]	; (8000a24 <button_reading+0x138>)
 800094e:	5cd2      	ldrb	r2, [r2, r3]
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4935      	ldr	r1, [pc, #212]	; (8000a28 <button_reading+0x13c>)
 8000954:	5ccb      	ldrb	r3, [r1, r3]
 8000956:	429a      	cmp	r2, r3
 8000958:	d14e      	bne.n	80009f8 <button_reading+0x10c>
					 buttonBuffer[i] = debounceButtonBuffer1[i];
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	4931      	ldr	r1, [pc, #196]	; (8000a24 <button_reading+0x138>)
 8000960:	5c89      	ldrb	r1, [r1, r2]
 8000962:	4a34      	ldr	r2, [pc, #208]	; (8000a34 <button_reading+0x148>)
 8000964:	54d1      	strb	r1, [r2, r3]
					 if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <button_reading+0x148>)
 800096a:	5cd3      	ldrb	r3, [r2, r3]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d14c      	bne.n	8000a0a <button_reading+0x11e>
						 if(i == 0){
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <button_reading+0x90>
							 Button1Run();
 8000976:	f7ff ff5f 	bl	8000838 <Button1Run>
 800097a:	e00a      	b.n	8000992 <button_reading+0xa6>
						 }
						 else if(i == 1){
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d102      	bne.n	8000988 <button_reading+0x9c>
							 Button2Run();
 8000982:	f7ff ff77 	bl	8000874 <Button2Run>
 8000986:	e004      	b.n	8000992 <button_reading+0xa6>
						 }
						 else if(i == 2){
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d101      	bne.n	8000992 <button_reading+0xa6>
							 Button3Run();
 800098e:	f7ff ff8f 	bl	80008b0 <Button3Run>
						 }
						 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING && flagForButtonPress1s[i] == 0){
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <button_reading+0x14c>)
 8000996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099a:	2b63      	cmp	r3, #99	; 0x63
 800099c:	d80e      	bhi.n	80009bc <button_reading+0xd0>
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4a26      	ldr	r2, [pc, #152]	; (8000a3c <button_reading+0x150>)
 80009a2:	5cd3      	ldrb	r3, [r2, r3]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <button_reading+0xd0>
							 counterForButtonPress1s[i]++;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <button_reading+0x14c>)
 80009ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009b0:	3201      	adds	r2, #1
 80009b2:	b291      	uxth	r1, r2
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <button_reading+0x14c>)
 80009b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009ba:	e026      	b.n	8000a0a <button_reading+0x11e>
						 }
						 else{
							 flagForButtonPress1s[i] = 1;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <button_reading+0x150>)
 80009c0:	2101      	movs	r1, #1
 80009c2:	54d1      	strb	r1, [r2, r3]

							 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING2){
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <button_reading+0x14c>)
 80009c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009cc:	2b95      	cmp	r3, #149	; 0x95
 80009ce:	d809      	bhi.n	80009e4 <button_reading+0xf8>
								counterForButtonPress1s[i]++;
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <button_reading+0x14c>)
 80009d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009d8:	3201      	adds	r2, #1
 80009da:	b291      	uxth	r1, r2
 80009dc:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <button_reading+0x14c>)
 80009de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009e2:	e012      	b.n	8000a0a <button_reading+0x11e>
							 }
							 else{
								buttonBuffer[i] = BUTTON_IS_RELEASED;
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <button_reading+0x148>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	54d1      	strb	r1, [r2, r3]
								counterForButtonPress1s[i] = 100;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <button_reading+0x14c>)
 80009f0:	2164      	movs	r1, #100	; 0x64
 80009f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009f6:	e008      	b.n	8000a0a <button_reading+0x11e>

						 }
					 }
				 }
					 else{
						 counterForButtonPress1s[i] = 0;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <button_reading+0x14c>)
 80009fc:	2100      	movs	r1, #0
 80009fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						 flagForButtonPress1s[i] = 0;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <button_reading+0x150>)
 8000a06:	2100      	movs	r1, #0
 8000a08:	54d1      	strb	r1, [r2, r3]
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	71fb      	strb	r3, [r7, #7]
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	f67f af70 	bls.w	80008f8 <button_reading+0xc>
					 }
				 }
			}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000006c 	.word	0x2000006c
 8000a28:	20000070 	.word	0x20000070
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	20000068 	.word	0x20000068
 8000a38:	20000078 	.word	0x20000078
 8000a3c:	20000074 	.word	0x20000074

08000a40 <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d901      	bls.n	8000a54 <is_button_pressed+0x14>
 8000a50:	2300      	movs	r3, #0
 8000a52:	e007      	b.n	8000a64 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <is_button_pressed+0x30>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bf0c      	ite	eq
 8000a5e:	2301      	moveq	r3, #1
 8000a60:	2300      	movne	r3, #0
 8000a62:	b2db      	uxtb	r3, r3
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000068 	.word	0x20000068

08000a74 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d901      	bls.n	8000a88 <is_button_pressed_1s+0x14>
 8000a84:	23ff      	movs	r3, #255	; 0xff
 8000a86:	e007      	b.n	8000a98 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <is_button_pressed_1s+0x30>)
 8000a8c:	5cd3      	ldrb	r3, [r2, r3]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	bf0c      	ite	eq
 8000a92:	2301      	moveq	r3, #1
 8000a94:	2300      	movne	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000074 	.word	0x20000074

08000aa8 <DisplayREDX>:
 *
 *  Created on: Sep 27, 2024
 *      Author: Genki
 */
#include "main.h"
void DisplayREDX(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2108      	movs	r1, #8
 8000ab0:	480a      	ldr	r0, [pc, #40]	; (8000adc <DisplayREDX+0x34>)
 8000ab2:	f000 ff06 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2120      	movs	r1, #32
 8000aba:	4808      	ldr	r0, [pc, #32]	; (8000adc <DisplayREDX+0x34>)
 8000abc:	f000 ff01 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <DisplayREDX+0x34>)
 8000ac6:	f000 fefc 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <DisplayREDX+0x34>)
 8000ad2:	f000 fef6 	bl	80018c2 <HAL_GPIO_WritePin>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <DisplayYELLOWX>:
void DisplayYELLOWX(void){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	480a      	ldr	r0, [pc, #40]	; (8000b14 <DisplayYELLOWX+0x34>)
 8000aea:	f000 feea 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2120      	movs	r1, #32
 8000af2:	4808      	ldr	r0, [pc, #32]	; (8000b14 <DisplayYELLOWX+0x34>)
 8000af4:	f000 fee5 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2110      	movs	r1, #16
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <DisplayYELLOWX+0x34>)
 8000afe:	f000 fee0 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <DisplayYELLOWX+0x34>)
 8000b0a:	f000 feda 	bl	80018c2 <HAL_GPIO_WritePin>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40010c00 	.word	0x40010c00

08000b18 <DisplayGREENX>:
void DisplayGREENX(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2108      	movs	r1, #8
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <DisplayGREENX+0x34>)
 8000b22:	f000 fece 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <DisplayGREENX+0x34>)
 8000b2c:	f000 fec9 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2110      	movs	r1, #16
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <DisplayGREENX+0x34>)
 8000b36:	f000 fec4 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <DisplayGREENX+0x34>)
 8000b42:	f000 febe 	bl	80018c2 <HAL_GPIO_WritePin>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40010c00 	.word	0x40010c00

08000b50 <DisplayREDY>:
void DisplayREDY(void){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <DisplayREDY+0x34>)
 8000b5c:	f000 feb1 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <DisplayREDY+0x34>)
 8000b68:	f000 feab 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <DisplayREDY+0x38>)
 8000b72:	f000 fea6 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	4804      	ldr	r0, [pc, #16]	; (8000b8c <DisplayREDY+0x3c>)
 8000b7c:	f000 fea1 	bl	80018c2 <HAL_GPIO_WritePin>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40011000 	.word	0x40011000
 8000b8c:	40010c00 	.word	0x40010c00

08000b90 <DisplayYELLOWY>:
void DisplayYELLOWY(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9a:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <DisplayYELLOWY+0x34>)
 8000b9c:	f000 fe91 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba6:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <DisplayYELLOWY+0x34>)
 8000ba8:	f000 fe8b 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <DisplayYELLOWY+0x38>)
 8000bb2:	f000 fe86 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	4804      	ldr	r0, [pc, #16]	; (8000bcc <DisplayYELLOWY+0x3c>)
 8000bbc:	f000 fe81 	bl	80018c2 <HAL_GPIO_WritePin>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	40011000 	.word	0x40011000
 8000bcc:	40010c00 	.word	0x40010c00

08000bd0 <DisplayGREENY>:
void DisplayGREENY(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, SET);//chân đúng
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bda:	480a      	ldr	r0, [pc, #40]	; (8000c04 <DisplayGREENY+0x34>)
 8000bdc:	f000 fe71 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <DisplayGREENY+0x34>)
 8000be8:	f000 fe6b 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <DisplayGREENY+0x38>)
 8000bf2:	f000 fe66 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2140      	movs	r1, #64	; 0x40
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <DisplayGREENY+0x3c>)
 8000bfc:	f000 fe61 	bl	80018c2 <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40010800 	.word	0x40010800
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <InitLED>:
//	HAL_GPIO_TogglePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin);
//}
//void DisplayMAN_YELLOWY(void){
//	HAL_GPIO_TogglePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin);
//}
void InitLED(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2108      	movs	r1, #8
 8000c18:	4815      	ldr	r0, [pc, #84]	; (8000c70 <InitLED+0x60>)
 8000c1a:	f000 fe52 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	4813      	ldr	r0, [pc, #76]	; (8000c70 <InitLED+0x60>)
 8000c24:	f000 fe4d 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <InitLED+0x60>)
 8000c2e:	f000 fe48 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <InitLED+0x60>)
 8000c3a:	f000 fe42 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <InitLED+0x64>)
 8000c46:	f000 fe3c 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <InitLED+0x64>)
 8000c52:	f000 fe36 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <InitLED+0x68>)
 8000c5c:	f000 fe31 	bl	80018c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <InitLED+0x60>)
 8000c66:	f000 fe2c 	bl	80018c2 <HAL_GPIO_WritePin>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	40010800 	.word	0x40010800
 8000c78:	40011000 	.word	0x40011000

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c80:	f000 fb14 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c84:	f000 f83e 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c88:	f000 f8f2 	bl	8000e70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c8c:	f000 f8c6 	bl	8000e1c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c90:	f000 f878 	bl	8000d84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c94:	4815      	ldr	r0, [pc, #84]	; (8000cec <main+0x70>)
 8000c96:	f001 faad 	bl	80021f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  statusx = INIT;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <main+0x74>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
  statusy = INIT;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <main+0x78>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]
  counterMode = 1;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <main+0x7c>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
  counterTimeSet = 0;
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <main+0x80>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
  DisplayCounter = 0;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <main+0x84>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
  setTimer(6, 10);
 8000cb8:	210a      	movs	r1, #10
 8000cba:	2006      	movs	r0, #6
 8000cbc:	f000 fa70 	bl	80011a0 <setTimer>
  setTimer(4, 500);
 8000cc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cc4:	2004      	movs	r0, #4
 8000cc6:	f000 fa6b 	bl	80011a0 <setTimer>
  setTimer(5, 500);
 8000cca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cce:	2005      	movs	r0, #5
 8000cd0:	f000 fa66 	bl	80011a0 <setTimer>
  while (1)
  {
  fsm_automatic_runx();
 8000cd4:	f7ff fb32 	bl	800033c <fsm_automatic_runx>
  fsm_automatic_runy();
 8000cd8:	f7ff fbc8 	bl	800046c <fsm_automatic_runy>
//  fsm_manual_run1();
//  fsm_manual_run2();
  fsm_for_input_processing1();
 8000cdc:	f7ff fcc6 	bl	800066c <fsm_for_input_processing1>
  fsm_for_input_processing2();
 8000ce0:	f7ff fd1a 	bl	8000718 <fsm_for_input_processing2>
  fsm_for_input_processing3();
 8000ce4:	f7ff fd6a 	bl	80007bc <fsm_for_input_processing3>
  fsm_automatic_runx();
 8000ce8:	e7f4      	b.n	8000cd4 <main+0x58>
 8000cea:	bf00      	nop
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	2000004c 	.word	0x2000004c
 8000cf4:	20000050 	.word	0x20000050
 8000cf8:	20000060 	.word	0x20000060
 8000cfc:	20000064 	.word	0x20000064
 8000d00:	20000038 	.word	0x20000038

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b090      	sub	sp, #64	; 0x40
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	2228      	movs	r2, #40	; 0x28
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 ff12 	bl	8002b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2e:	2310      	movs	r3, #16
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	2302      	movs	r3, #2
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d36:	2300      	movs	r3, #0
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3e:	f107 0318 	add.w	r3, r7, #24
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fdf8 	bl	8001938 <HAL_RCC_OscConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000d4e:	f000 f94d 	bl	8000fec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	230f      	movs	r3, #15
 8000d54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d56:	2302      	movs	r3, #2
 8000d58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f863 	bl	8001e38 <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000d78:	f000 f938 	bl	8000fec <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3740      	adds	r7, #64	; 0x40
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000da2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000daa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000db8:	2209      	movs	r2, #9
 8000dba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc8:	4813      	ldr	r0, [pc, #76]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dca:	f001 f9c3 	bl	8002154 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dd4:	f000 f90a 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000de6:	f001 fb47 	bl	8002478 <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000df0:	f000 f8fc 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000e02:	f001 fd29 	bl	8002858 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 f8ee 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000008c 	.word	0x2000008c

08000e1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_USART2_UART_Init+0x50>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f001 fd70 	bl	8002938 <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e5e:	f000 f8c5 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000d4 	.word	0x200000d4
 8000e6c:	40004400 	.word	0x40004400

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e84:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a53      	ldr	r2, [pc, #332]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9c:	4b4e      	ldr	r3, [pc, #312]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a4d      	ldr	r2, [pc, #308]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0320 	and.w	r3, r3, #32
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b48      	ldr	r3, [pc, #288]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a47      	ldr	r2, [pc, #284]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ecc:	4b42      	ldr	r3, [pc, #264]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a41      	ldr	r2, [pc, #260]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b3f      	ldr	r3, [pc, #252]	; (8000fd8 <MX_GPIO_Init+0x168>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LEDY1_A_Pin|LEDY1_B_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000eea:	483c      	ldr	r0, [pc, #240]	; (8000fdc <MX_GPIO_Init+0x16c>)
 8000eec:	f000 fce9 	bl	80018c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDX2_B_Pin|LEDX1_A_Pin|LEDX2_A_Pin|LEDX1_B_Pin
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000ef6:	483a      	ldr	r0, [pc, #232]	; (8000fe0 <MX_GPIO_Init+0x170>)
 8000ef8:	f000 fce3 	bl	80018c2 <HAL_GPIO_WritePin>
                          |LEDY2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	4838      	ldr	r0, [pc, #224]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000f02:	f000 fcde 	bl	80018c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0c:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <MX_GPIO_Init+0x178>)
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4832      	ldr	r0, [pc, #200]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000f1c:	f000 fb36 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button4_Pin */
  GPIO_InitStruct.Pin = Button4_Pin;
 8000f20:	2302      	movs	r3, #2
 8000f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button4_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	482c      	ldr	r0, [pc, #176]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000f34:	f000 fb2a 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <MX_GPIO_Init+0x16c>)
 8000f4c:	f000 fb1e 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LEDY1_A_Pin LEDY1_B_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LEDY1_A_Pin|LEDY1_B_Pin;
 8000f50:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	481c      	ldr	r0, [pc, #112]	; (8000fdc <MX_GPIO_Init+0x16c>)
 8000f6a:	f000 fb0f 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <MX_GPIO_Init+0x170>)
 8000f82:	f000 fb03 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDX2_B_Pin LEDX1_A_Pin LEDX2_A_Pin LEDX1_B_Pin
                           LEDY2_B_Pin */
  GPIO_InitStruct.Pin = LEDX2_B_Pin|LEDX1_A_Pin|LEDX2_A_Pin|LEDX1_B_Pin
 8000f86:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000f8a:	613b      	str	r3, [r7, #16]
                          |LEDY2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <MX_GPIO_Init+0x170>)
 8000fa0:	f000 faf4 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDY2_A_Pin */
  GPIO_InitStruct.Pin = LEDY2_A_Pin;
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDY2_A_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <MX_GPIO_Init+0x174>)
 8000fbc:	f000 fae6 	bl	800158c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2028      	movs	r0, #40	; 0x28
 8000fc6:	f000 faaa 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fca:	2028      	movs	r0, #40	; 0x28
 8000fcc:	f000 fac3 	bl	8001556 <HAL_NVIC_EnableIRQ>

}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	40011000 	.word	0x40011000
 8000fe8:	10110000 	.word	0x10110000

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>
	...

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_MspInit+0x5c>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_MspInit+0x5c>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_MspInit+0x5c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_MspInit+0x5c>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_MspInit+0x5c>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_MspInit+0x5c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_MspInit+0x60>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_MspInit+0x60>)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000

0800105c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d113      	bne.n	8001096 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_TIM_Base_MspInit+0x44>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <HAL_TIM_Base_MspInit+0x44>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	61d3      	str	r3, [r2, #28]
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_TIM_Base_MspInit+0x44>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	201c      	movs	r0, #28
 800108c:	f000 fa47 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001090:	201c      	movs	r0, #28
 8001092:	f000 fa60 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a15      	ldr	r2, [pc, #84]	; (8001114 <HAL_UART_MspInit+0x70>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d123      	bne.n	800110c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	4a13      	ldr	r2, [pc, #76]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ce:	61d3      	str	r3, [r2, #28]
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010f4:	230c      	movs	r3, #12
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_UART_MspInit+0x78>)
 8001108:	f000 fa40 	bl	800158c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40004400 	.word	0x40004400
 8001118:	40021000 	.word	0x40021000
 800111c:	40010800 	.word	0x40010800

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001166:	f000 f8e7 	bl	8001338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <TIM2_IRQHandler+0x10>)
 8001176:	f001 f88f 	bl	8002298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000008c 	.word	0x2000008c

08001184 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001188:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800118c:	f000 fbb2 	bl	80018f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <setTimer>:
//#include "input_reading.h"
#define MAX_COUNTER 10
int TIME_CYCLE = 10;
int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];
void setTimer(int index, int duration){
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <setTimer+0x30>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	fb92 f2f3 	sdiv	r2, r2, r3
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <setTimer+0x34>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <setTimer+0x38>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2100      	movs	r1, #0
 80011c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000010 	.word	0x20000010
 80011d4:	2000011c 	.word	0x2000011c
 80011d8:	20000144 	.word	0x20000144

080011dc <timerRun>:
void timerRun(void){
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_COUNTER; i++){
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	e01c      	b.n	8001222 <timerRun+0x46>
		if(timer_counter[i] > 0){
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <timerRun+0x58>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dd13      	ble.n	800121c <timerRun+0x40>
			timer_counter[i]--;
 80011f4:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <timerRun+0x58>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	490d      	ldr	r1, [pc, #52]	; (8001234 <timerRun+0x58>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <timerRun+0x58>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	2b00      	cmp	r3, #0
 8001210:	dc04      	bgt.n	800121c <timerRun+0x40>
				timer_flag[i] = 1;
 8001212:	4a09      	ldr	r2, [pc, #36]	; (8001238 <timerRun+0x5c>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2101      	movs	r1, #1
 8001218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_COUNTER; i++){
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3301      	adds	r3, #1
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b09      	cmp	r3, #9
 8001226:	dddf      	ble.n	80011e8 <timerRun+0xc>
			}
		}
	}
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	2000011c 	.word	0x2000011c
 8001238:	20000144 	.word	0x20000144

0800123c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800124c:	d103      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading() ;
 800124e:	f7ff fb4d 	bl	80008ec <button_reading>
		timerRun();
 8001252:	f7ff ffc3 	bl	80011dc <timerRun>
	}
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001260:	f7ff ff98 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001266:	490c      	ldr	r1, [pc, #48]	; (8001298 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001268:	4a0c      	ldr	r2, [pc, #48]	; (800129c <LoopFillZerobss+0x16>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800127c:	4c09      	ldr	r4, [pc, #36]	; (80012a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f001 fc33 	bl	8002af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128e:	f7ff fcf5 	bl	8000c7c <main>
  bx lr
 8001292:	4770      	bx	lr
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800129c:	08002b98 	.word	0x08002b98
  ldr r2, =_sbss
 80012a0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80012a4:	20000170 	.word	0x20000170

080012a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC1_2_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_Init+0x28>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_Init+0x28>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f923 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f808 	bl	80012d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c8:	f7ff fe96 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40022000 	.word	0x40022000

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x54>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x58>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f93b 	bl	8001572 <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00e      	b.n	8001324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d80a      	bhi.n	8001322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f000 f903 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_InitTick+0x5c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000000c 	.word	0x2000000c
 8001330:	20000018 	.word	0x20000018
 8001334:	20000014 	.word	0x20000014

08001338 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_IncTick+0x1c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_IncTick+0x20>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a03      	ldr	r2, [pc, #12]	; (8001358 <HAL_IncTick+0x20>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000018 	.word	0x20000018
 8001358:	2000016c 	.word	0x2000016c

0800135c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <HAL_GetTick+0x10>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	2000016c 	.word	0x2000016c

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4906      	ldr	r1, [pc, #24]	; (8001408 <__NVIC_EnableIRQ+0x34>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff90 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff2d 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff42 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff90 	bl	8001460 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5f 	bl	800140c <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff35 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b08b      	sub	sp, #44	; 0x2c
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159e:	e169      	b.n	8001874 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015a0:	2201      	movs	r2, #1
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	f040 8158 	bne.w	800186e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4a9a      	ldr	r2, [pc, #616]	; (800182c <HAL_GPIO_Init+0x2a0>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d05e      	beq.n	8001686 <HAL_GPIO_Init+0xfa>
 80015c8:	4a98      	ldr	r2, [pc, #608]	; (800182c <HAL_GPIO_Init+0x2a0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d875      	bhi.n	80016ba <HAL_GPIO_Init+0x12e>
 80015ce:	4a98      	ldr	r2, [pc, #608]	; (8001830 <HAL_GPIO_Init+0x2a4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d058      	beq.n	8001686 <HAL_GPIO_Init+0xfa>
 80015d4:	4a96      	ldr	r2, [pc, #600]	; (8001830 <HAL_GPIO_Init+0x2a4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d86f      	bhi.n	80016ba <HAL_GPIO_Init+0x12e>
 80015da:	4a96      	ldr	r2, [pc, #600]	; (8001834 <HAL_GPIO_Init+0x2a8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d052      	beq.n	8001686 <HAL_GPIO_Init+0xfa>
 80015e0:	4a94      	ldr	r2, [pc, #592]	; (8001834 <HAL_GPIO_Init+0x2a8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d869      	bhi.n	80016ba <HAL_GPIO_Init+0x12e>
 80015e6:	4a94      	ldr	r2, [pc, #592]	; (8001838 <HAL_GPIO_Init+0x2ac>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d04c      	beq.n	8001686 <HAL_GPIO_Init+0xfa>
 80015ec:	4a92      	ldr	r2, [pc, #584]	; (8001838 <HAL_GPIO_Init+0x2ac>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d863      	bhi.n	80016ba <HAL_GPIO_Init+0x12e>
 80015f2:	4a92      	ldr	r2, [pc, #584]	; (800183c <HAL_GPIO_Init+0x2b0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d046      	beq.n	8001686 <HAL_GPIO_Init+0xfa>
 80015f8:	4a90      	ldr	r2, [pc, #576]	; (800183c <HAL_GPIO_Init+0x2b0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d85d      	bhi.n	80016ba <HAL_GPIO_Init+0x12e>
 80015fe:	2b12      	cmp	r3, #18
 8001600:	d82a      	bhi.n	8001658 <HAL_GPIO_Init+0xcc>
 8001602:	2b12      	cmp	r3, #18
 8001604:	d859      	bhi.n	80016ba <HAL_GPIO_Init+0x12e>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <HAL_GPIO_Init+0x80>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	08001687 	.word	0x08001687
 8001610:	08001661 	.word	0x08001661
 8001614:	08001673 	.word	0x08001673
 8001618:	080016b5 	.word	0x080016b5
 800161c:	080016bb 	.word	0x080016bb
 8001620:	080016bb 	.word	0x080016bb
 8001624:	080016bb 	.word	0x080016bb
 8001628:	080016bb 	.word	0x080016bb
 800162c:	080016bb 	.word	0x080016bb
 8001630:	080016bb 	.word	0x080016bb
 8001634:	080016bb 	.word	0x080016bb
 8001638:	080016bb 	.word	0x080016bb
 800163c:	080016bb 	.word	0x080016bb
 8001640:	080016bb 	.word	0x080016bb
 8001644:	080016bb 	.word	0x080016bb
 8001648:	080016bb 	.word	0x080016bb
 800164c:	080016bb 	.word	0x080016bb
 8001650:	08001669 	.word	0x08001669
 8001654:	0800167d 	.word	0x0800167d
 8001658:	4a79      	ldr	r2, [pc, #484]	; (8001840 <HAL_GPIO_Init+0x2b4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d013      	beq.n	8001686 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800165e:	e02c      	b.n	80016ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	623b      	str	r3, [r7, #32]
          break;
 8001666:	e029      	b.n	80016bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	3304      	adds	r3, #4
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e024      	b.n	80016bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	3308      	adds	r3, #8
 8001678:	623b      	str	r3, [r7, #32]
          break;
 800167a:	e01f      	b.n	80016bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	330c      	adds	r3, #12
 8001682:	623b      	str	r3, [r7, #32]
          break;
 8001684:	e01a      	b.n	80016bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800168e:	2304      	movs	r3, #4
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e013      	b.n	80016bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d105      	bne.n	80016a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800169c:	2308      	movs	r3, #8
 800169e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	611a      	str	r2, [r3, #16]
          break;
 80016a6:	e009      	b.n	80016bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a8:	2308      	movs	r3, #8
 80016aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	615a      	str	r2, [r3, #20]
          break;
 80016b2:	e003      	b.n	80016bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
          break;
 80016b8:	e000      	b.n	80016bc <HAL_GPIO_Init+0x130>
          break;
 80016ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2bff      	cmp	r3, #255	; 0xff
 80016c0:	d801      	bhi.n	80016c6 <HAL_GPIO_Init+0x13a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	e001      	b.n	80016ca <HAL_GPIO_Init+0x13e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3304      	adds	r3, #4
 80016ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2bff      	cmp	r3, #255	; 0xff
 80016d0:	d802      	bhi.n	80016d8 <HAL_GPIO_Init+0x14c>
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	e002      	b.n	80016de <HAL_GPIO_Init+0x152>
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	3b08      	subs	r3, #8
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	210f      	movs	r1, #15
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	6a39      	ldr	r1, [r7, #32]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	431a      	orrs	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80b1 	beq.w	800186e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800170c:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <HAL_GPIO_Init+0x2b8>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a4c      	ldr	r2, [pc, #304]	; (8001844 <HAL_GPIO_Init+0x2b8>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <HAL_GPIO_Init+0x2b8>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001724:	4a48      	ldr	r2, [pc, #288]	; (8001848 <HAL_GPIO_Init+0x2bc>)
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a40      	ldr	r2, [pc, #256]	; (800184c <HAL_GPIO_Init+0x2c0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d013      	beq.n	8001778 <HAL_GPIO_Init+0x1ec>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a3f      	ldr	r2, [pc, #252]	; (8001850 <HAL_GPIO_Init+0x2c4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d00d      	beq.n	8001774 <HAL_GPIO_Init+0x1e8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a3e      	ldr	r2, [pc, #248]	; (8001854 <HAL_GPIO_Init+0x2c8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0x1e4>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a3d      	ldr	r2, [pc, #244]	; (8001858 <HAL_GPIO_Init+0x2cc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_GPIO_Init+0x1e0>
 8001768:	2303      	movs	r3, #3
 800176a:	e006      	b.n	800177a <HAL_GPIO_Init+0x1ee>
 800176c:	2304      	movs	r3, #4
 800176e:	e004      	b.n	800177a <HAL_GPIO_Init+0x1ee>
 8001770:	2302      	movs	r3, #2
 8001772:	e002      	b.n	800177a <HAL_GPIO_Init+0x1ee>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <HAL_GPIO_Init+0x1ee>
 8001778:	2300      	movs	r3, #0
 800177a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177c:	f002 0203 	and.w	r2, r2, #3
 8001780:	0092      	lsls	r2, r2, #2
 8001782:	4093      	lsls	r3, r2
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800178a:	492f      	ldr	r1, [pc, #188]	; (8001848 <HAL_GPIO_Init+0x2bc>)
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_GPIO_Init+0x2d0>)
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	492c      	ldr	r1, [pc, #176]	; (800185c <HAL_GPIO_Init+0x2d0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_GPIO_Init+0x2d0>)
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4928      	ldr	r1, [pc, #160]	; (800185c <HAL_GPIO_Init+0x2d0>)
 80017bc:	4013      	ands	r3, r2
 80017be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_GPIO_Init+0x2d0>)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4922      	ldr	r1, [pc, #136]	; (800185c <HAL_GPIO_Init+0x2d0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60cb      	str	r3, [r1, #12]
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_GPIO_Init+0x2d0>)
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	491e      	ldr	r1, [pc, #120]	; (800185c <HAL_GPIO_Init+0x2d0>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_GPIO_Init+0x2d0>)
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4918      	ldr	r1, [pc, #96]	; (800185c <HAL_GPIO_Init+0x2d0>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_GPIO_Init+0x2d0>)
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	4914      	ldr	r1, [pc, #80]	; (800185c <HAL_GPIO_Init+0x2d0>)
 800180c:	4013      	ands	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d021      	beq.n	8001860 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_GPIO_Init+0x2d0>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	490e      	ldr	r1, [pc, #56]	; (800185c <HAL_GPIO_Init+0x2d0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
 8001828:	e021      	b.n	800186e <HAL_GPIO_Init+0x2e2>
 800182a:	bf00      	nop
 800182c:	10320000 	.word	0x10320000
 8001830:	10310000 	.word	0x10310000
 8001834:	10220000 	.word	0x10220000
 8001838:	10210000 	.word	0x10210000
 800183c:	10120000 	.word	0x10120000
 8001840:	10110000 	.word	0x10110000
 8001844:	40021000 	.word	0x40021000
 8001848:	40010000 	.word	0x40010000
 800184c:	40010800 	.word	0x40010800
 8001850:	40010c00 	.word	0x40010c00
 8001854:	40011000 	.word	0x40011000
 8001858:	40011400 	.word	0x40011400
 800185c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	43db      	mvns	r3, r3
 8001868:	4909      	ldr	r1, [pc, #36]	; (8001890 <HAL_GPIO_Init+0x304>)
 800186a:	4013      	ands	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	3301      	adds	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	fa22 f303 	lsr.w	r3, r2, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	f47f ae8e 	bne.w	80015a0 <HAL_GPIO_Init+0x14>
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	372c      	adds	r7, #44	; 0x2c
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40010400 	.word	0x40010400

08001894 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e001      	b.n	80018b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	460b      	mov	r3, r1
 80018cc:	807b      	strh	r3, [r7, #2]
 80018ce:	4613      	mov	r3, r2
 80018d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d2:	787b      	ldrb	r3, [r7, #1]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d8:	887a      	ldrh	r2, [r7, #2]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018de:	e003      	b.n	80018e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	041a      	lsls	r2, r3, #16
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	611a      	str	r2, [r3, #16]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f806 	bl	8001924 <HAL_GPIO_EXTI_Callback>
  }
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e26c      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8087 	beq.w	8001a66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001958:	4b92      	ldr	r3, [pc, #584]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b04      	cmp	r3, #4
 8001962:	d00c      	beq.n	800197e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001964:	4b8f      	ldr	r3, [pc, #572]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d112      	bne.n	8001996 <HAL_RCC_OscConfig+0x5e>
 8001970:	4b8c      	ldr	r3, [pc, #560]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197c:	d10b      	bne.n	8001996 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197e:	4b89      	ldr	r3, [pc, #548]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d06c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x12c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d168      	bne.n	8001a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e246      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x76>
 80019a0:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a7f      	ldr	r2, [pc, #508]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	e02e      	b.n	8001a0c <HAL_RCC_OscConfig+0xd4>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x98>
 80019b6:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7a      	ldr	r2, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b78      	ldr	r3, [pc, #480]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a77      	ldr	r2, [pc, #476]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e01d      	b.n	8001a0c <HAL_RCC_OscConfig+0xd4>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0xbc>
 80019da:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a71      	ldr	r2, [pc, #452]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6e      	ldr	r2, [pc, #440]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0xd4>
 80019f4:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a6a      	ldr	r2, [pc, #424]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a67      	ldr	r2, [pc, #412]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff fca2 	bl	800135c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fc9e 	bl	800135c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1fa      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0xe4>
 8001a3a:	e014      	b.n	8001a66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc8e 	bl	800135c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fc8a 	bl	800135c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1e6      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x10c>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d063      	beq.n	8001b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a7e:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d11c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x18c>
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d116      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_RCC_OscConfig+0x176>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e1ba      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4939      	ldr	r1, [pc, #228]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	e03a      	b.n	8001b3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_RCC_OscConfig+0x270>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fc43 	bl	800135c <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ada:	f7ff fc3f 	bl	800135c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e19b      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4927      	ldr	r1, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
 8001b0c:	e015      	b.n	8001b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_RCC_OscConfig+0x270>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fc22 	bl	800135c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fc1e 	bl	800135c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e17a      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d03a      	beq.n	8001bbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d019      	beq.n	8001b82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7ff fc02 	bl	800135c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fbfe 	bl	800135c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e15a      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f000 facc 	bl	8002118 <RCC_Delay>
 8001b80:	e01c      	b.n	8001bbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff fbe8 	bl	800135c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8e:	e00f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff fbe4 	bl	800135c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d908      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e140      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	42420000 	.word	0x42420000
 8001bac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	4b9e      	ldr	r3, [pc, #632]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e9      	bne.n	8001b90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a6 	beq.w	8001d16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bce:	4b97      	ldr	r3, [pc, #604]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10d      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b94      	ldr	r3, [pc, #592]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a93      	ldr	r2, [pc, #588]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b91      	ldr	r3, [pc, #580]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b8e      	ldr	r3, [pc, #568]	; (8001e30 <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b8b      	ldr	r3, [pc, #556]	; (8001e30 <HAL_RCC_OscConfig+0x4f8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a8a      	ldr	r2, [pc, #552]	; (8001e30 <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fba5 	bl	800135c <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7ff fba1 	bl	800135c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	; 0x64
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0fd      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b81      	ldr	r3, [pc, #516]	; (8001e30 <HAL_RCC_OscConfig+0x4f8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x312>
 8001c3c:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a7a      	ldr	r2, [pc, #488]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	e02d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x36e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x334>
 8001c52:	4b76      	ldr	r3, [pc, #472]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4a75      	ldr	r2, [pc, #468]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6213      	str	r3, [r2, #32]
 8001c5e:	4b73      	ldr	r3, [pc, #460]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a72      	ldr	r2, [pc, #456]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	e01c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x36e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d10c      	bne.n	8001c8e <HAL_RCC_OscConfig+0x356>
 8001c74:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4a6c      	ldr	r2, [pc, #432]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6213      	str	r3, [r2, #32]
 8001c80:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a69      	ldr	r2, [pc, #420]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	e00b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x36e>
 8001c8e:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a66      	ldr	r2, [pc, #408]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a63      	ldr	r2, [pc, #396]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d015      	beq.n	8001cda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fb55 	bl	800135c <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fb51 	bl	800135c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e0ab      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ee      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x37e>
 8001cd8:	e014      	b.n	8001d04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cda:	f7ff fb3f 	bl	800135c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff fb3b 	bl	800135c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e095      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ee      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d105      	bne.n	8001d16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0a:	4b48      	ldr	r3, [pc, #288]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8081 	beq.w	8001e22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d20:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d061      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d146      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d34:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_RCC_OscConfig+0x4fc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fb0f 	bl	800135c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff fb0b 	bl	800135c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e067      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d108      	bne.n	8001d7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d6a:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	492d      	ldr	r1, [pc, #180]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a19      	ldr	r1, [r3, #32]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	4927      	ldr	r1, [pc, #156]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_RCC_OscConfig+0x4fc>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fadf 	bl	800135c <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff fadb 	bl	800135c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e037      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x46a>
 8001dc0:	e02f      	b.n	8001e22 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_RCC_OscConfig+0x4fc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fac8 	bl	800135c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff fac4 	bl	800135c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e020      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x498>
 8001dee:	e018      	b.n	8001e22 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e013      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
 8001e34:	42420060 	.word	0x42420060

08001e38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0d0      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d910      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0207 	bic.w	r2, r3, #7
 8001e62:	4965      	ldr	r1, [pc, #404]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0b8      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e94:	4b59      	ldr	r3, [pc, #356]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a58      	ldr	r2, [pc, #352]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eac:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a52      	ldr	r2, [pc, #328]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb8:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	494d      	ldr	r1, [pc, #308]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d040      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d115      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e07f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e073      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06b      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f023 0203 	bic.w	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4936      	ldr	r1, [pc, #216]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f28:	f7ff fa18 	bl	800135c <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7ff fa14 	bl	800135c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e053      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 020c 	and.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1eb      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d210      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	4922      	ldr	r1, [pc, #136]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e032      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4916      	ldr	r1, [pc, #88]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	490e      	ldr	r1, [pc, #56]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fc6:	f000 f821 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	490a      	ldr	r1, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	5ccb      	ldrb	r3, [r1, r3]
 8001fda:	fa22 f303 	lsr.w	r3, r2, r3
 8001fde:	4a09      	ldr	r2, [pc, #36]	; (8002004 <HAL_RCC_ClockConfig+0x1cc>)
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_RCC_ClockConfig+0x1d0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f976 	bl	80012d8 <HAL_InitTick>

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08002b64 	.word	0x08002b64
 8002004:	2000000c 	.word	0x2000000c
 8002008:	20000014 	.word	0x20000014

0800200c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b04      	cmp	r3, #4
 8002034:	d002      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x30>
 8002036:	2b08      	cmp	r3, #8
 8002038:	d003      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x36>
 800203a:	e027      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800203e:	613b      	str	r3, [r7, #16]
      break;
 8002040:	e027      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	0c9b      	lsrs	r3, r3, #18
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d010      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	0c5b      	lsrs	r3, r3, #17
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800206e:	fb02 f203 	mul.w	r2, r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e004      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002080:	fb02 f303 	mul.w	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	613b      	str	r3, [r7, #16]
      break;
 800208a:	e002      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800208e:	613b      	str	r3, [r7, #16]
      break;
 8002090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002092:	693b      	ldr	r3, [r7, #16]
}
 8002094:	4618      	mov	r0, r3
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	007a1200 	.word	0x007a1200
 80020a8:	08002b7c 	.word	0x08002b7c
 80020ac:	08002b8c 	.word	0x08002b8c
 80020b0:	003d0900 	.word	0x003d0900

080020b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b8:	4b02      	ldr	r3, [pc, #8]	; (80020c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	2000000c 	.word	0x2000000c

080020c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020cc:	f7ff fff2 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4903      	ldr	r1, [pc, #12]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08002b74 	.word	0x08002b74

080020f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020f4:	f7ff ffde 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	0adb      	lsrs	r3, r3, #11
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4903      	ldr	r1, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	08002b74 	.word	0x08002b74

08002118 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <RCC_Delay+0x34>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <RCC_Delay+0x38>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0a5b      	lsrs	r3, r3, #9
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002134:	bf00      	nop
  }
  while (Delay --);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e5a      	subs	r2, r3, #1
 800213a:	60fa      	str	r2, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f9      	bne.n	8002134 <RCC_Delay+0x1c>
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	2000000c 	.word	0x2000000c
 8002150:	10624dd3 	.word	0x10624dd3

08002154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e041      	b.n	80021ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe ff6e 	bl	800105c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3304      	adds	r3, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f000 fa5c 	bl	8002650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d001      	beq.n	800220c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e03a      	b.n	8002282 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a18      	ldr	r2, [pc, #96]	; (800228c <HAL_TIM_Base_Start_IT+0x98>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00e      	beq.n	800224c <HAL_TIM_Base_Start_IT+0x58>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002236:	d009      	beq.n	800224c <HAL_TIM_Base_Start_IT+0x58>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_TIM_Base_Start_IT+0x9c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d004      	beq.n	800224c <HAL_TIM_Base_Start_IT+0x58>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <HAL_TIM_Base_Start_IT+0xa0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d111      	bne.n	8002270 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b06      	cmp	r3, #6
 800225c:	d010      	beq.n	8002280 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800226e:	e007      	b.n	8002280 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	40012c00 	.word	0x40012c00
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800

08002298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d020      	beq.n	80022fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01b      	beq.n	80022fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0202 	mvn.w	r2, #2
 80022cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f998 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f98b 	bl	8002606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f99a 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	d020      	beq.n	8002348 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01b      	beq.n	8002348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0204 	mvn.w	r2, #4
 8002318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f972 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f965 	bl	8002606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f974 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d020      	beq.n	8002394 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01b      	beq.n	8002394 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0208 	mvn.w	r2, #8
 8002364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2204      	movs	r2, #4
 800236a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f94c 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f93f 	bl	8002606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f94e 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d020      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01b      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0210 	mvn.w	r2, #16
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2208      	movs	r2, #8
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f926 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f919 	bl	8002606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f928 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00c      	beq.n	8002404 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0201 	mvn.w	r2, #1
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe ff1c 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00c      	beq.n	8002428 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fa7f 	bl	8002926 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f8f8 	bl	800263c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00c      	beq.n	8002470 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0220 	mvn.w	r2, #32
 8002468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fa52 	bl	8002914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_TIM_ConfigClockSource+0x1c>
 8002490:	2302      	movs	r3, #2
 8002492:	e0b4      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x186>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024cc:	d03e      	beq.n	800254c <HAL_TIM_ConfigClockSource+0xd4>
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	f200 8087 	bhi.w	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 80024d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024da:	f000 8086 	beq.w	80025ea <HAL_TIM_ConfigClockSource+0x172>
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e2:	d87f      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b70      	cmp	r3, #112	; 0x70
 80024e6:	d01a      	beq.n	800251e <HAL_TIM_ConfigClockSource+0xa6>
 80024e8:	2b70      	cmp	r3, #112	; 0x70
 80024ea:	d87b      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b60      	cmp	r3, #96	; 0x60
 80024ee:	d050      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x11a>
 80024f0:	2b60      	cmp	r3, #96	; 0x60
 80024f2:	d877      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d03c      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0xfa>
 80024f8:	2b50      	cmp	r3, #80	; 0x50
 80024fa:	d873      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d058      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d86f      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002504:	2b30      	cmp	r3, #48	; 0x30
 8002506:	d064      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002508:	2b30      	cmp	r3, #48	; 0x30
 800250a:	d86b      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 800250c:	2b20      	cmp	r3, #32
 800250e:	d060      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002510:	2b20      	cmp	r3, #32
 8002512:	d867      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05c      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002518:	2b10      	cmp	r3, #16
 800251a:	d05a      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x15a>
 800251c:	e062      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f000 f974 	bl	800281a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	609a      	str	r2, [r3, #8]
      break;
 800254a:	e04f      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f000 f95d 	bl	800281a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800256e:	609a      	str	r2, [r3, #8]
      break;
 8002570:	e03c      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	461a      	mov	r2, r3
 8002580:	f000 f8d4 	bl	800272c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2150      	movs	r1, #80	; 0x50
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f92b 	bl	80027e6 <TIM_ITRx_SetConfig>
      break;
 8002590:	e02c      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	461a      	mov	r2, r3
 80025a0:	f000 f8f2 	bl	8002788 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2160      	movs	r1, #96	; 0x60
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f91b 	bl	80027e6 <TIM_ITRx_SetConfig>
      break;
 80025b0:	e01c      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 f8b4 	bl	800272c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f90b 	bl	80027e6 <TIM_ITRx_SetConfig>
      break;
 80025d0:	e00c      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f000 f902 	bl	80027e6 <TIM_ITRx_SetConfig>
      break;
 80025e2:	e003      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
      break;
 80025e8:	e000      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
	...

08002650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <TIM_Base_SetConfig+0xd0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00b      	beq.n	8002680 <TIM_Base_SetConfig+0x30>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266e:	d007      	beq.n	8002680 <TIM_Base_SetConfig+0x30>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a2c      	ldr	r2, [pc, #176]	; (8002724 <TIM_Base_SetConfig+0xd4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d003      	beq.n	8002680 <TIM_Base_SetConfig+0x30>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a2b      	ldr	r2, [pc, #172]	; (8002728 <TIM_Base_SetConfig+0xd8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d108      	bne.n	8002692 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a22      	ldr	r2, [pc, #136]	; (8002720 <TIM_Base_SetConfig+0xd0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00b      	beq.n	80026b2 <TIM_Base_SetConfig+0x62>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a0:	d007      	beq.n	80026b2 <TIM_Base_SetConfig+0x62>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <TIM_Base_SetConfig+0xd4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d003      	beq.n	80026b2 <TIM_Base_SetConfig+0x62>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1e      	ldr	r2, [pc, #120]	; (8002728 <TIM_Base_SetConfig+0xd8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d108      	bne.n	80026c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <TIM_Base_SetConfig+0xd0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d103      	bne.n	80026f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f023 0201 	bic.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	611a      	str	r2, [r3, #16]
  }
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	40012c00 	.word	0x40012c00
 8002724:	40000400 	.word	0x40000400
 8002728:	40000800 	.word	0x40000800

0800272c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f023 0201 	bic.w	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f023 030a 	bic.w	r3, r3, #10
 8002768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	621a      	str	r2, [r3, #32]
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0210 	bic.w	r2, r3, #16
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	031b      	lsls	r3, r3, #12
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	621a      	str	r2, [r3, #32]
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	f043 0307 	orr.w	r3, r3, #7
 8002808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800281a:	b480      	push	{r7}
 800281c:	b087      	sub	sp, #28
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002834:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	021a      	lsls	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	431a      	orrs	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4313      	orrs	r3, r2
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	609a      	str	r2, [r3, #8]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800286c:	2302      	movs	r3, #2
 800286e:	e046      	b.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a16      	ldr	r2, [pc, #88]	; (8002908 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00e      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d009      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a10      	ldr	r2, [pc, #64]	; (8002910 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10c      	bne.n	80028ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	40012c00 	.word	0x40012c00
 800290c:	40000400 	.word	0x40000400
 8002910:	40000800 	.word	0x40000800

08002914 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e042      	b.n	80029d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fba0 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2224      	movs	r2, #36	; 0x24
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f82b 	bl	80029d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a12:	f023 030c 	bic.w	r3, r3, #12
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <UART_SetConfig+0x114>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d103      	bne.n	8002a48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a40:	f7ff fb56 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	e002      	b.n	8002a4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a48:	f7ff fb3e 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 8002a4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009a      	lsls	r2, r3, #2
 8002a58:	441a      	add	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <UART_SetConfig+0x118>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	0119      	lsls	r1, r3, #4
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <UART_SetConfig+0x118>)
 8002a86:	fba3 0302 	umull	r0, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2064      	movs	r0, #100	; 0x64
 8002a8e:	fb00 f303 	mul.w	r3, r0, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	3332      	adds	r3, #50	; 0x32
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <UART_SetConfig+0x118>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	4419      	add	r1, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <UART_SetConfig+0x118>)
 8002abe:	fba3 0302 	umull	r0, r3, r3, r2
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2064      	movs	r0, #100	; 0x64
 8002ac6:	fb00 f303 	mul.w	r3, r0, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	3332      	adds	r3, #50	; 0x32
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <UART_SetConfig+0x118>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	f003 020f 	and.w	r2, r3, #15
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40013800 	.word	0x40013800
 8002af0:	51eb851f 	.word	0x51eb851f

08002af4 <__libc_init_array>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	2600      	movs	r6, #0
 8002af8:	4d0c      	ldr	r5, [pc, #48]	; (8002b2c <__libc_init_array+0x38>)
 8002afa:	4c0d      	ldr	r4, [pc, #52]	; (8002b30 <__libc_init_array+0x3c>)
 8002afc:	1b64      	subs	r4, r4, r5
 8002afe:	10a4      	asrs	r4, r4, #2
 8002b00:	42a6      	cmp	r6, r4
 8002b02:	d109      	bne.n	8002b18 <__libc_init_array+0x24>
 8002b04:	f000 f822 	bl	8002b4c <_init>
 8002b08:	2600      	movs	r6, #0
 8002b0a:	4d0a      	ldr	r5, [pc, #40]	; (8002b34 <__libc_init_array+0x40>)
 8002b0c:	4c0a      	ldr	r4, [pc, #40]	; (8002b38 <__libc_init_array+0x44>)
 8002b0e:	1b64      	subs	r4, r4, r5
 8002b10:	10a4      	asrs	r4, r4, #2
 8002b12:	42a6      	cmp	r6, r4
 8002b14:	d105      	bne.n	8002b22 <__libc_init_array+0x2e>
 8002b16:	bd70      	pop	{r4, r5, r6, pc}
 8002b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b1c:	4798      	blx	r3
 8002b1e:	3601      	adds	r6, #1
 8002b20:	e7ee      	b.n	8002b00 <__libc_init_array+0xc>
 8002b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b26:	4798      	blx	r3
 8002b28:	3601      	adds	r6, #1
 8002b2a:	e7f2      	b.n	8002b12 <__libc_init_array+0x1e>
 8002b2c:	08002b90 	.word	0x08002b90
 8002b30:	08002b90 	.word	0x08002b90
 8002b34:	08002b90 	.word	0x08002b90
 8002b38:	08002b94 	.word	0x08002b94

08002b3c <memset>:
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4402      	add	r2, r0
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d100      	bne.n	8002b46 <memset+0xa>
 8002b44:	4770      	bx	lr
 8002b46:	f803 1b01 	strb.w	r1, [r3], #1
 8002b4a:	e7f9      	b.n	8002b40 <memset+0x4>

08002b4c <_init>:
 8002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4e:	bf00      	nop
 8002b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b52:	bc08      	pop	{r3}
 8002b54:	469e      	mov	lr, r3
 8002b56:	4770      	bx	lr

08002b58 <_fini>:
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	bf00      	nop
 8002b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5e:	bc08      	pop	{r3}
 8002b60:	469e      	mov	lr, r3
 8002b62:	4770      	bx	lr
