
Project_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004724  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e4  080048e4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080048e4  080048e4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e4  080048e4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080048ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000080  0800496c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  0800496c  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001203d  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002733  00000000  00000000  000320e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  000358c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e1f  00000000  00000000  00036848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c7b  00000000  00000000  0004f667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc97  00000000  00000000  000632e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0f79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004764  00000000  00000000  000f0fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004818 	.word	0x08004818

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004818 	.word	0x08004818

0800014c <SetMode>:
int mode4_flag = 0;
int save_counterTimeSet = 0;
int Time_red = 8;
int Time_green = 6;
int Time_yellow = 2;
void SetMode(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
	if(ProcessButton3() == 1){
 8000152:	f000 ff57 	bl	8001004 <ProcessButton3>
 8000156:	4603      	mov	r3, r0
 8000158:	2b01      	cmp	r3, #1
 800015a:	f040 80a0 	bne.w	800029e <SetMode+0x152>
		if(counterMode == 1){
 800015e:	4b52      	ldr	r3, [pc, #328]	; (80002a8 <SetMode+0x15c>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	2b01      	cmp	r3, #1
 8000164:	d126      	bne.n	80001b4 <SetMode+0x68>
//			if(statusx == AUTO_RED && statusy == AUTO_GREEN){
				char stry[16];
				char strx[16];
				sprintf(stry, "  Manual Mode ");
 8000166:	f107 0310 	add.w	r3, r7, #16
 800016a:	4950      	ldr	r1, [pc, #320]	; (80002ac <SetMode+0x160>)
 800016c:	4618      	mov	r0, r3
 800016e:	f003 ff19 	bl	8003fa4 <siprintf>
				sprintf(strx, "          ");
 8000172:	463b      	mov	r3, r7
 8000174:	494e      	ldr	r1, [pc, #312]	; (80002b0 <SetMode+0x164>)
 8000176:	4618      	mov	r0, r3
 8000178:	f003 ff14 	bl	8003fa4 <siprintf>
				lcd_goto_XY(1, 0);
 800017c:	2100      	movs	r1, #0
 800017e:	2001      	movs	r0, #1
 8000180:	f000 fdef 	bl	8000d62 <lcd_goto_XY>
				lcd_send_string(strx);
 8000184:	463b      	mov	r3, r7
 8000186:	4618      	mov	r0, r3
 8000188:	f000 fdd6 	bl	8000d38 <lcd_send_string>
				lcd_goto_XY(2, 0);
 800018c:	2100      	movs	r1, #0
 800018e:	2002      	movs	r0, #2
 8000190:	f000 fde7 	bl	8000d62 <lcd_goto_XY>
				lcd_send_string(stry);
 8000194:	f107 0310 	add.w	r3, r7, #16
 8000198:	4618      	mov	r0, r3
 800019a:	f000 fdcd 	bl	8000d38 <lcd_send_string>
				statusx = MANUAL_REDX_GREENY;
 800019e:	4b45      	ldr	r3, [pc, #276]	; (80002b4 <SetMode+0x168>)
 80001a0:	2208      	movs	r2, #8
 80001a2:	601a      	str	r2, [r3, #0]
				statusy = MANUAL_REDX_GREENY;
 80001a4:	4b44      	ldr	r3, [pc, #272]	; (80002b8 <SetMode+0x16c>)
 80001a6:	2208      	movs	r2, #8
 80001a8:	601a      	str	r2, [r3, #0]
				counterMode = 1;
 80001aa:	4b3f      	ldr	r3, [pc, #252]	; (80002a8 <SetMode+0x15c>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	601a      	str	r2, [r3, #0]
				InitLED();
 80001b0:	f001 f8cc 	bl	800134c <InitLED>
//				statusy = MANUAL_REDX_GREENY;
//				counterMode = 1;
//				InitLED();
//			}
		}
		if(counterMode == 2){
 80001b4:	4b3c      	ldr	r3, [pc, #240]	; (80002a8 <SetMode+0x15c>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b02      	cmp	r3, #2
 80001ba:	d126      	bne.n	800020a <SetMode+0xbe>
			Time_red = counterTimeSet;
 80001bc:	4b3f      	ldr	r3, [pc, #252]	; (80002bc <SetMode+0x170>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a3f      	ldr	r2, [pc, #252]	; (80002c0 <SetMode+0x174>)
 80001c2:	6013      	str	r3, [r2, #0]
			if(Time_red <= Time_green || Time_red <= Time_yellow){
 80001c4:	4b3e      	ldr	r3, [pc, #248]	; (80002c0 <SetMode+0x174>)
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	4b3e      	ldr	r3, [pc, #248]	; (80002c4 <SetMode+0x178>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	dd05      	ble.n	80001dc <SetMode+0x90>
 80001d0:	4b3b      	ldr	r3, [pc, #236]	; (80002c0 <SetMode+0x174>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b3c      	ldr	r3, [pc, #240]	; (80002c8 <SetMode+0x17c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	429a      	cmp	r2, r3
 80001da:	dc07      	bgt.n	80001ec <SetMode+0xa0>
				Time_red = Time_green + Time_yellow;
 80001dc:	4b39      	ldr	r3, [pc, #228]	; (80002c4 <SetMode+0x178>)
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b39      	ldr	r3, [pc, #228]	; (80002c8 <SetMode+0x17c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4413      	add	r3, r2
 80001e6:	4a36      	ldr	r2, [pc, #216]	; (80002c0 <SetMode+0x174>)
 80001e8:	6013      	str	r3, [r2, #0]
 80001ea:	e006      	b.n	80001fa <SetMode+0xae>
			}
			else{
				Time_green = Time_red - Time_yellow;
 80001ec:	4b34      	ldr	r3, [pc, #208]	; (80002c0 <SetMode+0x174>)
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4b35      	ldr	r3, [pc, #212]	; (80002c8 <SetMode+0x17c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	1ad3      	subs	r3, r2, r3
 80001f6:	4a33      	ldr	r2, [pc, #204]	; (80002c4 <SetMode+0x178>)
 80001f8:	6013      	str	r3, [r2, #0]
			}
			number_clock1 = Time_red;
 80001fa:	4b31      	ldr	r3, [pc, #196]	; (80002c0 <SetMode+0x174>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a33      	ldr	r2, [pc, #204]	; (80002cc <SetMode+0x180>)
 8000200:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 8000202:	4b30      	ldr	r3, [pc, #192]	; (80002c4 <SetMode+0x178>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a32      	ldr	r2, [pc, #200]	; (80002d0 <SetMode+0x184>)
 8000208:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 3){
 800020a:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <SetMode+0x15c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b03      	cmp	r3, #3
 8000210:	d120      	bne.n	8000254 <SetMode+0x108>
			Time_green = counterTimeSet;
 8000212:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <SetMode+0x170>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a2b      	ldr	r2, [pc, #172]	; (80002c4 <SetMode+0x178>)
 8000218:	6013      	str	r3, [r2, #0]
			if(Time_red <= Time_green){
 800021a:	4b29      	ldr	r3, [pc, #164]	; (80002c0 <SetMode+0x174>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b29      	ldr	r3, [pc, #164]	; (80002c4 <SetMode+0x178>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	429a      	cmp	r2, r3
 8000224:	dc07      	bgt.n	8000236 <SetMode+0xea>
				Time_red =  Time_yellow + Time_green;
 8000226:	4b28      	ldr	r3, [pc, #160]	; (80002c8 <SetMode+0x17c>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <SetMode+0x178>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	4a23      	ldr	r2, [pc, #140]	; (80002c0 <SetMode+0x174>)
 8000232:	6013      	str	r3, [r2, #0]
 8000234:	e006      	b.n	8000244 <SetMode+0xf8>
			}
			else{
				Time_yellow = Time_red - Time_green;
 8000236:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <SetMode+0x174>)
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	4b22      	ldr	r3, [pc, #136]	; (80002c4 <SetMode+0x178>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	1ad3      	subs	r3, r2, r3
 8000240:	4a21      	ldr	r2, [pc, #132]	; (80002c8 <SetMode+0x17c>)
 8000242:	6013      	str	r3, [r2, #0]
			}
			number_clock1 = Time_red;
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <SetMode+0x174>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a20      	ldr	r2, [pc, #128]	; (80002cc <SetMode+0x180>)
 800024a:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <SetMode+0x178>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a1f      	ldr	r2, [pc, #124]	; (80002d0 <SetMode+0x184>)
 8000252:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 4){
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <SetMode+0x15c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b04      	cmp	r3, #4
 800025a:	d120      	bne.n	800029e <SetMode+0x152>
			Time_yellow = counterTimeSet;
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <SetMode+0x170>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a19      	ldr	r2, [pc, #100]	; (80002c8 <SetMode+0x17c>)
 8000262:	6013      	str	r3, [r2, #0]
			if(Time_red <= Time_yellow){
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <SetMode+0x174>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <SetMode+0x17c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	429a      	cmp	r2, r3
 800026e:	dc07      	bgt.n	8000280 <SetMode+0x134>
				Time_red =  Time_yellow + Time_green;
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <SetMode+0x17c>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <SetMode+0x178>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4413      	add	r3, r2
 800027a:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <SetMode+0x174>)
 800027c:	6013      	str	r3, [r2, #0]
 800027e:	e006      	b.n	800028e <SetMode+0x142>
			}
			else{
				Time_green = Time_red - Time_yellow;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <SetMode+0x174>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <SetMode+0x17c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1ad3      	subs	r3, r2, r3
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <SetMode+0x178>)
 800028c:	6013      	str	r3, [r2, #0]
			}
			number_clock1 =  Time_red;
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <SetMode+0x174>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <SetMode+0x180>)
 8000294:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <SetMode+0x178>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <SetMode+0x184>)
 800029c:	6013      	str	r3, [r2, #0]
		}
	}
}
 800029e:	bf00      	nop
 80002a0:	3720      	adds	r7, #32
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200000c4 	.word	0x200000c4
 80002ac:	08004830 	.word	0x08004830
 80002b0:	08004840 	.word	0x08004840
 80002b4:	200000b0 	.word	0x200000b0
 80002b8:	200000b4 	.word	0x200000b4
 80002bc:	200000c8 	.word	0x200000c8
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000004 	.word	0x20000004
 80002c8:	20000008 	.word	0x20000008
 80002cc:	200000b8 	.word	0x200000b8
 80002d0:	200000bc 	.word	0x200000bc

080002d4 <ChangeModeX>:
void ChangeModeX(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <ChangeModeX+0x58>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d102      	bne.n	80002e6 <ChangeModeX+0x12>
		mode4_flag = 0;
 80002e0:	4b13      	ldr	r3, [pc, #76]	; (8000330 <ChangeModeX+0x5c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <ChangeModeX+0x58>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d104      	bne.n	80002f8 <ChangeModeX+0x24>
		statusx = MAN_RED;
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <ChangeModeX+0x60>)
 80002f0:	2205      	movs	r2, #5
 80002f2:	601a      	str	r2, [r3, #0]
		InitLED();
 80002f4:	f001 f82a 	bl	800134c <InitLED>
	}
	if(counterMode == 3){
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <ChangeModeX+0x58>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	d107      	bne.n	8000310 <ChangeModeX+0x3c>
		mode2_flag = 0;
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <ChangeModeX+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
		statusx = MAN_GREEN;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <ChangeModeX+0x60>)
 8000308:	2206      	movs	r2, #6
 800030a:	601a      	str	r2, [r3, #0]
		InitLED();
 800030c:	f001 f81e 	bl	800134c <InitLED>
	}
	if(counterMode == 4){
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <ChangeModeX+0x58>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b04      	cmp	r3, #4
 8000316:	d107      	bne.n	8000328 <ChangeModeX+0x54>
		mode3_flag = 0;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <ChangeModeX+0x68>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
		statusx = MAN_YELLOW;
 800031e:	4b05      	ldr	r3, [pc, #20]	; (8000334 <ChangeModeX+0x60>)
 8000320:	2207      	movs	r2, #7
 8000322:	601a      	str	r2, [r3, #0]
		InitLED();
 8000324:	f001 f812 	bl	800134c <InitLED>
	}
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000c4 	.word	0x200000c4
 8000330:	200000a8 	.word	0x200000a8
 8000334:	200000b0 	.word	0x200000b0
 8000338:	200000a0 	.word	0x200000a0
 800033c:	200000a4 	.word	0x200000a4

08000340 <ChangeModeY>:
void ChangeModeY(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 8000344:	4b14      	ldr	r3, [pc, #80]	; (8000398 <ChangeModeY+0x58>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d102      	bne.n	8000352 <ChangeModeY+0x12>
		mode4_flag = 0;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <ChangeModeY+0x5c>)
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <ChangeModeY+0x58>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d104      	bne.n	8000364 <ChangeModeY+0x24>
		statusy = MAN_RED;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <ChangeModeY+0x60>)
 800035c:	2205      	movs	r2, #5
 800035e:	601a      	str	r2, [r3, #0]
		InitLED();
 8000360:	f000 fff4 	bl	800134c <InitLED>
	}
	if(counterMode == 3){
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <ChangeModeY+0x58>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b03      	cmp	r3, #3
 800036a:	d107      	bne.n	800037c <ChangeModeY+0x3c>
		mode2_flag = 0;
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <ChangeModeY+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
		statusy = MAN_GREEN;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <ChangeModeY+0x60>)
 8000374:	2206      	movs	r2, #6
 8000376:	601a      	str	r2, [r3, #0]
		InitLED();
 8000378:	f000 ffe8 	bl	800134c <InitLED>
	}
	if(counterMode == 4){
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <ChangeModeY+0x58>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b04      	cmp	r3, #4
 8000382:	d107      	bne.n	8000394 <ChangeModeY+0x54>
		mode3_flag = 0;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <ChangeModeY+0x68>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
		statusy = MAN_YELLOW;
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <ChangeModeY+0x60>)
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
		InitLED();
 8000390:	f000 ffdc 	bl	800134c <InitLED>
	}
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000c4 	.word	0x200000c4
 800039c:	200000a8 	.word	0x200000a8
 80003a0:	200000b4 	.word	0x200000b4
 80003a4:	200000a0 	.word	0x200000a0
 80003a8:	200000a4 	.word	0x200000a4

080003ac <fsm_clock>:
void fsm_clock(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
    if (timer_flag[2] == 1) {
 80003b2:	4b20      	ldr	r3, [pc, #128]	; (8000434 <fsm_clock+0x88>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d10e      	bne.n	80003d8 <fsm_clock+0x2c>
        number_clock1--;
 80003ba:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <fsm_clock+0x8c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	3b01      	subs	r3, #1
 80003c0:	4a1d      	ldr	r2, [pc, #116]	; (8000438 <fsm_clock+0x8c>)
 80003c2:	6013      	str	r3, [r2, #0]
        number_clock2--;
 80003c4:	4b1d      	ldr	r3, [pc, #116]	; (800043c <fsm_clock+0x90>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3b01      	subs	r3, #1
 80003ca:	4a1c      	ldr	r2, [pc, #112]	; (800043c <fsm_clock+0x90>)
 80003cc:	6013      	str	r3, [r2, #0]
        setTimer(2, 1000);
 80003ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003d2:	2002      	movs	r0, #2
 80003d4:	f001 fc6c 	bl	8001cb0 <setTimer>
    }
    if (timer_flag[3] == 1) {
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <fsm_clock+0x88>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d124      	bne.n	800042a <fsm_clock+0x7e>
        char stry[16];
        char strx[16];
        sprintf(strx, "Road X: %d    ", number_clock1);
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <fsm_clock+0x8c>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	463b      	mov	r3, r7
 80003e6:	4916      	ldr	r1, [pc, #88]	; (8000440 <fsm_clock+0x94>)
 80003e8:	4618      	mov	r0, r3
 80003ea:	f003 fddb 	bl	8003fa4 <siprintf>
        sprintf(stry, "Road Y: %d    ", number_clock2);
 80003ee:	4b13      	ldr	r3, [pc, #76]	; (800043c <fsm_clock+0x90>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	4913      	ldr	r1, [pc, #76]	; (8000444 <fsm_clock+0x98>)
 80003f8:	4618      	mov	r0, r3
 80003fa:	f003 fdd3 	bl	8003fa4 <siprintf>
        lcd_goto_XY(1, 0);
 80003fe:	2100      	movs	r1, #0
 8000400:	2001      	movs	r0, #1
 8000402:	f000 fcae 	bl	8000d62 <lcd_goto_XY>
        lcd_send_string(strx);
 8000406:	463b      	mov	r3, r7
 8000408:	4618      	mov	r0, r3
 800040a:	f000 fc95 	bl	8000d38 <lcd_send_string>
        lcd_goto_XY(2, 0);
 800040e:	2100      	movs	r1, #0
 8000410:	2002      	movs	r0, #2
 8000412:	f000 fca6 	bl	8000d62 <lcd_goto_XY>
        lcd_send_string(stry);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fc8c 	bl	8000d38 <lcd_send_string>
        setTimer(3, 1000);
 8000420:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000424:	2003      	movs	r0, #3
 8000426:	f001 fc43 	bl	8001cb0 <setTimer>
    }
}
 800042a:	bf00      	nop
 800042c:	3720      	adds	r7, #32
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000210 	.word	0x20000210
 8000438:	200000b8 	.word	0x200000b8
 800043c:	200000bc 	.word	0x200000bc
 8000440:	0800484c 	.word	0x0800484c
 8000444:	0800485c 	.word	0x0800485c

08000448 <fsm_mode>:
void fsm_mode(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
    if (timer_flag[6] == 1) {
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <fsm_mode+0x60>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d123      	bne.n	800049e <fsm_mode+0x56>
        char stry[16];
        char strx[16];
        sprintf(stry, "Time:   %d ", counterTimeSet);
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <fsm_mode+0x64>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4914      	ldr	r1, [pc, #80]	; (80004b0 <fsm_mode+0x68>)
 8000460:	4618      	mov	r0, r3
 8000462:	f003 fd9f 	bl	8003fa4 <siprintf>
        sprintf(strx, "Mode:   %d ", counterMode);
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <fsm_mode+0x6c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	463b      	mov	r3, r7
 800046c:	4912      	ldr	r1, [pc, #72]	; (80004b8 <fsm_mode+0x70>)
 800046e:	4618      	mov	r0, r3
 8000470:	f003 fd98 	bl	8003fa4 <siprintf>
        lcd_goto_XY(1, 0);
 8000474:	2100      	movs	r1, #0
 8000476:	2001      	movs	r0, #1
 8000478:	f000 fc73 	bl	8000d62 <lcd_goto_XY>
        lcd_send_string(strx);
 800047c:	463b      	mov	r3, r7
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fc5a 	bl	8000d38 <lcd_send_string>
        lcd_goto_XY(2, 0);
 8000484:	2100      	movs	r1, #0
 8000486:	2002      	movs	r0, #2
 8000488:	f000 fc6b 	bl	8000d62 <lcd_goto_XY>
        lcd_send_string(stry);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fc51 	bl	8000d38 <lcd_send_string>
        setTimer(6, 100);
 8000496:	2164      	movs	r1, #100	; 0x64
 8000498:	2006      	movs	r0, #6
 800049a:	f001 fc09 	bl	8001cb0 <setTimer>
    }
}
 800049e:	bf00      	nop
 80004a0:	3720      	adds	r7, #32
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000210 	.word	0x20000210
 80004ac:	200000c8 	.word	0x200000c8
 80004b0:	0800486c 	.word	0x0800486c
 80004b4:	200000c4 	.word	0x200000c4
 80004b8:	08004878 	.word	0x08004878

080004bc <fsm_automatic_runx>:
void fsm_automatic_runx(){
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	switch(statusx){
 80004c0:	4b53      	ldr	r3, [pc, #332]	; (8000610 <fsm_automatic_runx+0x154>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	2b03      	cmp	r3, #3
 80004c8:	f200 8099 	bhi.w	80005fe <fsm_automatic_runx+0x142>
 80004cc:	a201      	add	r2, pc, #4	; (adr r2, 80004d4 <fsm_automatic_runx+0x18>)
 80004ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d2:	bf00      	nop
 80004d4:	080004e5 	.word	0x080004e5
 80004d8:	08000511 	.word	0x08000511
 80004dc:	0800057b 	.word	0x0800057b
 80004e0:	080005bf 	.word	0x080005bf
	case INIT:
		statusx = AUTO_RED;
 80004e4:	4b4a      	ldr	r3, [pc, #296]	; (8000610 <fsm_automatic_runx+0x154>)
 80004e6:	2202      	movs	r2, #2
 80004e8:	601a      	str	r2, [r3, #0]
		number_clock1 = Time_red;
 80004ea:	4b4a      	ldr	r3, [pc, #296]	; (8000614 <fsm_automatic_runx+0x158>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a4a      	ldr	r2, [pc, #296]	; (8000618 <fsm_automatic_runx+0x15c>)
 80004f0:	6013      	str	r3, [r2, #0]
		setTimer(0,number_clock1 * 1000);
 80004f2:	4b49      	ldr	r3, [pc, #292]	; (8000618 <fsm_automatic_runx+0x15c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004fa:	fb02 f303 	mul.w	r3, r2, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	2000      	movs	r0, #0
 8000502:	f001 fbd5 	bl	8001cb0 <setTimer>
		setTimer(2,100);
 8000506:	2164      	movs	r1, #100	; 0x64
 8000508:	2002      	movs	r0, #2
 800050a:	f001 fbd1 	bl	8001cb0 <setTimer>
		break;
 800050e:	e07d      	b.n	800060c <fsm_automatic_runx+0x150>
	case AUTO_RED:
		DisplayREDX();
 8000510:	f000 fe68 	bl	80011e4 <DisplayREDX>
		fsm_clock();
 8000514:	f7ff ff4a 	bl	80003ac <fsm_clock>
		SetMode();
 8000518:	f7ff fe18 	bl	800014c <SetMode>
		ChangeModeX();
 800051c:	f7ff feda 	bl	80002d4 <ChangeModeX>
		if(statusy == AUTO_YELLOW && number_clock2 <= 3){
 8000520:	4b3e      	ldr	r3, [pc, #248]	; (800061c <fsm_automatic_runx+0x160>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b04      	cmp	r3, #4
 8000526:	d10e      	bne.n	8000546 <fsm_automatic_runx+0x8a>
 8000528:	4b3d      	ldr	r3, [pc, #244]	; (8000620 <fsm_automatic_runx+0x164>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b03      	cmp	r3, #3
 800052e:	dc0a      	bgt.n	8000546 <fsm_automatic_runx+0x8a>
			if(timer_flag[4] == 1){
 8000530:	4b3c      	ldr	r3, [pc, #240]	; (8000624 <fsm_automatic_runx+0x168>)
 8000532:	691b      	ldr	r3, [r3, #16]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d108      	bne.n	800054a <fsm_automatic_runx+0x8e>
				WalkingX_Blinking();
 8000538:	f001 f858 	bl	80015ec <WalkingX_Blinking>
				setTimer(4, 250);
 800053c:	21fa      	movs	r1, #250	; 0xfa
 800053e:	2004      	movs	r0, #4
 8000540:	f001 fbb6 	bl	8001cb0 <setTimer>
			if(timer_flag[4] == 1){
 8000544:	e001      	b.n	800054a <fsm_automatic_runx+0x8e>
			}
		}
		else{
			WalkingX();
 8000546:	f000 ffeb 	bl	8001520 <WalkingX>
		}
		if(timer_flag[0] == 1){
 800054a:	4b36      	ldr	r3, [pc, #216]	; (8000624 <fsm_automatic_runx+0x168>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d157      	bne.n	8000602 <fsm_automatic_runx+0x146>
			InitLED();
 8000552:	f000 fefb 	bl	800134c <InitLED>
			statusx = AUTO_GREEN;
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <fsm_automatic_runx+0x154>)
 8000558:	2203      	movs	r2, #3
 800055a:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_green;
 800055c:	4b32      	ldr	r3, [pc, #200]	; (8000628 <fsm_automatic_runx+0x16c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a2d      	ldr	r2, [pc, #180]	; (8000618 <fsm_automatic_runx+0x15c>)
 8000562:	6013      	str	r3, [r2, #0]
			setTimer(0,number_clock1 * 1000);
 8000564:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <fsm_automatic_runx+0x15c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800056c:	fb02 f303 	mul.w	r3, r2, r3
 8000570:	4619      	mov	r1, r3
 8000572:	2000      	movs	r0, #0
 8000574:	f001 fb9c 	bl	8001cb0 <setTimer>
		}
		break;
 8000578:	e043      	b.n	8000602 <fsm_automatic_runx+0x146>
	case AUTO_GREEN:
		DisplayGREENX();
 800057a:	f000 fe6b 	bl	8001254 <DisplayGREENX>
		fsm_clock();
 800057e:	f7ff ff15 	bl	80003ac <fsm_clock>
		SetMode();
 8000582:	f7ff fde3 	bl	800014c <SetMode>
		StopX();
 8000586:	f000 ffdd 	bl	8001544 <StopX>
		ChangeModeX();
 800058a:	f7ff fea3 	bl	80002d4 <ChangeModeX>
		if(timer_flag[0] == 1){
 800058e:	4b25      	ldr	r3, [pc, #148]	; (8000624 <fsm_automatic_runx+0x168>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d137      	bne.n	8000606 <fsm_automatic_runx+0x14a>
			InitLED();
 8000596:	f000 fed9 	bl	800134c <InitLED>
			statusx = AUTO_YELLOW;
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <fsm_automatic_runx+0x154>)
 800059c:	2204      	movs	r2, #4
 800059e:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_yellow;
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <fsm_automatic_runx+0x170>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <fsm_automatic_runx+0x15c>)
 80005a6:	6013      	str	r3, [r2, #0]
			setTimer(0,number_clock1 * 1000);
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <fsm_automatic_runx+0x15c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	4619      	mov	r1, r3
 80005b6:	2000      	movs	r0, #0
 80005b8:	f001 fb7a 	bl	8001cb0 <setTimer>
		}
		break;
 80005bc:	e023      	b.n	8000606 <fsm_automatic_runx+0x14a>
	case AUTO_YELLOW:
		DisplayYELLOWX();
 80005be:	f000 fe2d 	bl	800121c <DisplayYELLOWX>
		fsm_clock();
 80005c2:	f7ff fef3 	bl	80003ac <fsm_clock>
		SetMode();
 80005c6:	f7ff fdc1 	bl	800014c <SetMode>
		ChangeModeX();
 80005ca:	f7ff fe83 	bl	80002d4 <ChangeModeX>
		if(timer_flag[0] == 1){
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <fsm_automatic_runx+0x168>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d119      	bne.n	800060a <fsm_automatic_runx+0x14e>
			InitLED();
 80005d6:	f000 feb9 	bl	800134c <InitLED>
			statusx = AUTO_RED;
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <fsm_automatic_runx+0x154>)
 80005dc:	2202      	movs	r2, #2
 80005de:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_red;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <fsm_automatic_runx+0x158>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <fsm_automatic_runx+0x15c>)
 80005e6:	6013      	str	r3, [r2, #0]
			setTimer(0,number_clock1 * 1000);
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <fsm_automatic_runx+0x15c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f0:	fb02 f303 	mul.w	r3, r2, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	2000      	movs	r0, #0
 80005f8:	f001 fb5a 	bl	8001cb0 <setTimer>
		}
		break;
 80005fc:	e005      	b.n	800060a <fsm_automatic_runx+0x14e>
	default:
		break;
 80005fe:	bf00      	nop
 8000600:	e004      	b.n	800060c <fsm_automatic_runx+0x150>
		break;
 8000602:	bf00      	nop
 8000604:	e002      	b.n	800060c <fsm_automatic_runx+0x150>
		break;
 8000606:	bf00      	nop
 8000608:	e000      	b.n	800060c <fsm_automatic_runx+0x150>
		break;
 800060a:	bf00      	nop
	}
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000b0 	.word	0x200000b0
 8000614:	20000000 	.word	0x20000000
 8000618:	200000b8 	.word	0x200000b8
 800061c:	200000b4 	.word	0x200000b4
 8000620:	200000bc 	.word	0x200000bc
 8000624:	20000210 	.word	0x20000210
 8000628:	20000004 	.word	0x20000004
 800062c:	20000008 	.word	0x20000008

08000630 <fsm_automatic_runy>:
void fsm_automatic_runy(){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	switch(statusy){
 8000634:	4b7d      	ldr	r3, [pc, #500]	; (800082c <fsm_automatic_runy+0x1fc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3b01      	subs	r3, #1
 800063a:	2b03      	cmp	r3, #3
 800063c:	f200 80ed 	bhi.w	800081a <fsm_automatic_runy+0x1ea>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <fsm_automatic_runy+0x18>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000659 	.word	0x08000659
 800064c:	08000689 	.word	0x08000689
 8000650:	0800072b 	.word	0x0800072b
 8000654:	080007a5 	.word	0x080007a5
	case INIT:
		DisplayGREENY();
 8000658:	f000 fe58 	bl	800130c <DisplayGREENY>
		statusy = AUTO_GREEN;
 800065c:	4b73      	ldr	r3, [pc, #460]	; (800082c <fsm_automatic_runy+0x1fc>)
 800065e:	2203      	movs	r2, #3
 8000660:	601a      	str	r2, [r3, #0]
		number_clock2 = Time_green;
 8000662:	4b73      	ldr	r3, [pc, #460]	; (8000830 <fsm_automatic_runy+0x200>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a73      	ldr	r2, [pc, #460]	; (8000834 <fsm_automatic_runy+0x204>)
 8000668:	6013      	str	r3, [r2, #0]
		setTimer(1,number_clock2 * 1000);
 800066a:	4b72      	ldr	r3, [pc, #456]	; (8000834 <fsm_automatic_runy+0x204>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	4619      	mov	r1, r3
 8000678:	2001      	movs	r0, #1
 800067a:	f001 fb19 	bl	8001cb0 <setTimer>
		setTimer(3,100);
 800067e:	2164      	movs	r1, #100	; 0x64
 8000680:	2003      	movs	r0, #3
 8000682:	f001 fb15 	bl	8001cb0 <setTimer>
		break;
 8000686:	e0cf      	b.n	8000828 <fsm_automatic_runy+0x1f8>
	case AUTO_RED:
		DisplayREDY();
 8000688:	f000 fe00 	bl	800128c <DisplayREDY>
		SetMode();
 800068c:	f7ff fd5e 	bl	800014c <SetMode>
		ChangeModeY();
 8000690:	f7ff fe56 	bl	8000340 <ChangeModeY>
		if(statusx == AUTO_YELLOW && number_clock1 <= 3){
 8000694:	4b68      	ldr	r3, [pc, #416]	; (8000838 <fsm_automatic_runy+0x208>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b04      	cmp	r3, #4
 800069a:	d10e      	bne.n	80006ba <fsm_automatic_runy+0x8a>
 800069c:	4b67      	ldr	r3, [pc, #412]	; (800083c <fsm_automatic_runy+0x20c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	dc0a      	bgt.n	80006ba <fsm_automatic_runy+0x8a>
			if(timer_flag[4] == 1){
 80006a4:	4b66      	ldr	r3, [pc, #408]	; (8000840 <fsm_automatic_runy+0x210>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d108      	bne.n	80006be <fsm_automatic_runy+0x8e>
				WalkingY_Blinnking();
 80006ac:	f000 ffbc 	bl	8001628 <WalkingY_Blinnking>
				setTimer(4, 250);
 80006b0:	21fa      	movs	r1, #250	; 0xfa
 80006b2:	2004      	movs	r0, #4
 80006b4:	f001 fafc 	bl	8001cb0 <setTimer>
			if(timer_flag[4] == 1){
 80006b8:	e001      	b.n	80006be <fsm_automatic_runy+0x8e>
			}
		}
		else{
			WalkingY();
 80006ba:	f000 ff55 	bl	8001568 <WalkingY>
		}
		if(mode2_flag == 1){
 80006be:	4b61      	ldr	r3, [pc, #388]	; (8000844 <fsm_automatic_runy+0x214>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d118      	bne.n	80006f8 <fsm_automatic_runy+0xc8>
			InitLED();
 80006c6:	f000 fe41 	bl	800134c <InitLED>
			statusy = MAN_RED;
 80006ca:	4b58      	ldr	r3, [pc, #352]	; (800082c <fsm_automatic_runy+0x1fc>)
 80006cc:	2205      	movs	r2, #5
 80006ce:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 80006d0:	4b5d      	ldr	r3, [pc, #372]	; (8000848 <fsm_automatic_runy+0x218>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d8:	fb02 f303 	mul.w	r3, r2, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 fae6 	bl	8001cb0 <setTimer>
			number_clock2 = timer_counter[1]/100;
 80006e4:	4b59      	ldr	r3, [pc, #356]	; (800084c <fsm_automatic_runy+0x21c>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	4a59      	ldr	r2, [pc, #356]	; (8000850 <fsm_automatic_runy+0x220>)
 80006ea:	fb82 1203 	smull	r1, r2, r2, r3
 80006ee:	1152      	asrs	r2, r2, #5
 80006f0:	17db      	asrs	r3, r3, #31
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	4a4f      	ldr	r2, [pc, #316]	; (8000834 <fsm_automatic_runy+0x204>)
 80006f6:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 80006f8:	4b51      	ldr	r3, [pc, #324]	; (8000840 <fsm_automatic_runy+0x210>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	f040 808e 	bne.w	800081e <fsm_automatic_runy+0x1ee>
			InitLED();
 8000702:	f000 fe23 	bl	800134c <InitLED>
			statusy = AUTO_GREEN;
 8000706:	4b49      	ldr	r3, [pc, #292]	; (800082c <fsm_automatic_runy+0x1fc>)
 8000708:	2203      	movs	r2, #3
 800070a:	601a      	str	r2, [r3, #0]
			number_clock2 = Time_green;
 800070c:	4b48      	ldr	r3, [pc, #288]	; (8000830 <fsm_automatic_runy+0x200>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a48      	ldr	r2, [pc, #288]	; (8000834 <fsm_automatic_runy+0x204>)
 8000712:	6013      	str	r3, [r2, #0]
			setTimer(1,number_clock2 * 1000);
 8000714:	4b47      	ldr	r3, [pc, #284]	; (8000834 <fsm_automatic_runy+0x204>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800071c:	fb02 f303 	mul.w	r3, r2, r3
 8000720:	4619      	mov	r1, r3
 8000722:	2001      	movs	r0, #1
 8000724:	f001 fac4 	bl	8001cb0 <setTimer>
		}
		break;
 8000728:	e079      	b.n	800081e <fsm_automatic_runy+0x1ee>
	case AUTO_GREEN:
		DisplayGREENY();
 800072a:	f000 fdef 	bl	800130c <DisplayGREENY>
		StopY();
 800072e:	f000 ff2b 	bl	8001588 <StopY>
		SetMode();
 8000732:	f7ff fd0b 	bl	800014c <SetMode>
		ChangeModeY();
 8000736:	f7ff fe03 	bl	8000340 <ChangeModeY>
		if(mode3_flag == 1){
 800073a:	4b46      	ldr	r3, [pc, #280]	; (8000854 <fsm_automatic_runy+0x224>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d118      	bne.n	8000774 <fsm_automatic_runy+0x144>
			InitLED();
 8000742:	f000 fe03 	bl	800134c <InitLED>
			statusy = MAN_GREEN;
 8000746:	4b39      	ldr	r3, [pc, #228]	; (800082c <fsm_automatic_runy+0x1fc>)
 8000748:	2206      	movs	r2, #6
 800074a:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 800074c:	4b3e      	ldr	r3, [pc, #248]	; (8000848 <fsm_automatic_runy+0x218>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000754:	fb02 f303 	mul.w	r3, r2, r3
 8000758:	4619      	mov	r1, r3
 800075a:	2001      	movs	r0, #1
 800075c:	f001 faa8 	bl	8001cb0 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000760:	4b3a      	ldr	r3, [pc, #232]	; (800084c <fsm_automatic_runy+0x21c>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <fsm_automatic_runy+0x220>)
 8000766:	fb82 1203 	smull	r1, r2, r2, r3
 800076a:	1152      	asrs	r2, r2, #5
 800076c:	17db      	asrs	r3, r3, #31
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	4a30      	ldr	r2, [pc, #192]	; (8000834 <fsm_automatic_runy+0x204>)
 8000772:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 8000774:	4b32      	ldr	r3, [pc, #200]	; (8000840 <fsm_automatic_runy+0x210>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d152      	bne.n	8000822 <fsm_automatic_runy+0x1f2>
			InitLED();
 800077c:	f000 fde6 	bl	800134c <InitLED>
			statusy = AUTO_YELLOW;
 8000780:	4b2a      	ldr	r3, [pc, #168]	; (800082c <fsm_automatic_runy+0x1fc>)
 8000782:	2204      	movs	r2, #4
 8000784:	601a      	str	r2, [r3, #0]
			number_clock2 = Time_yellow;
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <fsm_automatic_runy+0x228>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <fsm_automatic_runy+0x204>)
 800078c:	6013      	str	r3, [r2, #0]
			setTimer(1,number_clock2 * 1000);
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <fsm_automatic_runy+0x204>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000796:	fb02 f303 	mul.w	r3, r2, r3
 800079a:	4619      	mov	r1, r3
 800079c:	2001      	movs	r0, #1
 800079e:	f001 fa87 	bl	8001cb0 <setTimer>
		}
		break;
 80007a2:	e03e      	b.n	8000822 <fsm_automatic_runy+0x1f2>
	case AUTO_YELLOW:
		DisplayYELLOWY();
 80007a4:	f000 fd92 	bl	80012cc <DisplayYELLOWY>
		SetMode();
 80007a8:	f7ff fcd0 	bl	800014c <SetMode>
		ChangeModeY();
 80007ac:	f7ff fdc8 	bl	8000340 <ChangeModeY>
		if(mode4_flag == 1){
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <fsm_automatic_runy+0x22c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d118      	bne.n	80007ea <fsm_automatic_runy+0x1ba>
			InitLED();
 80007b8:	f000 fdc8 	bl	800134c <InitLED>
			statusy = MAN_YELLOW;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <fsm_automatic_runy+0x1fc>)
 80007be:	2207      	movs	r2, #7
 80007c0:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <fsm_automatic_runy+0x218>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	2001      	movs	r0, #1
 80007d2:	f001 fa6d 	bl	8001cb0 <setTimer>
			number_clock2 = timer_counter[1]/100;
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <fsm_automatic_runy+0x21c>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <fsm_automatic_runy+0x220>)
 80007dc:	fb82 1203 	smull	r1, r2, r2, r3
 80007e0:	1152      	asrs	r2, r2, #5
 80007e2:	17db      	asrs	r3, r3, #31
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <fsm_automatic_runy+0x204>)
 80007e8:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <fsm_automatic_runy+0x210>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d119      	bne.n	8000826 <fsm_automatic_runy+0x1f6>
			InitLED();
 80007f2:	f000 fdab 	bl	800134c <InitLED>
			statusy = AUTO_RED;
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <fsm_automatic_runy+0x1fc>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	601a      	str	r2, [r3, #0]
			number_clock2 = Time_red;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <fsm_automatic_runy+0x230>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <fsm_automatic_runy+0x204>)
 8000802:	6013      	str	r3, [r2, #0]
			setTimer(1,number_clock2 * 1000);
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <fsm_automatic_runy+0x204>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800080c:	fb02 f303 	mul.w	r3, r2, r3
 8000810:	4619      	mov	r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	f001 fa4c 	bl	8001cb0 <setTimer>
		}
		break;
 8000818:	e005      	b.n	8000826 <fsm_automatic_runy+0x1f6>
	default:
		break;
 800081a:	bf00      	nop
 800081c:	e004      	b.n	8000828 <fsm_automatic_runy+0x1f8>
		break;
 800081e:	bf00      	nop
 8000820:	e002      	b.n	8000828 <fsm_automatic_runy+0x1f8>
		break;
 8000822:	bf00      	nop
 8000824:	e000      	b.n	8000828 <fsm_automatic_runy+0x1f8>
		break;
 8000826:	bf00      	nop
	}
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000b4 	.word	0x200000b4
 8000830:	20000004 	.word	0x20000004
 8000834:	200000bc 	.word	0x200000bc
 8000838:	200000b0 	.word	0x200000b0
 800083c:	200000b8 	.word	0x200000b8
 8000840:	20000210 	.word	0x20000210
 8000844:	200000a0 	.word	0x200000a0
 8000848:	200000ac 	.word	0x200000ac
 800084c:	200001e8 	.word	0x200001e8
 8000850:	51eb851f 	.word	0x51eb851f
 8000854:	200000a4 	.word	0x200000a4
 8000858:	20000008 	.word	0x20000008
 800085c:	200000a8 	.word	0x200000a8
 8000860:	20000000 	.word	0x20000000

08000864 <fsm_manual_run1>:

#include "fsm_manual.h"
#include "led_display.h"
#include "input_processing.h"
#include "fsm_automatic.h"
void fsm_manual_run1(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	switch(statusx){
 8000868:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <fsm_manual_run1+0x100>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b07      	cmp	r3, #7
 800086e:	d038      	beq.n	80008e2 <fsm_manual_run1+0x7e>
 8000870:	2b07      	cmp	r3, #7
 8000872:	dc73      	bgt.n	800095c <fsm_manual_run1+0xf8>
 8000874:	2b05      	cmp	r3, #5
 8000876:	d002      	beq.n	800087e <fsm_manual_run1+0x1a>
 8000878:	2b06      	cmp	r3, #6
 800087a:	d019      	beq.n	80008b0 <fsm_manual_run1+0x4c>
		}
		fsm_mode();
		SetMode();
		break;
	default:
		break;
 800087c:	e06e      	b.n	800095c <fsm_manual_run1+0xf8>
		if(timer_flag[4] == 1){
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <fsm_manual_run1+0x104>)
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d106      	bne.n	8000894 <fsm_manual_run1+0x30>
			DisplayMAN_REDX();
 8000886:	f000 fd97 	bl	80013b8 <DisplayMAN_REDX>
			setTimer(4, 500);
 800088a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800088e:	2004      	movs	r0, #4
 8000890:	f001 fa0e 	bl	8001cb0 <setTimer>
		if(counterMode == 3){
 8000894:	4b35      	ldr	r3, [pc, #212]	; (800096c <fsm_manual_run1+0x108>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d104      	bne.n	80008a6 <fsm_manual_run1+0x42>
			statusx = MAN_GREEN;
 800089c:	4b31      	ldr	r3, [pc, #196]	; (8000964 <fsm_manual_run1+0x100>)
 800089e:	2206      	movs	r2, #6
 80008a0:	601a      	str	r2, [r3, #0]
			InitLED();
 80008a2:	f000 fd53 	bl	800134c <InitLED>
		fsm_mode();
 80008a6:	f7ff fdcf 	bl	8000448 <fsm_mode>
		SetMode();
 80008aa:	f7ff fc4f 	bl	800014c <SetMode>
		break;
 80008ae:	e056      	b.n	800095e <fsm_manual_run1+0xfa>
		if(timer_flag[4] == 1){
 80008b0:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <fsm_manual_run1+0x104>)
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d106      	bne.n	80008c6 <fsm_manual_run1+0x62>
			DisplayMAN_GREENX();
 80008b8:	f000 fdba 	bl	8001430 <DisplayMAN_GREENX>
			setTimer(4, 500);
 80008bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008c0:	2004      	movs	r0, #4
 80008c2:	f001 f9f5 	bl	8001cb0 <setTimer>
		if(counterMode == 4){
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <fsm_manual_run1+0x108>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d104      	bne.n	80008d8 <fsm_manual_run1+0x74>
			statusx = MAN_YELLOW;
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <fsm_manual_run1+0x100>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
			InitLED();
 80008d4:	f000 fd3a 	bl	800134c <InitLED>
		fsm_mode();
 80008d8:	f7ff fdb6 	bl	8000448 <fsm_mode>
		SetMode();
 80008dc:	f7ff fc36 	bl	800014c <SetMode>
		break;
 80008e0:	e03d      	b.n	800095e <fsm_manual_run1+0xfa>
		if(timer_flag[4] == 1){
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <fsm_manual_run1+0x104>)
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d106      	bne.n	80008f8 <fsm_manual_run1+0x94>
			DisplayMAN_YELLOWX();
 80008ea:	f000 fddd 	bl	80014a8 <DisplayMAN_YELLOWX>
			setTimer(4, 500);
 80008ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008f2:	2004      	movs	r0, #4
 80008f4:	f001 f9dc 	bl	8001cb0 <setTimer>
		if(counterMode == 1){
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <fsm_manual_run1+0x108>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d128      	bne.n	8000952 <fsm_manual_run1+0xee>
			statusx = AUTO_RED;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <fsm_manual_run1+0x100>)
 8000902:	2202      	movs	r2, #2
 8000904:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_red;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <fsm_manual_run1+0x10c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1a      	ldr	r2, [pc, #104]	; (8000974 <fsm_manual_run1+0x110>)
 800090c:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <fsm_manual_run1+0x114>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1a      	ldr	r2, [pc, #104]	; (800097c <fsm_manual_run1+0x118>)
 8000914:	6013      	str	r3, [r2, #0]
			setTimer(0,number_clock1 * 1000);
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <fsm_manual_run1+0x110>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800091e:	fb02 f303 	mul.w	r3, r2, r3
 8000922:	4619      	mov	r1, r3
 8000924:	2000      	movs	r0, #0
 8000926:	f001 f9c3 	bl	8001cb0 <setTimer>
			setTimer(1,number_clock2 * 1000);
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <fsm_manual_run1+0x118>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	4619      	mov	r1, r3
 8000938:	2001      	movs	r0, #1
 800093a:	f001 f9b9 	bl	8001cb0 <setTimer>
			setTimer(2,100);
 800093e:	2164      	movs	r1, #100	; 0x64
 8000940:	2002      	movs	r0, #2
 8000942:	f001 f9b5 	bl	8001cb0 <setTimer>
			setTimer(3,100);
 8000946:	2164      	movs	r1, #100	; 0x64
 8000948:	2003      	movs	r0, #3
 800094a:	f001 f9b1 	bl	8001cb0 <setTimer>
			InitLED();
 800094e:	f000 fcfd 	bl	800134c <InitLED>
		fsm_mode();
 8000952:	f7ff fd79 	bl	8000448 <fsm_mode>
		SetMode();
 8000956:	f7ff fbf9 	bl	800014c <SetMode>
		break;
 800095a:	e000      	b.n	800095e <fsm_manual_run1+0xfa>
		break;
 800095c:	bf00      	nop
	}
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000b0 	.word	0x200000b0
 8000968:	20000210 	.word	0x20000210
 800096c:	200000c4 	.word	0x200000c4
 8000970:	20000000 	.word	0x20000000
 8000974:	200000b8 	.word	0x200000b8
 8000978:	20000004 	.word	0x20000004
 800097c:	200000bc 	.word	0x200000bc

08000980 <fsm_manual_run2>:
void fsm_manual_run2(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	switch(statusy){
 8000984:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <fsm_manual_run2+0xb8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d034      	beq.n	80009f6 <fsm_manual_run2+0x76>
 800098c:	2b07      	cmp	r3, #7
 800098e:	dc49      	bgt.n	8000a24 <fsm_manual_run2+0xa4>
 8000990:	2b05      	cmp	r3, #5
 8000992:	d002      	beq.n	800099a <fsm_manual_run2+0x1a>
 8000994:	2b06      	cmp	r3, #6
 8000996:	d017      	beq.n	80009c8 <fsm_manual_run2+0x48>
			InitLED();
			statusy = AUTO_GREEN;
		}
		break;
	default:
		break;
 8000998:	e044      	b.n	8000a24 <fsm_manual_run2+0xa4>
		fsm_mode();
 800099a:	f7ff fd55 	bl	8000448 <fsm_mode>
		if(timer_flag[5] == 1){
 800099e:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <fsm_manual_run2+0xbc>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d106      	bne.n	80009b4 <fsm_manual_run2+0x34>
			DisplayMAN_REDY();
 80009a6:	f000 fd25 	bl	80013f4 <DisplayMAN_REDY>
			setTimer(5, 500);
 80009aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009ae:	2005      	movs	r0, #5
 80009b0:	f001 f97e 	bl	8001cb0 <setTimer>
		if(counterMode == 3){
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <fsm_manual_run2+0xc0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d135      	bne.n	8000a28 <fsm_manual_run2+0xa8>
			statusy = MAN_GREEN;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <fsm_manual_run2+0xb8>)
 80009be:	2206      	movs	r2, #6
 80009c0:	601a      	str	r2, [r3, #0]
			InitLED();
 80009c2:	f000 fcc3 	bl	800134c <InitLED>
		break;
 80009c6:	e02f      	b.n	8000a28 <fsm_manual_run2+0xa8>
		fsm_mode();
 80009c8:	f7ff fd3e 	bl	8000448 <fsm_mode>
		if(timer_flag[5] == 1){
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <fsm_manual_run2+0xbc>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d106      	bne.n	80009e2 <fsm_manual_run2+0x62>
			DisplayMAN_GREENY();
 80009d4:	f000 fd4a 	bl	800146c <DisplayMAN_GREENY>
			setTimer(5, 500);
 80009d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009dc:	2005      	movs	r0, #5
 80009de:	f001 f967 	bl	8001cb0 <setTimer>
		if(counterMode == 4){
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <fsm_manual_run2+0xc0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d120      	bne.n	8000a2c <fsm_manual_run2+0xac>
			statusy = MAN_YELLOW;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <fsm_manual_run2+0xb8>)
 80009ec:	2207      	movs	r2, #7
 80009ee:	601a      	str	r2, [r3, #0]
			InitLED();
 80009f0:	f000 fcac 	bl	800134c <InitLED>
		break;
 80009f4:	e01a      	b.n	8000a2c <fsm_manual_run2+0xac>
		fsm_mode();
 80009f6:	f7ff fd27 	bl	8000448 <fsm_mode>
		if(timer_flag[5] == 1){
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <fsm_manual_run2+0xbc>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d106      	bne.n	8000a10 <fsm_manual_run2+0x90>
			DisplayMAN_YELLOWY();
 8000a02:	f000 fd6f 	bl	80014e4 <DisplayMAN_YELLOWY>
			setTimer(5, 500);
 8000a06:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a0a:	2005      	movs	r0, #5
 8000a0c:	f001 f950 	bl	8001cb0 <setTimer>
		if(counterMode == 1){
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <fsm_manual_run2+0xc0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10b      	bne.n	8000a30 <fsm_manual_run2+0xb0>
			InitLED();
 8000a18:	f000 fc98 	bl	800134c <InitLED>
			statusy = AUTO_GREEN;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <fsm_manual_run2+0xb8>)
 8000a1e:	2203      	movs	r2, #3
 8000a20:	601a      	str	r2, [r3, #0]
		break;
 8000a22:	e005      	b.n	8000a30 <fsm_manual_run2+0xb0>
		break;
 8000a24:	bf00      	nop
 8000a26:	e004      	b.n	8000a32 <fsm_manual_run2+0xb2>
		break;
 8000a28:	bf00      	nop
 8000a2a:	e002      	b.n	8000a32 <fsm_manual_run2+0xb2>
		break;
 8000a2c:	bf00      	nop
 8000a2e:	e000      	b.n	8000a32 <fsm_manual_run2+0xb2>
		break;
 8000a30:	bf00      	nop
	}
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000b4 	.word	0x200000b4
 8000a3c:	20000210 	.word	0x20000210
 8000a40:	200000c4 	.word	0x200000c4

08000a44 <change_fsm>:
#include "global.h"
#include "led_display.h"
#include "input_processing.h"
#include "fsm_automatic.h"

void change_fsm(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	if(ProcessButton2()){
 8000a48:	f000 fabe 	bl	8000fc8 <ProcessButton2>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d02e      	beq.n	8000ab0 <change_fsm+0x6c>
		counterMode = 1;
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <change_fsm+0x70>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	601a      	str	r2, [r3, #0]
		statusx = AUTO_RED;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <change_fsm+0x74>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	601a      	str	r2, [r3, #0]
		statusy = AUTO_GREEN;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <change_fsm+0x78>)
 8000a60:	2203      	movs	r2, #3
 8000a62:	601a      	str	r2, [r3, #0]
		InitLED();
 8000a64:	f000 fc72 	bl	800134c <InitLED>
		number_clock1 = Time_red;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <change_fsm+0x7c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a15      	ldr	r2, [pc, #84]	; (8000ac4 <change_fsm+0x80>)
 8000a6e:	6013      	str	r3, [r2, #0]
		number_clock2 = Time_green;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <change_fsm+0x84>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a15      	ldr	r2, [pc, #84]	; (8000acc <change_fsm+0x88>)
 8000a76:	6013      	str	r3, [r2, #0]
		setTimer(0,number_clock1  * 1000);
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <change_fsm+0x80>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a80:	fb02 f303 	mul.w	r3, r2, r3
 8000a84:	4619      	mov	r1, r3
 8000a86:	2000      	movs	r0, #0
 8000a88:	f001 f912 	bl	8001cb0 <setTimer>
		setTimer(1,number_clock2 * 1000);
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <change_fsm+0x88>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a94:	fb02 f303 	mul.w	r3, r2, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f001 f908 	bl	8001cb0 <setTimer>
		setTimer(2,100);
 8000aa0:	2164      	movs	r1, #100	; 0x64
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f001 f904 	bl	8001cb0 <setTimer>
		setTimer(3,100);
 8000aa8:	2164      	movs	r1, #100	; 0x64
 8000aaa:	2003      	movs	r0, #3
 8000aac:	f001 f900 	bl	8001cb0 <setTimer>
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200000c4 	.word	0x200000c4
 8000ab8:	200000b0 	.word	0x200000b0
 8000abc:	200000b4 	.word	0x200000b4
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	200000b8 	.word	0x200000b8
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	200000bc 	.word	0x200000bc

08000ad0 <fsm_manual_run>:
void fsm_manual_run(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	switch(statusx){
 8000ad4:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <fsm_manual_run+0x13c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3b08      	subs	r3, #8
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	f200 808a 	bhi.w	8000bf4 <fsm_manual_run+0x124>
 8000ae0:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <fsm_manual_run+0x18>)
 8000ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae6:	bf00      	nop
 8000ae8:	08000af9 	.word	0x08000af9
 8000aec:	08000b2b 	.word	0x08000b2b
 8000af0:	08000b77 	.word	0x08000b77
 8000af4:	08000ba9 	.word	0x08000ba9
	case MANUAL_REDX_GREENY:
		//TODO
		DisplayREDX();
 8000af8:	f000 fb74 	bl	80011e4 <DisplayREDX>
		DisplayGREENY();
 8000afc:	f000 fc06 	bl	800130c <DisplayGREENY>
		change_fsm();
 8000b00:	f7ff ffa0 	bl	8000a44 <change_fsm>
		WalkingX();
 8000b04:	f000 fd0c 	bl	8001520 <WalkingX>
		StopY();
 8000b08:	f000 fd3e 	bl	8001588 <StopY>
		if (counterMode == 2){
 8000b0c:	4b40      	ldr	r3, [pc, #256]	; (8000c10 <fsm_manual_run+0x140>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d171      	bne.n	8000bf8 <fsm_manual_run+0x128>
			statusx = MANUAL_REDX_YELLOWY;
 8000b14:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <fsm_manual_run+0x13c>)
 8000b16:	2209      	movs	r2, #9
 8000b18:	601a      	str	r2, [r3, #0]
			InitLED();
 8000b1a:	f000 fc17 	bl	800134c <InitLED>
			setTimer(0, 5000);
 8000b1e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b22:	2000      	movs	r0, #0
 8000b24:	f001 f8c4 	bl	8001cb0 <setTimer>
		}
		break;
 8000b28:	e066      	b.n	8000bf8 <fsm_manual_run+0x128>
	case MANUAL_REDX_YELLOWY:
		DisplayREDX();
 8000b2a:	f000 fb5b 	bl	80011e4 <DisplayREDX>
		DisplayYELLOWY();
 8000b2e:	f000 fbcd 	bl	80012cc <DisplayYELLOWY>
		change_fsm();
 8000b32:	f7ff ff87 	bl	8000a44 <change_fsm>
		if(timer_flag[4] == 1){
 8000b36:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <fsm_manual_run+0x144>)
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d105      	bne.n	8000b4a <fsm_manual_run+0x7a>
			WalkingX_Blinking();
 8000b3e:	f000 fd55 	bl	80015ec <WalkingX_Blinking>
			setTimer(4, 250);
 8000b42:	21fa      	movs	r1, #250	; 0xfa
 8000b44:	2004      	movs	r0, #4
 8000b46:	f001 f8b3 	bl	8001cb0 <setTimer>
		}
		if (counterMode == 3){
 8000b4a:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <fsm_manual_run+0x140>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d104      	bne.n	8000b5c <fsm_manual_run+0x8c>
			statusx = MANUAL_GREENX_REDY;
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <fsm_manual_run+0x13c>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	601a      	str	r2, [r3, #0]
			InitLED();
 8000b58:	f000 fbf8 	bl	800134c <InitLED>
		}
		if(timer_counter[0] == 1){
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <fsm_manual_run+0x148>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d14b      	bne.n	8000bfc <fsm_manual_run+0x12c>
			statusx = MANUAL_GREENX_REDY;
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <fsm_manual_run+0x13c>)
 8000b66:	220a      	movs	r2, #10
 8000b68:	601a      	str	r2, [r3, #0]
			counterMode = 3;
 8000b6a:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <fsm_manual_run+0x140>)
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	601a      	str	r2, [r3, #0]
			InitLED();
 8000b70:	f000 fbec 	bl	800134c <InitLED>
		}
		break;
 8000b74:	e042      	b.n	8000bfc <fsm_manual_run+0x12c>
	case MANUAL_GREENX_REDY:
		DisplayGREENX();
 8000b76:	f000 fb6d 	bl	8001254 <DisplayGREENX>
		DisplayREDY();
 8000b7a:	f000 fb87 	bl	800128c <DisplayREDY>
		change_fsm();
 8000b7e:	f7ff ff61 	bl	8000a44 <change_fsm>
		StopX();
 8000b82:	f000 fcdf 	bl	8001544 <StopX>
		WalkingY();
 8000b86:	f000 fcef 	bl	8001568 <WalkingY>
		if (counterMode == 4){
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <fsm_manual_run+0x140>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d136      	bne.n	8000c00 <fsm_manual_run+0x130>
			statusx = MANUAL_YELLOWX_REDY;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <fsm_manual_run+0x13c>)
 8000b94:	220b      	movs	r2, #11
 8000b96:	601a      	str	r2, [r3, #0]
			InitLED();
 8000b98:	f000 fbd8 	bl	800134c <InitLED>
			setTimer(0, 5000);
 8000b9c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f001 f885 	bl	8001cb0 <setTimer>
		}
		break;
 8000ba6:	e02b      	b.n	8000c00 <fsm_manual_run+0x130>
	case MANUAL_YELLOWX_REDY:
		DisplayYELLOWX();
 8000ba8:	f000 fb38 	bl	800121c <DisplayYELLOWX>
		DisplayREDY();
 8000bac:	f000 fb6e 	bl	800128c <DisplayREDY>
		change_fsm();
 8000bb0:	f7ff ff48 	bl	8000a44 <change_fsm>
		if(timer_flag[4] == 1){
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <fsm_manual_run+0x144>)
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d105      	bne.n	8000bc8 <fsm_manual_run+0xf8>
			WalkingY_Blinnking();
 8000bbc:	f000 fd34 	bl	8001628 <WalkingY_Blinnking>
			setTimer(4, 250);
 8000bc0:	21fa      	movs	r1, #250	; 0xfa
 8000bc2:	2004      	movs	r0, #4
 8000bc4:	f001 f874 	bl	8001cb0 <setTimer>
		}
		if (counterMode == 1){
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <fsm_manual_run+0x140>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d104      	bne.n	8000bda <fsm_manual_run+0x10a>
			statusx = MANUAL_REDX_GREENY;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <fsm_manual_run+0x13c>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	601a      	str	r2, [r3, #0]
			InitLED();
 8000bd6:	f000 fbb9 	bl	800134c <InitLED>
		}
		if(timer_counter[0] == 1){
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <fsm_manual_run+0x148>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d110      	bne.n	8000c04 <fsm_manual_run+0x134>
			statusx = MANUAL_REDX_GREENY;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <fsm_manual_run+0x13c>)
 8000be4:	2208      	movs	r2, #8
 8000be6:	601a      	str	r2, [r3, #0]
			counterMode = 1;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <fsm_manual_run+0x140>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
			InitLED();
 8000bee:	f000 fbad 	bl	800134c <InitLED>
		}
		break;
 8000bf2:	e007      	b.n	8000c04 <fsm_manual_run+0x134>
	default:
		break;
 8000bf4:	bf00      	nop
 8000bf6:	e006      	b.n	8000c06 <fsm_manual_run+0x136>
		break;
 8000bf8:	bf00      	nop
 8000bfa:	e004      	b.n	8000c06 <fsm_manual_run+0x136>
		break;
 8000bfc:	bf00      	nop
 8000bfe:	e002      	b.n	8000c06 <fsm_manual_run+0x136>
		break;
 8000c00:	bf00      	nop
 8000c02:	e000      	b.n	8000c06 <fsm_manual_run+0x136>
		break;
 8000c04:	bf00      	nop
	}
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000b0 	.word	0x200000b0
 8000c10:	200000c4 	.word	0x200000c4
 8000c14:	20000210 	.word	0x20000210
 8000c18:	200001e8 	.word	0x200001e8

08000c1c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f023 030f 	bic.w	r3, r3, #15
 8000c2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	f043 030c 	orr.w	r3, r3, #12
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	f043 030c 	orr.w	r3, r3, #12
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c5c:	f107 0208 	add.w	r2, r7, #8
 8000c60:	2364      	movs	r3, #100	; 0x64
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2304      	movs	r3, #4
 8000c66:	2142      	movs	r1, #66	; 0x42
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <lcd_send_cmd+0x5c>)
 8000c6a:	f001 fd33 	bl	80026d4 <HAL_I2C_Master_Transmit>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000104 	.word	0x20000104

08000c7c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f023 030f 	bic.w	r3, r3, #15
 8000c8c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	f043 030d 	orr.w	r3, r3, #13
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	f043 0309 	orr.w	r3, r3, #9
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ca8:	7bbb      	ldrb	r3, [r7, #14]
 8000caa:	f043 030d 	orr.w	r3, r3, #13
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
 8000cb4:	f043 0309 	orr.w	r3, r3, #9
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cbc:	f107 0208 	add.w	r2, r7, #8
 8000cc0:	2364      	movs	r3, #100	; 0x64
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	2142      	movs	r1, #66	; 0x42
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <lcd_send_data+0x5c>)
 8000cca:	f001 fd03 	bl	80026d4 <HAL_I2C_Master_Transmit>
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000104 	.word	0x20000104

08000cdc <lcd_init>:

void lcd_init (void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000ce0:	2033      	movs	r0, #51	; 0x33
 8000ce2:	f7ff ff9b 	bl	8000c1c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000ce6:	2032      	movs	r0, #50	; 0x32
 8000ce8:	f7ff ff98 	bl	8000c1c <lcd_send_cmd>
	HAL_Delay(50);
 8000cec:	2032      	movs	r0, #50	; 0x32
 8000cee:	f001 f8c7 	bl	8001e80 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000cf2:	2028      	movs	r0, #40	; 0x28
 8000cf4:	f7ff ff92 	bl	8000c1c <lcd_send_cmd>
	HAL_Delay(50);
 8000cf8:	2032      	movs	r0, #50	; 0x32
 8000cfa:	f001 f8c1 	bl	8001e80 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff ff8c 	bl	8000c1c <lcd_send_cmd>
	HAL_Delay(50);
 8000d04:	2032      	movs	r0, #50	; 0x32
 8000d06:	f001 f8bb 	bl	8001e80 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000d0a:	2006      	movs	r0, #6
 8000d0c:	f7ff ff86 	bl	8000c1c <lcd_send_cmd>
	HAL_Delay(50);
 8000d10:	2032      	movs	r0, #50	; 0x32
 8000d12:	f001 f8b5 	bl	8001e80 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000d16:	200c      	movs	r0, #12
 8000d18:	f7ff ff80 	bl	8000c1c <lcd_send_cmd>
	HAL_Delay(50);
 8000d1c:	2032      	movs	r0, #50	; 0x32
 8000d1e:	f001 f8af 	bl	8001e80 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000d22:	2002      	movs	r0, #2
 8000d24:	f7ff ff7a 	bl	8000c1c <lcd_send_cmd>
	HAL_Delay(50);
 8000d28:	2032      	movs	r0, #50	; 0x32
 8000d2a:	f001 f8a9 	bl	8001e80 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000d2e:	2080      	movs	r0, #128	; 0x80
 8000d30:	f7ff ff74 	bl	8000c1c <lcd_send_cmd>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d40:	e006      	b.n	8000d50 <lcd_send_string+0x18>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff96 	bl	8000c7c <lcd_send_data>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1f4      	bne.n	8000d42 <lcd_send_string+0xa>
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d108      	bne.n	8000d84 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	337f      	adds	r3, #127	; 0x7f
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	e008      	b.n	8000d96 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	3340      	adds	r3, #64	; 0x40
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff3f 	bl	8000c1c <lcd_send_cmd>
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <fsm_for_input_processing1>:
enum ButtonState buttonState1 = BUTTON_RELEASED;
enum ButtonState buttonState2 = BUTTON_RELEASED;
enum ButtonState buttonState3 = BUTTON_RELEASED;
int counterMode = 0;
int counterTimeSet = 0;
void fsm_for_input_processing1(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	switch(buttonState1){
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <fsm_for_input_processing1+0xa0>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d038      	beq.n	8000e26 <fsm_for_input_processing1+0x7e>
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	dc45      	bgt.n	8000e44 <fsm_for_input_processing1+0x9c>
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <fsm_for_input_processing1+0x1a>
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d01e      	beq.n	8000dfe <fsm_for_input_processing1+0x56>
			if(!is_button_pressed(0)){
				buttonState1 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000dc0:	e040      	b.n	8000e44 <fsm_for_input_processing1+0x9c>
			if(is_button_pressed(0)){
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 f9da 	bl	800117c <is_button_pressed>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d035      	beq.n	8000e3a <fsm_for_input_processing1+0x92>
				buttonState1 = BUTTON_PRESSED ;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <fsm_for_input_processing1+0xa0>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
				if(ProcessButton1() == 1){
 8000dd4:	f000 f8da 	bl	8000f8c <ProcessButton1>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d12d      	bne.n	8000e3a <fsm_for_input_processing1+0x92>
					  counterMode++;
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <fsm_for_input_processing1+0xa4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <fsm_for_input_processing1+0xa4>)
 8000de6:	6013      	str	r3, [r2, #0]
					  counterTimeSet = 0;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <fsm_for_input_processing1+0xa8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
					  if(counterMode > 4){
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <fsm_for_input_processing1+0xa4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	dd21      	ble.n	8000e3a <fsm_for_input_processing1+0x92>
						  counterMode = 1;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <fsm_for_input_processing1+0xa4>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
		break;
 8000dfc:	e01d      	b.n	8000e3a <fsm_for_input_processing1+0x92>
			if(!is_button_pressed(0)){
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f9bc 	bl	800117c <is_button_pressed>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d103      	bne.n	8000e12 <fsm_for_input_processing1+0x6a>
				buttonState1 = BUTTON_RELEASED;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <fsm_for_input_processing1+0xa0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
		break;
 8000e10:	e015      	b.n	8000e3e <fsm_for_input_processing1+0x96>
				if(is_button_pressed_1s(0) == 1){
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f9cc 	bl	80011b0 <is_button_pressed_1s>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d10f      	bne.n	8000e3e <fsm_for_input_processing1+0x96>
					buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <fsm_for_input_processing1+0xa0>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	701a      	strb	r2, [r3, #0]
		break;
 8000e24:	e00b      	b.n	8000e3e <fsm_for_input_processing1+0x96>
			if(!is_button_pressed(0)){
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f9a8 	bl	800117c <is_button_pressed>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d107      	bne.n	8000e42 <fsm_for_input_processing1+0x9a>
				buttonState1 = BUTTON_RELEASED;
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <fsm_for_input_processing1+0xa0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
		break;
 8000e38:	e003      	b.n	8000e42 <fsm_for_input_processing1+0x9a>
		break;
 8000e3a:	bf00      	nop
 8000e3c:	e002      	b.n	8000e44 <fsm_for_input_processing1+0x9c>
		break;
 8000e3e:	bf00      	nop
 8000e40:	e000      	b.n	8000e44 <fsm_for_input_processing1+0x9c>
		break;
 8000e42:	bf00      	nop
	}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200000c0 	.word	0x200000c0
 8000e4c:	200000c4 	.word	0x200000c4
 8000e50:	200000c8 	.word	0x200000c8

08000e54 <fsm_for_input_processing2>:
void fsm_for_input_processing2(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	switch(buttonState2){
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <fsm_for_input_processing2+0x9c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d035      	beq.n	8000ecc <fsm_for_input_processing2+0x78>
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	dc42      	bgt.n	8000eea <fsm_for_input_processing2+0x96>
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <fsm_for_input_processing2+0x1a>
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d01b      	beq.n	8000ea4 <fsm_for_input_processing2+0x50>
			if(!is_button_pressed(1)){
				buttonState2 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000e6c:	e03d      	b.n	8000eea <fsm_for_input_processing2+0x96>
			if(is_button_pressed(1)){
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f000 f984 	bl	800117c <is_button_pressed>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d032      	beq.n	8000ee0 <fsm_for_input_processing2+0x8c>
				buttonState2 = BUTTON_PRESSED ;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <fsm_for_input_processing2+0x9c>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
				if(ProcessButton2() == 1){
 8000e80:	f000 f8a2 	bl	8000fc8 <ProcessButton2>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d12a      	bne.n	8000ee0 <fsm_for_input_processing2+0x8c>
					  counterTimeSet++;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <fsm_for_input_processing2+0xa0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a18      	ldr	r2, [pc, #96]	; (8000ef4 <fsm_for_input_processing2+0xa0>)
 8000e92:	6013      	str	r3, [r2, #0]
					  if(counterTimeSet > 99){
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <fsm_for_input_processing2+0xa0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b63      	cmp	r3, #99	; 0x63
 8000e9a:	dd21      	ble.n	8000ee0 <fsm_for_input_processing2+0x8c>
						  counterTimeSet = 0;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <fsm_for_input_processing2+0xa0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
		break;
 8000ea2:	e01d      	b.n	8000ee0 <fsm_for_input_processing2+0x8c>
			if(!is_button_pressed(1)){
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f000 f969 	bl	800117c <is_button_pressed>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d103      	bne.n	8000eb8 <fsm_for_input_processing2+0x64>
				buttonState2 = BUTTON_RELEASED;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <fsm_for_input_processing2+0x9c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
		break;
 8000eb6:	e015      	b.n	8000ee4 <fsm_for_input_processing2+0x90>
				if(is_button_pressed_1s(1) == 1){
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 f979 	bl	80011b0 <is_button_pressed_1s>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10f      	bne.n	8000ee4 <fsm_for_input_processing2+0x90>
					buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <fsm_for_input_processing2+0x9c>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	701a      	strb	r2, [r3, #0]
		break;
 8000eca:	e00b      	b.n	8000ee4 <fsm_for_input_processing2+0x90>
			if(!is_button_pressed(1)){
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 f955 	bl	800117c <is_button_pressed>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d107      	bne.n	8000ee8 <fsm_for_input_processing2+0x94>
				buttonState2 = BUTTON_RELEASED;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <fsm_for_input_processing2+0x9c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
		break;
 8000ede:	e003      	b.n	8000ee8 <fsm_for_input_processing2+0x94>
		break;
 8000ee0:	bf00      	nop
 8000ee2:	e002      	b.n	8000eea <fsm_for_input_processing2+0x96>
		break;
 8000ee4:	bf00      	nop
 8000ee6:	e000      	b.n	8000eea <fsm_for_input_processing2+0x96>
		break;
 8000ee8:	bf00      	nop
	}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200000c1 	.word	0x200000c1
 8000ef4:	200000c8 	.word	0x200000c8

08000ef8 <fsm_for_input_processing3>:
void fsm_for_input_processing3(void){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	switch(buttonState3){
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <fsm_for_input_processing3+0x78>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d024      	beq.n	8000f4e <fsm_for_input_processing3+0x56>
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	dc31      	bgt.n	8000f6c <fsm_for_input_processing3+0x74>
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <fsm_for_input_processing3+0x1a>
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d00a      	beq.n	8000f26 <fsm_for_input_processing3+0x2e>
			if(!is_button_pressed(2)){
				buttonState3 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000f10:	e02c      	b.n	8000f6c <fsm_for_input_processing3+0x74>
			if(is_button_pressed(2)){
 8000f12:	2002      	movs	r0, #2
 8000f14:	f000 f932 	bl	800117c <is_button_pressed>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d021      	beq.n	8000f62 <fsm_for_input_processing3+0x6a>
				buttonState3 = BUTTON_PRESSED ;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <fsm_for_input_processing3+0x78>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
		break;
 8000f24:	e01d      	b.n	8000f62 <fsm_for_input_processing3+0x6a>
			if(!is_button_pressed(2)){
 8000f26:	2002      	movs	r0, #2
 8000f28:	f000 f928 	bl	800117c <is_button_pressed>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d103      	bne.n	8000f3a <fsm_for_input_processing3+0x42>
				buttonState3 = BUTTON_RELEASED;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <fsm_for_input_processing3+0x78>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
		break;
 8000f38:	e015      	b.n	8000f66 <fsm_for_input_processing3+0x6e>
				if(is_button_pressed_1s(2) == 1){
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f000 f938 	bl	80011b0 <is_button_pressed_1s>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d10f      	bne.n	8000f66 <fsm_for_input_processing3+0x6e>
					buttonState3 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <fsm_for_input_processing3+0x78>)
 8000f48:	2202      	movs	r2, #2
 8000f4a:	701a      	strb	r2, [r3, #0]
		break;
 8000f4c:	e00b      	b.n	8000f66 <fsm_for_input_processing3+0x6e>
			if(!is_button_pressed(2)){
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f000 f914 	bl	800117c <is_button_pressed>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d107      	bne.n	8000f6a <fsm_for_input_processing3+0x72>
				buttonState3 = BUTTON_RELEASED;
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <fsm_for_input_processing3+0x78>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
		break;
 8000f60:	e003      	b.n	8000f6a <fsm_for_input_processing3+0x72>
		break;
 8000f62:	bf00      	nop
 8000f64:	e002      	b.n	8000f6c <fsm_for_input_processing3+0x74>
		break;
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <fsm_for_input_processing3+0x74>
		break;
 8000f6a:	bf00      	nop
	}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000c2 	.word	0x200000c2

08000f74 <Button1Run>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
void Button1Run(void){
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
 	button1_flag = 1;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <Button1Run+0x14>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
 }
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200000e4 	.word	0x200000e4

08000f8c <ProcessButton1>:
int ProcessButton1(void){
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	 if(button1_flag == 1){
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <ProcessButton1+0x20>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d104      	bne.n	8000fa2 <ProcessButton1+0x16>
		 button1_flag = 0;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <ProcessButton1+0x20>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
		 return 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <ProcessButton1+0x18>
	 }
	 return 0;
 8000fa2:	2300      	movs	r3, #0
 }
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	200000e4 	.word	0x200000e4

08000fb0 <Button2Run>:
void Button2Run(void){
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
 	button2_flag = 1;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <Button2Run+0x14>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
 }
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200000e8 	.word	0x200000e8

08000fc8 <ProcessButton2>:
int ProcessButton2(void){
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
	 if(button2_flag == 1){
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <ProcessButton2+0x20>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d104      	bne.n	8000fde <ProcessButton2+0x16>
		 button2_flag = 0;
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <ProcessButton2+0x20>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
		 return 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <ProcessButton2+0x18>
	 }
	 return 0;
 8000fde:	2300      	movs	r3, #0
 }
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	200000e8 	.word	0x200000e8

08000fec <Button3Run>:
void Button3Run(void){
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
 	button3_flag = 1;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <Button3Run+0x14>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
 }
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200000ec 	.word	0x200000ec

08001004 <ProcessButton3>:
int ProcessButton3(void){
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	 if(button3_flag == 1){
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <ProcessButton3+0x20>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d104      	bne.n	800101a <ProcessButton3+0x16>
		 button3_flag = 0;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <ProcessButton3+0x20>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
		 return 1;
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <ProcessButton3+0x18>
	 }
	 return 0;
 800101a:	2300      	movs	r3, #0
 }
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	200000ec 	.word	0x200000ec

08001028 <button_reading>:
		void button_reading(void){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e08c      	b.n	800114e <button_reading+0x126>
				 debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4949      	ldr	r1, [pc, #292]	; (8001160 <button_reading+0x138>)
 800103a:	5c89      	ldrb	r1, [r1, r2]
 800103c:	4a49      	ldr	r2, [pc, #292]	; (8001164 <button_reading+0x13c>)
 800103e:	54d1      	strb	r1, [r2, r3]
				 if(i == 0){
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d108      	bne.n	8001058 <button_reading+0x30>
				 debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 8001046:	2101      	movs	r1, #1
 8001048:	4847      	ldr	r0, [pc, #284]	; (8001168 <button_reading+0x140>)
 800104a:	f001 f9cf 	bl	80023ec <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <button_reading+0x138>)
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e017      	b.n	8001088 <button_reading+0x60>
				 }
				 else if(i == 1){
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d108      	bne.n	8001070 <button_reading+0x48>
				 debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 800105e:	2102      	movs	r1, #2
 8001060:	4841      	ldr	r0, [pc, #260]	; (8001168 <button_reading+0x140>)
 8001062:	f001 f9c3 	bl	80023ec <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <button_reading+0x138>)
 800106c:	705a      	strb	r2, [r3, #1]
 800106e:	e00b      	b.n	8001088 <button_reading+0x60>
				 }
				 else if(i == 2){
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d108      	bne.n	8001088 <button_reading+0x60>
				 debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port,Button3_Pin);
 8001076:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107a:	483c      	ldr	r0, [pc, #240]	; (800116c <button_reading+0x144>)
 800107c:	f001 f9b6 	bl	80023ec <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b36      	ldr	r3, [pc, #216]	; (8001160 <button_reading+0x138>)
 8001086:	709a      	strb	r2, [r3, #2]
				 }
				 if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a35      	ldr	r2, [pc, #212]	; (8001160 <button_reading+0x138>)
 800108c:	5cd2      	ldrb	r2, [r2, r3]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4934      	ldr	r1, [pc, #208]	; (8001164 <button_reading+0x13c>)
 8001092:	5ccb      	ldrb	r3, [r1, r3]
 8001094:	429a      	cmp	r2, r3
 8001096:	d14e      	bne.n	8001136 <button_reading+0x10e>
					 buttonBuffer[i] = debounceButtonBuffer1[i];
 8001098:	79fa      	ldrb	r2, [r7, #7]
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4930      	ldr	r1, [pc, #192]	; (8001160 <button_reading+0x138>)
 800109e:	5c89      	ldrb	r1, [r1, r2]
 80010a0:	4a33      	ldr	r2, [pc, #204]	; (8001170 <button_reading+0x148>)
 80010a2:	54d1      	strb	r1, [r2, r3]
					 if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4a32      	ldr	r2, [pc, #200]	; (8001170 <button_reading+0x148>)
 80010a8:	5cd3      	ldrb	r3, [r2, r3]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d14c      	bne.n	8001148 <button_reading+0x120>
						 if(i == 0){
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <button_reading+0x92>
							 Button1Run();
 80010b4:	f7ff ff5e 	bl	8000f74 <Button1Run>
 80010b8:	e00a      	b.n	80010d0 <button_reading+0xa8>
						 }
						 else if(i == 1){
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d102      	bne.n	80010c6 <button_reading+0x9e>
							 Button2Run();
 80010c0:	f7ff ff76 	bl	8000fb0 <Button2Run>
 80010c4:	e004      	b.n	80010d0 <button_reading+0xa8>
						 }
						 else if(i == 2){
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d101      	bne.n	80010d0 <button_reading+0xa8>
							 Button3Run();
 80010cc:	f7ff ff8e 	bl	8000fec <Button3Run>
						 }
						 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING && flagForButtonPress1s[i] == 0){
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4a28      	ldr	r2, [pc, #160]	; (8001174 <button_reading+0x14c>)
 80010d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d8:	2b63      	cmp	r3, #99	; 0x63
 80010da:	d80e      	bhi.n	80010fa <button_reading+0xd2>
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4a26      	ldr	r2, [pc, #152]	; (8001178 <button_reading+0x150>)
 80010e0:	5cd3      	ldrb	r3, [r2, r3]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <button_reading+0xd2>
							 counterForButtonPress1s[i]++;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4a22      	ldr	r2, [pc, #136]	; (8001174 <button_reading+0x14c>)
 80010ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010ee:	3201      	adds	r2, #1
 80010f0:	b291      	uxth	r1, r2
 80010f2:	4a20      	ldr	r2, [pc, #128]	; (8001174 <button_reading+0x14c>)
 80010f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010f8:	e026      	b.n	8001148 <button_reading+0x120>
						 }
						 else{
							 flagForButtonPress1s[i] = 1;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <button_reading+0x150>)
 80010fe:	2101      	movs	r1, #1
 8001100:	54d1      	strb	r1, [r2, r3]

							 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING2){
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <button_reading+0x14c>)
 8001106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110a:	2b6d      	cmp	r3, #109	; 0x6d
 800110c:	d809      	bhi.n	8001122 <button_reading+0xfa>
								counterForButtonPress1s[i]++;
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4a18      	ldr	r2, [pc, #96]	; (8001174 <button_reading+0x14c>)
 8001112:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001116:	3201      	adds	r2, #1
 8001118:	b291      	uxth	r1, r2
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <button_reading+0x14c>)
 800111c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001120:	e012      	b.n	8001148 <button_reading+0x120>
							 }
							 else{
								buttonBuffer[i] = BUTTON_IS_RELEASED;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <button_reading+0x148>)
 8001126:	2101      	movs	r1, #1
 8001128:	54d1      	strb	r1, [r2, r3]
								counterForButtonPress1s[i] = 100;
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4a11      	ldr	r2, [pc, #68]	; (8001174 <button_reading+0x14c>)
 800112e:	2164      	movs	r1, #100	; 0x64
 8001130:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001134:	e008      	b.n	8001148 <button_reading+0x120>

						 }
					 }
				 }
					 else{
						 counterForButtonPress1s[i] = 0;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <button_reading+0x14c>)
 800113a:	2100      	movs	r1, #0
 800113c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						 flagForButtonPress1s[i] = 0;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <button_reading+0x150>)
 8001144:	2100      	movs	r1, #0
 8001146:	54d1      	strb	r1, [r2, r3]
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	3301      	adds	r3, #1
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b02      	cmp	r3, #2
 8001152:	f67f af6f 	bls.w	8001034 <button_reading+0xc>
					 }
				 }
			}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200000d0 	.word	0x200000d0
 8001164:	200000d4 	.word	0x200000d4
 8001168:	40010800 	.word	0x40010800
 800116c:	40011000 	.word	0x40011000
 8001170:	200000cc 	.word	0x200000cc
 8001174:	200000dc 	.word	0x200000dc
 8001178:	200000d8 	.word	0x200000d8

0800117c <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <is_button_pressed+0x14>
 800118c:	2300      	movs	r3, #0
 800118e:	e007      	b.n	80011a0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4a06      	ldr	r2, [pc, #24]	; (80011ac <is_button_pressed+0x30>)
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf0c      	ite	eq
 800119a:	2301      	moveq	r3, #1
 800119c:	2300      	movne	r3, #0
 800119e:	b2db      	uxtb	r3, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200000cc 	.word	0x200000cc

080011b0 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <is_button_pressed_1s+0x14>
 80011c0:	23ff      	movs	r3, #255	; 0xff
 80011c2:	e007      	b.n	80011d4 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <is_button_pressed_1s+0x30>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	bf0c      	ite	eq
 80011ce:	2301      	moveq	r3, #1
 80011d0:	2300      	movne	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	200000d8 	.word	0x200000d8

080011e4 <DisplayREDX>:
 */
#include "main.h"
#include "global.h"
int statusledx = 0;
int statusledy = 0;
void DisplayREDX(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2108      	movs	r1, #8
 80011ec:	480a      	ldr	r0, [pc, #40]	; (8001218 <DisplayREDX+0x34>)
 80011ee:	f001 f914 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2120      	movs	r1, #32
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <DisplayREDX+0x34>)
 80011f8:	f001 f90f 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2110      	movs	r1, #16
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <DisplayREDX+0x34>)
 8001202:	f001 f90a 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <DisplayREDX+0x34>)
 800120e:	f001 f904 	bl	800241a <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40010c00 	.word	0x40010c00

0800121c <DisplayYELLOWX>:
void DisplayYELLOWX(void){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2108      	movs	r1, #8
 8001224:	480a      	ldr	r0, [pc, #40]	; (8001250 <DisplayYELLOWX+0x34>)
 8001226:	f001 f8f8 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, SET);
 800122a:	2201      	movs	r2, #1
 800122c:	2120      	movs	r1, #32
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <DisplayYELLOWX+0x34>)
 8001230:	f001 f8f3 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2110      	movs	r1, #16
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <DisplayYELLOWX+0x34>)
 800123a:	f001 f8ee 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, SET);
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <DisplayYELLOWX+0x34>)
 8001246:	f001 f8e8 	bl	800241a <HAL_GPIO_WritePin>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40010c00 	.word	0x40010c00

08001254 <DisplayGREENX>:
void DisplayGREENX(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2108      	movs	r1, #8
 800125c:	480a      	ldr	r0, [pc, #40]	; (8001288 <DisplayGREENX+0x34>)
 800125e:	f001 f8dc 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2120      	movs	r1, #32
 8001266:	4808      	ldr	r0, [pc, #32]	; (8001288 <DisplayGREENX+0x34>)
 8001268:	f001 f8d7 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2110      	movs	r1, #16
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <DisplayGREENX+0x34>)
 8001272:	f001 f8d2 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DisplayGREENX+0x34>)
 800127e:	f001 f8cc 	bl	800241a <HAL_GPIO_WritePin>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40010c00 	.word	0x40010c00

0800128c <DisplayREDY>:
void DisplayREDY(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001296:	480a      	ldr	r0, [pc, #40]	; (80012c0 <DisplayREDY+0x34>)
 8001298:	f001 f8bf 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, SET);
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <DisplayREDY+0x34>)
 80012a4:	f001 f8b9 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <DisplayREDY+0x38>)
 80012ae:	f001 f8b4 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2140      	movs	r1, #64	; 0x40
 80012b6:	4804      	ldr	r0, [pc, #16]	; (80012c8 <DisplayREDY+0x3c>)
 80012b8:	f001 f8af 	bl	800241a <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40010800 	.word	0x40010800
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40010c00 	.word	0x40010c00

080012cc <DisplayYELLOWY>:
void DisplayYELLOWY(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d6:	480a      	ldr	r0, [pc, #40]	; (8001300 <DisplayYELLOWY+0x34>)
 80012d8:	f001 f89f 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <DisplayYELLOWY+0x34>)
 80012e4:	f001 f899 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <DisplayYELLOWY+0x38>)
 80012ee:	f001 f894 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2140      	movs	r1, #64	; 0x40
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <DisplayYELLOWY+0x3c>)
 80012f8:	f001 f88f 	bl	800241a <HAL_GPIO_WritePin>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40010800 	.word	0x40010800
 8001304:	40011000 	.word	0x40011000
 8001308:	40010c00 	.word	0x40010c00

0800130c <DisplayGREENY>:
void DisplayGREENY(void){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001316:	480a      	ldr	r0, [pc, #40]	; (8001340 <DisplayGREENY+0x34>)
 8001318:	f001 f87f 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <DisplayGREENY+0x34>)
 8001324:	f001 f879 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <DisplayGREENY+0x38>)
 800132e:	f001 f874 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <DisplayGREENY+0x3c>)
 8001338:	f001 f86f 	bl	800241a <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40010800 	.word	0x40010800
 8001344:	40011000 	.word	0x40011000
 8001348:	40010c00 	.word	0x40010c00

0800134c <InitLED>:
void InitLED(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2108      	movs	r1, #8
 8001354:	4815      	ldr	r0, [pc, #84]	; (80013ac <InitLED+0x60>)
 8001356:	f001 f860 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2120      	movs	r1, #32
 800135e:	4813      	ldr	r0, [pc, #76]	; (80013ac <InitLED+0x60>)
 8001360:	f001 f85b 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2110      	movs	r1, #16
 8001368:	4810      	ldr	r0, [pc, #64]	; (80013ac <InitLED+0x60>)
 800136a:	f001 f856 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <InitLED+0x60>)
 8001376:	f001 f850 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <InitLED+0x64>)
 8001382:	f001 f84a 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <InitLED+0x64>)
 800138e:	f001 f844 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <InitLED+0x68>)
 8001398:	f001 f83f 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <InitLED+0x60>)
 80013a2:	f001 f83a 	bl	800241a <HAL_GPIO_WritePin>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	40010800 	.word	0x40010800
 80013b4:	40011000 	.word	0x40011000

080013b8 <DisplayMAN_REDX>:
void DisplayMAN_REDX(void){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	switch(statusledx){
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <DisplayMAN_REDX+0x38>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <DisplayMAN_REDX+0x12>
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d003      	beq.n	80013d0 <DisplayMAN_REDX+0x18>
 80013c8:	e005      	b.n	80013d6 <DisplayMAN_REDX+0x1e>
	case 0:
		DisplayREDX();
 80013ca:	f7ff ff0b 	bl	80011e4 <DisplayREDX>
		break;
 80013ce:	e002      	b.n	80013d6 <DisplayMAN_REDX+0x1e>
	case 1:
		InitLED();
 80013d0:	f7ff ffbc 	bl	800134c <InitLED>
		break;
 80013d4:	bf00      	nop
	}
	if(statusledx == 0){
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <DisplayMAN_REDX+0x38>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d103      	bne.n	80013e6 <DisplayMAN_REDX+0x2e>
		statusledx = 1;
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <DisplayMAN_REDX+0x38>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledx = 0;
	}
}
 80013e4:	e002      	b.n	80013ec <DisplayMAN_REDX+0x34>
		statusledx = 0;
 80013e6:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <DisplayMAN_REDX+0x38>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200000f0 	.word	0x200000f0

080013f4 <DisplayMAN_REDY>:
void DisplayMAN_REDY(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	switch(statusledy){
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <DisplayMAN_REDY+0x38>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <DisplayMAN_REDY+0x12>
 8001400:	2b01      	cmp	r3, #1
 8001402:	d003      	beq.n	800140c <DisplayMAN_REDY+0x18>
 8001404:	e005      	b.n	8001412 <DisplayMAN_REDY+0x1e>
	case 0:
		DisplayREDY();
 8001406:	f7ff ff41 	bl	800128c <DisplayREDY>
		break;
 800140a:	e002      	b.n	8001412 <DisplayMAN_REDY+0x1e>
	case 1:
		InitLED();
 800140c:	f7ff ff9e 	bl	800134c <InitLED>
		break;
 8001410:	bf00      	nop
	}
	if(statusledy == 0){
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <DisplayMAN_REDY+0x38>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <DisplayMAN_REDY+0x2e>
		statusledy = 1;
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <DisplayMAN_REDY+0x38>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledy = 0;
	}
}
 8001420:	e002      	b.n	8001428 <DisplayMAN_REDY+0x34>
		statusledy = 0;
 8001422:	4b02      	ldr	r3, [pc, #8]	; (800142c <DisplayMAN_REDY+0x38>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200000f4 	.word	0x200000f4

08001430 <DisplayMAN_GREENX>:
void DisplayMAN_GREENX(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	switch(statusledx){
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <DisplayMAN_GREENX+0x38>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <DisplayMAN_GREENX+0x12>
 800143c:	2b01      	cmp	r3, #1
 800143e:	d003      	beq.n	8001448 <DisplayMAN_GREENX+0x18>
 8001440:	e005      	b.n	800144e <DisplayMAN_GREENX+0x1e>
	case 0:
		DisplayGREENX();
 8001442:	f7ff ff07 	bl	8001254 <DisplayGREENX>
		break;
 8001446:	e002      	b.n	800144e <DisplayMAN_GREENX+0x1e>
	case 1:
		InitLED();
 8001448:	f7ff ff80 	bl	800134c <InitLED>
		break;
 800144c:	bf00      	nop
	}
	if(statusledx == 0){
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <DisplayMAN_GREENX+0x38>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <DisplayMAN_GREENX+0x2e>
		statusledx = 1;
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <DisplayMAN_GREENX+0x38>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledx = 0;
	}
}
 800145c:	e002      	b.n	8001464 <DisplayMAN_GREENX+0x34>
		statusledx = 0;
 800145e:	4b02      	ldr	r3, [pc, #8]	; (8001468 <DisplayMAN_GREENX+0x38>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200000f0 	.word	0x200000f0

0800146c <DisplayMAN_GREENY>:
void DisplayMAN_GREENY(void){
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	switch(statusledy){
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <DisplayMAN_GREENY+0x38>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <DisplayMAN_GREENY+0x12>
 8001478:	2b01      	cmp	r3, #1
 800147a:	d003      	beq.n	8001484 <DisplayMAN_GREENY+0x18>
 800147c:	e005      	b.n	800148a <DisplayMAN_GREENY+0x1e>
	case 0:
		DisplayGREENY();
 800147e:	f7ff ff45 	bl	800130c <DisplayGREENY>
		break;
 8001482:	e002      	b.n	800148a <DisplayMAN_GREENY+0x1e>
	case 1:
		InitLED();
 8001484:	f7ff ff62 	bl	800134c <InitLED>
		break;
 8001488:	bf00      	nop
	}
	if(statusledy == 0){
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <DisplayMAN_GREENY+0x38>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <DisplayMAN_GREENY+0x2e>
		statusledy = 1;
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <DisplayMAN_GREENY+0x38>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledy = 0;
	}
}
 8001498:	e002      	b.n	80014a0 <DisplayMAN_GREENY+0x34>
		statusledy = 0;
 800149a:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <DisplayMAN_GREENY+0x38>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000f4 	.word	0x200000f4

080014a8 <DisplayMAN_YELLOWX>:
void DisplayMAN_YELLOWX(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	switch(statusledx){
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <DisplayMAN_YELLOWX+0x38>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <DisplayMAN_YELLOWX+0x12>
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d003      	beq.n	80014c0 <DisplayMAN_YELLOWX+0x18>
 80014b8:	e005      	b.n	80014c6 <DisplayMAN_YELLOWX+0x1e>
	case 0:
		DisplayYELLOWX();
 80014ba:	f7ff feaf 	bl	800121c <DisplayYELLOWX>
		break;
 80014be:	e002      	b.n	80014c6 <DisplayMAN_YELLOWX+0x1e>
	case 1:
		InitLED();
 80014c0:	f7ff ff44 	bl	800134c <InitLED>
		break;
 80014c4:	bf00      	nop
	}
	if(statusledx == 0){
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <DisplayMAN_YELLOWX+0x38>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d103      	bne.n	80014d6 <DisplayMAN_YELLOWX+0x2e>
		statusledx = 1;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <DisplayMAN_YELLOWX+0x38>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledx = 0;
	}
}
 80014d4:	e002      	b.n	80014dc <DisplayMAN_YELLOWX+0x34>
		statusledx = 0;
 80014d6:	4b02      	ldr	r3, [pc, #8]	; (80014e0 <DisplayMAN_YELLOWX+0x38>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200000f0 	.word	0x200000f0

080014e4 <DisplayMAN_YELLOWY>:
void DisplayMAN_YELLOWY(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	switch(statusledy){
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <DisplayMAN_YELLOWY+0x38>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <DisplayMAN_YELLOWY+0x12>
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d003      	beq.n	80014fc <DisplayMAN_YELLOWY+0x18>
 80014f4:	e005      	b.n	8001502 <DisplayMAN_YELLOWY+0x1e>
	case 0:
		DisplayYELLOWY();
 80014f6:	f7ff fee9 	bl	80012cc <DisplayYELLOWY>
		break;
 80014fa:	e002      	b.n	8001502 <DisplayMAN_YELLOWY+0x1e>
	case 1:
		InitLED();
 80014fc:	f7ff ff26 	bl	800134c <InitLED>
		break;
 8001500:	bf00      	nop
	}
	if(statusledy == 0){
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <DisplayMAN_YELLOWY+0x38>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d103      	bne.n	8001512 <DisplayMAN_YELLOWY+0x2e>
		statusledy = 1;
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <DisplayMAN_YELLOWY+0x38>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledy = 0;
	}
}
 8001510:	e002      	b.n	8001518 <DisplayMAN_YELLOWY+0x34>
		statusledy = 0;
 8001512:	4b02      	ldr	r3, [pc, #8]	; (800151c <DisplayMAN_YELLOWY+0x38>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200000f4 	.word	0x200000f4

08001520 <WalkingX>:
void WalkingX(void){
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Xa_GPIO_Port, WALK_Xa_Pin, SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <WalkingX+0x1c>)
 800152a:	f000 ff76 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Xb_GPIO_Port, WALK_Xb_Pin, RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2101      	movs	r1, #1
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <WalkingX+0x20>)
 8001534:	f000 ff71 	bl	800241a <HAL_GPIO_WritePin>
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40010800 	.word	0x40010800
 8001540:	40010c00 	.word	0x40010c00

08001544 <StopX>:
void StopX(void){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Xa_GPIO_Port, WALK_Xa_Pin, SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2110      	movs	r1, #16
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <StopX+0x1c>)
 800154e:	f000 ff64 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Xb_GPIO_Port, WALK_Xb_Pin, SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2101      	movs	r1, #1
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <StopX+0x20>)
 8001558:	f000 ff5f 	bl	800241a <HAL_GPIO_WritePin>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40010800 	.word	0x40010800
 8001564:	40010c00 	.word	0x40010c00

08001568 <WalkingY>:
void WalkingY(void){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Ya_GPIO_Port, WALK_Ya_Pin, SET);
 800156c:	2201      	movs	r2, #1
 800156e:	2102      	movs	r1, #2
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <WalkingY+0x1c>)
 8001572:	f000 ff52 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Yb_GPIO_Port, WALK_Yb_Pin, RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2104      	movs	r1, #4
 800157a:	4802      	ldr	r0, [pc, #8]	; (8001584 <WalkingY+0x1c>)
 800157c:	f000 ff4d 	bl	800241a <HAL_GPIO_WritePin>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40010c00 	.word	0x40010c00

08001588 <StopY>:
void StopY(void){
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Ya_GPIO_Port, WALK_Ya_Pin, SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2102      	movs	r1, #2
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <StopY+0x1c>)
 8001592:	f000 ff42 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Yb_GPIO_Port, WALK_Yb_Pin, SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2104      	movs	r1, #4
 800159a:	4802      	ldr	r0, [pc, #8]	; (80015a4 <StopY+0x1c>)
 800159c:	f000 ff3d 	bl	800241a <HAL_GPIO_WritePin>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40010c00 	.word	0x40010c00

080015a8 <TurnOff_WalkingX>:
void TurnOff_WalkingX(void){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Xa_GPIO_Port, WALK_Xa_Pin, RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2110      	movs	r1, #16
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <TurnOff_WalkingX+0x1c>)
 80015b2:	f000 ff32 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Xb_GPIO_Port, WALK_Xb_Pin, RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2101      	movs	r1, #1
 80015ba:	4803      	ldr	r0, [pc, #12]	; (80015c8 <TurnOff_WalkingX+0x20>)
 80015bc:	f000 ff2d 	bl	800241a <HAL_GPIO_WritePin>
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40010800 	.word	0x40010800
 80015c8:	40010c00 	.word	0x40010c00

080015cc <TurnOff_WalkingY>:
void TurnOff_WalkingY(void){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Ya_GPIO_Port, WALK_Ya_Pin, RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2102      	movs	r1, #2
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <TurnOff_WalkingY+0x1c>)
 80015d6:	f000 ff20 	bl	800241a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Yb_GPIO_Port, WALK_Yb_Pin, RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2104      	movs	r1, #4
 80015de:	4802      	ldr	r0, [pc, #8]	; (80015e8 <TurnOff_WalkingY+0x1c>)
 80015e0:	f000 ff1b 	bl	800241a <HAL_GPIO_WritePin>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40010c00 	.word	0x40010c00

080015ec <WalkingX_Blinking>:
void WalkingX_Blinking(void){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	switch(statusledx){
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <WalkingX_Blinking+0x38>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <WalkingX_Blinking+0x12>
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d003      	beq.n	8001604 <WalkingX_Blinking+0x18>
 80015fc:	e005      	b.n	800160a <WalkingX_Blinking+0x1e>
	case 0:
		WalkingX();
 80015fe:	f7ff ff8f 	bl	8001520 <WalkingX>
		break;
 8001602:	e002      	b.n	800160a <WalkingX_Blinking+0x1e>
	case 1:
		TurnOff_WalkingX();
 8001604:	f7ff ffd0 	bl	80015a8 <TurnOff_WalkingX>
		break;
 8001608:	bf00      	nop
	}
	if(statusledx == 0){
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <WalkingX_Blinking+0x38>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <WalkingX_Blinking+0x2e>
		statusledx = 1;
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <WalkingX_Blinking+0x38>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledx = 0;
	}
}
 8001618:	e002      	b.n	8001620 <WalkingX_Blinking+0x34>
		statusledx = 0;
 800161a:	4b02      	ldr	r3, [pc, #8]	; (8001624 <WalkingX_Blinking+0x38>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200000f0 	.word	0x200000f0

08001628 <WalkingY_Blinnking>:
void WalkingY_Blinnking(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	switch(statusledy){
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <WalkingY_Blinnking+0x38>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <WalkingY_Blinnking+0x12>
 8001634:	2b01      	cmp	r3, #1
 8001636:	d003      	beq.n	8001640 <WalkingY_Blinnking+0x18>
 8001638:	e005      	b.n	8001646 <WalkingY_Blinnking+0x1e>
	case 0:
		WalkingY();
 800163a:	f7ff ff95 	bl	8001568 <WalkingY>
		break;
 800163e:	e002      	b.n	8001646 <WalkingY_Blinnking+0x1e>
	case 1:
		TurnOff_WalkingY();
 8001640:	f7ff ffc4 	bl	80015cc <TurnOff_WalkingY>
		break;
 8001644:	bf00      	nop
	}
	if(statusledy == 0){
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <WalkingY_Blinnking+0x38>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d103      	bne.n	8001656 <WalkingY_Blinnking+0x2e>
		statusledy = 1;
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <WalkingY_Blinnking+0x38>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledy = 0;
	}
}
 8001654:	e002      	b.n	800165c <WalkingY_Blinnking+0x34>
		statusledy = 0;
 8001656:	4b02      	ldr	r3, [pc, #8]	; (8001660 <WalkingY_Blinnking+0x38>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200000f4 	.word	0x200000f4

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001668:	f000 fba8 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166c:	f000 f848 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001670:	f000 f92a 	bl	80018c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001674:	f000 f8fe 	bl	8001874 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001678:	f000 f8b0 	bl	80017dc <MX_TIM2_Init>
  MX_I2C1_Init();
 800167c:	f000 f880 	bl	8001780 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001680:	4819      	ldr	r0, [pc, #100]	; (80016e8 <main+0x84>)
 8001682:	f001 ffdd 	bl	8003640 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8001686:	f7ff fb29 	bl	8000cdc <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  statusx = INIT;
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <main+0x88>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
  statusy = INIT;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <main+0x8c>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]
  counterMode = 1;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <main+0x90>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]
  counterTimeSet = 0;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <main+0x94>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
  DisplayCounter = 0;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <main+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
  setTimer(6, 10);
 80016a8:	210a      	movs	r1, #10
 80016aa:	2006      	movs	r0, #6
 80016ac:	f000 fb00 	bl	8001cb0 <setTimer>
  setTimer(4, 500);
 80016b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016b4:	2004      	movs	r0, #4
 80016b6:	f000 fafb 	bl	8001cb0 <setTimer>
  setTimer(5, 500);
 80016ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016be:	2005      	movs	r0, #5
 80016c0:	f000 faf6 	bl	8001cb0 <setTimer>
  while (1)
  {
  fsm_manual_run();
 80016c4:	f7ff fa04 	bl	8000ad0 <fsm_manual_run>
  fsm_automatic_runx();
 80016c8:	f7fe fef8 	bl	80004bc <fsm_automatic_runx>
  fsm_automatic_runy();
 80016cc:	f7fe ffb0 	bl	8000630 <fsm_automatic_runy>
  fsm_manual_run1();
 80016d0:	f7ff f8c8 	bl	8000864 <fsm_manual_run1>
  fsm_manual_run2();
 80016d4:	f7ff f954 	bl	8000980 <fsm_manual_run2>
  fsm_for_input_processing1();
 80016d8:	f7ff fb66 	bl	8000da8 <fsm_for_input_processing1>
  fsm_for_input_processing2();
 80016dc:	f7ff fbba 	bl	8000e54 <fsm_for_input_processing2>
  fsm_for_input_processing3();
 80016e0:	f7ff fc0a 	bl	8000ef8 <fsm_for_input_processing3>
  fsm_manual_run();
 80016e4:	e7ee      	b.n	80016c4 <main+0x60>
 80016e6:	bf00      	nop
 80016e8:	20000158 	.word	0x20000158
 80016ec:	200000b0 	.word	0x200000b0
 80016f0:	200000b4 	.word	0x200000b4
 80016f4:	200000c4 	.word	0x200000c4
 80016f8:	200000c8 	.word	0x200000c8
 80016fc:	2000009c 	.word	0x2000009c

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b090      	sub	sp, #64	; 0x40
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0318 	add.w	r3, r7, #24
 800170a:	2228      	movs	r2, #40	; 0x28
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fc40 	bl	8003f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001726:	2301      	movs	r3, #1
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172a:	2310      	movs	r3, #16
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172e:	2302      	movs	r3, #2
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001732:	2300      	movs	r3, #0
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001736:	2300      	movs	r3, #0
 8001738:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173a:	f107 0318 	add.w	r3, r7, #24
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fb20 	bl	8002d84 <HAL_RCC_OscConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800174a:	f000 f959 	bl	8001a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174e:	230f      	movs	r3, #15
 8001750:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001752:	2302      	movs	r3, #2
 8001754:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f001 fd8b 	bl	8003284 <HAL_RCC_ClockConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001774:	f000 f944 	bl	8001a00 <Error_Handler>
  }
}
 8001778:	bf00      	nop
 800177a:	3740      	adds	r7, #64	; 0x40
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <MX_I2C1_Init+0x54>)
 8001788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_I2C1_Init+0x50>)
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <MX_I2C1_Init+0x58>)
 800178e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_I2C1_Init+0x50>)
 800179e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017be:	f000 fe45 	bl	800244c <HAL_I2C_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c8:	f000 f91a 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000104 	.word	0x20000104
 80017d4:	40005400 	.word	0x40005400
 80017d8:	000186a0 	.word	0x000186a0

080017dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MX_TIM2_Init+0x94>)
 80017fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <MX_TIM2_Init+0x94>)
 8001802:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001806:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <MX_TIM2_Init+0x94>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <MX_TIM2_Init+0x94>)
 8001810:	2209      	movs	r2, #9
 8001812:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <MX_TIM2_Init+0x94>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_TIM2_Init+0x94>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001820:	4813      	ldr	r0, [pc, #76]	; (8001870 <MX_TIM2_Init+0x94>)
 8001822:	f001 febd 	bl	80035a0 <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800182c:	f000 f8e8 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	4619      	mov	r1, r3
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <MX_TIM2_Init+0x94>)
 800183e:	f002 f841 	bl	80038c4 <HAL_TIM_ConfigClockSource>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001848:	f000 f8da 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001854:	463b      	mov	r3, r7
 8001856:	4619      	mov	r1, r3
 8001858:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_TIM2_Init+0x94>)
 800185a:	f002 fa23 	bl	8003ca4 <HAL_TIMEx_MasterConfigSynchronization>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001864:	f000 f8cc 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000158 	.word	0x20000158

08001874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_USART2_UART_Init+0x4c>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <MX_USART2_UART_Init+0x50>)
 800187c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_USART2_UART_Init+0x4c>)
 8001880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_USART2_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_USART2_UART_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_USART2_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_USART2_UART_Init+0x4c>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_USART2_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_USART2_UART_Init+0x4c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_USART2_UART_Init+0x4c>)
 80018ac:	f002 fa6a 	bl	8003d84 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018b6:	f000 f8a3 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200001a0 	.word	0x200001a0
 80018c4:	40004400 	.word	0x40004400

080018c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <MX_GPIO_Init+0x128>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a43      	ldr	r2, [pc, #268]	; (80019f0 <MX_GPIO_Init+0x128>)
 80018e2:	f043 0310 	orr.w	r3, r3, #16
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <MX_GPIO_Init+0x128>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f4:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <MX_GPIO_Init+0x128>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a3d      	ldr	r2, [pc, #244]	; (80019f0 <MX_GPIO_Init+0x128>)
 80018fa:	f043 0320 	orr.w	r3, r3, #32
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <MX_GPIO_Init+0x128>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0320 	and.w	r3, r3, #32
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <MX_GPIO_Init+0x128>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a37      	ldr	r2, [pc, #220]	; (80019f0 <MX_GPIO_Init+0x128>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <MX_GPIO_Init+0x128>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <MX_GPIO_Init+0x128>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <MX_GPIO_Init+0x128>)
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <MX_GPIO_Init+0x128>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WALK_Xa_Pin|LD2_Pin|LEDY1_A_Pin|LEDY1_B_Pin, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001942:	482c      	ldr	r0, [pc, #176]	; (80019f4 <MX_GPIO_Init+0x12c>)
 8001944:	f000 fd69 	bl	800241a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WALK_Xb_Pin|WALK_Ya_Pin|WALK_Yb_Pin|LEDX2_B_Pin
 8001948:	2200      	movs	r2, #0
 800194a:	f240 417f 	movw	r1, #1151	; 0x47f
 800194e:	482a      	ldr	r0, [pc, #168]	; (80019f8 <MX_GPIO_Init+0x130>)
 8001950:	f000 fd63 	bl	800241a <HAL_GPIO_WritePin>
                          |LEDX1_A_Pin|LEDX2_A_Pin|LEDX1_B_Pin|LEDY2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	4828      	ldr	r0, [pc, #160]	; (80019fc <MX_GPIO_Init+0x134>)
 800195a:	f000 fd5e 	bl	800241a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	4822      	ldr	r0, [pc, #136]	; (80019fc <MX_GPIO_Init+0x134>)
 8001974:	f000 fbb6 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8001978:	2303      	movs	r3, #3
 800197a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001980:	2301      	movs	r3, #1
 8001982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	481a      	ldr	r0, [pc, #104]	; (80019f4 <MX_GPIO_Init+0x12c>)
 800198c:	f000 fbaa 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WALK_Xa_Pin LD2_Pin LEDY1_A_Pin LEDY1_B_Pin */
  GPIO_InitStruct.Pin = WALK_Xa_Pin|LD2_Pin|LEDY1_A_Pin|LEDY1_B_Pin;
 8001990:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2302      	movs	r3, #2
 80019a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	4619      	mov	r1, r3
 80019a8:	4812      	ldr	r0, [pc, #72]	; (80019f4 <MX_GPIO_Init+0x12c>)
 80019aa:	f000 fb9b 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WALK_Xb_Pin WALK_Ya_Pin WALK_Yb_Pin LEDX2_B_Pin
                           LEDX1_A_Pin LEDX2_A_Pin LEDX1_B_Pin LEDY2_B_Pin */
  GPIO_InitStruct.Pin = WALK_Xb_Pin|WALK_Ya_Pin|WALK_Yb_Pin|LEDX2_B_Pin
 80019ae:	f240 437f 	movw	r3, #1151	; 0x47f
 80019b2:	613b      	str	r3, [r7, #16]
                          |LEDX1_A_Pin|LEDX2_A_Pin|LEDX1_B_Pin|LEDY2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2302      	movs	r3, #2
 80019be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4619      	mov	r1, r3
 80019c6:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_GPIO_Init+0x130>)
 80019c8:	f000 fb8c 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDY2_A_Pin */
  GPIO_InitStruct.Pin = LEDY2_A_Pin;
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2302      	movs	r3, #2
 80019da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDY2_A_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	4806      	ldr	r0, [pc, #24]	; (80019fc <MX_GPIO_Init+0x134>)
 80019e4:	f000 fb7e 	bl	80020e4 <HAL_GPIO_Init>

}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010800 	.word	0x40010800
 80019f8:	40010c00 	.word	0x40010c00
 80019fc:	40011000 	.word	0x40011000

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <Error_Handler+0x8>
	...

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6193      	str	r3, [r2, #24]
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_MspInit+0x60>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_MspInit+0x60>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000

08001a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <HAL_I2C_MspInit+0x90>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d132      	bne.n	8001af6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <HAL_I2C_MspInit+0x94>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_I2C_MspInit+0x94>)
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_I2C_MspInit+0x94>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aa8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aae:	2312      	movs	r3, #18
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4812      	ldr	r0, [pc, #72]	; (8001b08 <HAL_I2C_MspInit+0x98>)
 8001abe:	f000 fb11 	bl	80020e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_I2C_MspInit+0x9c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad8:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <HAL_I2C_MspInit+0x9c>)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_I2C_MspInit+0x94>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_I2C_MspInit+0x94>)
 8001ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_I2C_MspInit+0x94>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40005400 	.word	0x40005400
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	40010000 	.word	0x40010000

08001b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b20:	d113      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_TIM_Base_MspInit+0x44>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_TIM_Base_MspInit+0x44>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_TIM_Base_MspInit+0x44>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	201c      	movs	r0, #28
 8001b40:	f000 fa99 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b44:	201c      	movs	r0, #28
 8001b46:	f000 fab2 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000

08001b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <HAL_UART_MspInit+0x70>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d123      	bne.n	8001bc0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_UART_MspInit+0x74>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <HAL_UART_MspInit+0x74>)
 8001b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b82:	61d3      	str	r3, [r2, #28]
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_UART_MspInit+0x74>)
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_UART_MspInit+0x74>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <HAL_UART_MspInit+0x74>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_UART_MspInit+0x74>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ba8:	230c      	movs	r3, #12
 8001baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_UART_MspInit+0x78>)
 8001bbc:	f000 fa92 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40004400 	.word	0x40004400
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010800 	.word	0x40010800

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <NMI_Handler+0x4>

08001bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler+0x4>

08001be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1a:	f000 f915 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <TIM2_IRQHandler+0x10>)
 8001c2a:	f001 fd5b 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000158 	.word	0x20000158

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f002 f96a 	bl	8003f40 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20005000 	.word	0x20005000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	200000f8 	.word	0x200000f8
 8001ca0:	20000250 	.word	0x20000250

08001ca4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <setTimer>:
#include "input_reading.h"

int TIME_CYCLE = 10;
int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];
void setTimer(int index, int duration){
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <setTimer+0x30>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	fb92 f2f3 	sdiv	r2, r2, r3
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <setTimer+0x34>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001ccc:	4a06      	ldr	r2, [pc, #24]	; (8001ce8 <setTimer+0x38>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	20000010 	.word	0x20000010
 8001ce4:	200001e8 	.word	0x200001e8
 8001ce8:	20000210 	.word	0x20000210

08001cec <timerRun>:
void timerRun(void){
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_COUNTER; i++){
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	e01c      	b.n	8001d32 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001cf8:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <timerRun+0x58>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	dd13      	ble.n	8001d2c <timerRun+0x40>
			timer_counter[i]--;
 8001d04:	4a0f      	ldr	r2, [pc, #60]	; (8001d44 <timerRun+0x58>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0c:	1e5a      	subs	r2, r3, #1
 8001d0e:	490d      	ldr	r1, [pc, #52]	; (8001d44 <timerRun+0x58>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <timerRun+0x58>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	dc04      	bgt.n	8001d2c <timerRun+0x40>
				timer_flag[i] = 1;
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <timerRun+0x5c>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2101      	movs	r1, #1
 8001d28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_COUNTER; i++){
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	dddf      	ble.n	8001cf8 <timerRun+0xc>
			}
		}
	}
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	200001e8 	.word	0x200001e8
 8001d48:	20000210 	.word	0x20000210

08001d4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5c:	d103      	bne.n	8001d66 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8001d5e:	f7ff f963 	bl	8001028 <button_reading>
		timerRun();
 8001d62:	f7ff ffc3 	bl	8001cec <timerRun>
	}
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d70:	f7ff ff98 	bl	8001ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480b      	ldr	r0, [pc, #44]	; (8001da4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d76:	490c      	ldr	r1, [pc, #48]	; (8001da8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d78:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d8c:	4c09      	ldr	r4, [pc, #36]	; (8001db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f002 f8d7 	bl	8003f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9e:	f7ff fc61 	bl	8001664 <main>
  bx lr
 8001da2:	4770      	bx	lr
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001dac:	080048ec 	.word	0x080048ec
  ldr r2, =_sbss
 8001db0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001db4:	2000024c 	.word	0x2000024c

08001db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC1_2_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_Init+0x28>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_Init+0x28>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f000 f947 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 f808 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd8:	f7ff fe18 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x54>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x58>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f95f 	bl	80020ca <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00e      	b.n	8001e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0f      	cmp	r3, #15
 8001e1a:	d80a      	bhi.n	8001e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f000 f927 	bl	8002076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <HAL_InitTick+0x5c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	20000018 	.word	0x20000018
 8001e44:	20000014 	.word	0x20000014

08001e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x1c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_IncTick+0x20>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <HAL_IncTick+0x20>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	20000018 	.word	0x20000018
 8001e68:	20000238 	.word	0x20000238

08001e6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <HAL_GetTick+0x10>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	20000238 	.word	0x20000238

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffe0 	bl	8001e6c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000018 	.word	0x20000018

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4906      	ldr	r1, [pc, #24]	; (8001f60 <__NVIC_EnableIRQ+0x34>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	; (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
         );
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f7ff ff90 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff2d 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff42 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff90 	bl	8001fb8 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5f 	bl	8001f64 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff35 	bl	8001f2c <__NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffa2 	bl	800201c <SysTick_Config>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b08b      	sub	sp, #44	; 0x2c
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f6:	e169      	b.n	80023cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020f8:	2201      	movs	r2, #1
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	429a      	cmp	r2, r3
 8002112:	f040 8158 	bne.w	80023c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a9a      	ldr	r2, [pc, #616]	; (8002384 <HAL_GPIO_Init+0x2a0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d05e      	beq.n	80021de <HAL_GPIO_Init+0xfa>
 8002120:	4a98      	ldr	r2, [pc, #608]	; (8002384 <HAL_GPIO_Init+0x2a0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d875      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 8002126:	4a98      	ldr	r2, [pc, #608]	; (8002388 <HAL_GPIO_Init+0x2a4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d058      	beq.n	80021de <HAL_GPIO_Init+0xfa>
 800212c:	4a96      	ldr	r2, [pc, #600]	; (8002388 <HAL_GPIO_Init+0x2a4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d86f      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 8002132:	4a96      	ldr	r2, [pc, #600]	; (800238c <HAL_GPIO_Init+0x2a8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d052      	beq.n	80021de <HAL_GPIO_Init+0xfa>
 8002138:	4a94      	ldr	r2, [pc, #592]	; (800238c <HAL_GPIO_Init+0x2a8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d869      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 800213e:	4a94      	ldr	r2, [pc, #592]	; (8002390 <HAL_GPIO_Init+0x2ac>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d04c      	beq.n	80021de <HAL_GPIO_Init+0xfa>
 8002144:	4a92      	ldr	r2, [pc, #584]	; (8002390 <HAL_GPIO_Init+0x2ac>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d863      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 800214a:	4a92      	ldr	r2, [pc, #584]	; (8002394 <HAL_GPIO_Init+0x2b0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d046      	beq.n	80021de <HAL_GPIO_Init+0xfa>
 8002150:	4a90      	ldr	r2, [pc, #576]	; (8002394 <HAL_GPIO_Init+0x2b0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d85d      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 8002156:	2b12      	cmp	r3, #18
 8002158:	d82a      	bhi.n	80021b0 <HAL_GPIO_Init+0xcc>
 800215a:	2b12      	cmp	r3, #18
 800215c:	d859      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 800215e:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <HAL_GPIO_Init+0x80>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	080021df 	.word	0x080021df
 8002168:	080021b9 	.word	0x080021b9
 800216c:	080021cb 	.word	0x080021cb
 8002170:	0800220d 	.word	0x0800220d
 8002174:	08002213 	.word	0x08002213
 8002178:	08002213 	.word	0x08002213
 800217c:	08002213 	.word	0x08002213
 8002180:	08002213 	.word	0x08002213
 8002184:	08002213 	.word	0x08002213
 8002188:	08002213 	.word	0x08002213
 800218c:	08002213 	.word	0x08002213
 8002190:	08002213 	.word	0x08002213
 8002194:	08002213 	.word	0x08002213
 8002198:	08002213 	.word	0x08002213
 800219c:	08002213 	.word	0x08002213
 80021a0:	08002213 	.word	0x08002213
 80021a4:	08002213 	.word	0x08002213
 80021a8:	080021c1 	.word	0x080021c1
 80021ac:	080021d5 	.word	0x080021d5
 80021b0:	4a79      	ldr	r2, [pc, #484]	; (8002398 <HAL_GPIO_Init+0x2b4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021b6:	e02c      	b.n	8002212 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e029      	b.n	8002214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	3304      	adds	r3, #4
 80021c6:	623b      	str	r3, [r7, #32]
          break;
 80021c8:	e024      	b.n	8002214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	3308      	adds	r3, #8
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e01f      	b.n	8002214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	330c      	adds	r3, #12
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	e01a      	b.n	8002214 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021e6:	2304      	movs	r3, #4
 80021e8:	623b      	str	r3, [r7, #32]
          break;
 80021ea:	e013      	b.n	8002214 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021f4:	2308      	movs	r3, #8
 80021f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	611a      	str	r2, [r3, #16]
          break;
 80021fe:	e009      	b.n	8002214 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002200:	2308      	movs	r3, #8
 8002202:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	615a      	str	r2, [r3, #20]
          break;
 800220a:	e003      	b.n	8002214 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e000      	b.n	8002214 <HAL_GPIO_Init+0x130>
          break;
 8002212:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2bff      	cmp	r3, #255	; 0xff
 8002218:	d801      	bhi.n	800221e <HAL_GPIO_Init+0x13a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	e001      	b.n	8002222 <HAL_GPIO_Init+0x13e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3304      	adds	r3, #4
 8002222:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	2bff      	cmp	r3, #255	; 0xff
 8002228:	d802      	bhi.n	8002230 <HAL_GPIO_Init+0x14c>
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	e002      	b.n	8002236 <HAL_GPIO_Init+0x152>
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	3b08      	subs	r3, #8
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	210f      	movs	r1, #15
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	6a39      	ldr	r1, [r7, #32]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	431a      	orrs	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80b1 	beq.w	80023c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002264:	4b4d      	ldr	r3, [pc, #308]	; (800239c <HAL_GPIO_Init+0x2b8>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a4c      	ldr	r2, [pc, #304]	; (800239c <HAL_GPIO_Init+0x2b8>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_GPIO_Init+0x2b8>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800227c:	4a48      	ldr	r2, [pc, #288]	; (80023a0 <HAL_GPIO_Init+0x2bc>)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a40      	ldr	r2, [pc, #256]	; (80023a4 <HAL_GPIO_Init+0x2c0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d013      	beq.n	80022d0 <HAL_GPIO_Init+0x1ec>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a3f      	ldr	r2, [pc, #252]	; (80023a8 <HAL_GPIO_Init+0x2c4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00d      	beq.n	80022cc <HAL_GPIO_Init+0x1e8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3e      	ldr	r2, [pc, #248]	; (80023ac <HAL_GPIO_Init+0x2c8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d007      	beq.n	80022c8 <HAL_GPIO_Init+0x1e4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3d      	ldr	r2, [pc, #244]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_GPIO_Init+0x1e0>
 80022c0:	2303      	movs	r3, #3
 80022c2:	e006      	b.n	80022d2 <HAL_GPIO_Init+0x1ee>
 80022c4:	2304      	movs	r3, #4
 80022c6:	e004      	b.n	80022d2 <HAL_GPIO_Init+0x1ee>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e002      	b.n	80022d2 <HAL_GPIO_Init+0x1ee>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_GPIO_Init+0x1ee>
 80022d0:	2300      	movs	r3, #0
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	f002 0203 	and.w	r2, r2, #3
 80022d8:	0092      	lsls	r2, r2, #2
 80022da:	4093      	lsls	r3, r2
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022e2:	492f      	ldr	r1, [pc, #188]	; (80023a0 <HAL_GPIO_Init+0x2bc>)
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	492c      	ldr	r1, [pc, #176]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	43db      	mvns	r3, r3
 8002312:	4928      	ldr	r1, [pc, #160]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002314:	4013      	ands	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	4922      	ldr	r1, [pc, #136]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	43db      	mvns	r3, r3
 800233a:	491e      	ldr	r1, [pc, #120]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800233c:	4013      	ands	r3, r2
 800233e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d006      	beq.n	800235a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4918      	ldr	r1, [pc, #96]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	43db      	mvns	r3, r3
 8002362:	4914      	ldr	r1, [pc, #80]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002364:	4013      	ands	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d021      	beq.n	80023b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	490e      	ldr	r1, [pc, #56]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e021      	b.n	80023c6 <HAL_GPIO_Init+0x2e2>
 8002382:	bf00      	nop
 8002384:	10320000 	.word	0x10320000
 8002388:	10310000 	.word	0x10310000
 800238c:	10220000 	.word	0x10220000
 8002390:	10210000 	.word	0x10210000
 8002394:	10120000 	.word	0x10120000
 8002398:	10110000 	.word	0x10110000
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010000 	.word	0x40010000
 80023a4:	40010800 	.word	0x40010800
 80023a8:	40010c00 	.word	0x40010c00
 80023ac:	40011000 	.word	0x40011000
 80023b0:	40011400 	.word	0x40011400
 80023b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_GPIO_Init+0x304>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	43db      	mvns	r3, r3
 80023c0:	4909      	ldr	r1, [pc, #36]	; (80023e8 <HAL_GPIO_Init+0x304>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	3301      	adds	r3, #1
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f47f ae8e 	bne.w	80020f8 <HAL_GPIO_Init+0x14>
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	372c      	adds	r7, #44	; 0x2c
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40010400 	.word	0x40010400

080023ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e001      	b.n	800240e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]
 8002426:	4613      	mov	r3, r2
 8002428:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800242a:	787b      	ldrb	r3, [r7, #1]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002430:	887a      	ldrh	r2, [r7, #2]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002436:	e003      	b.n	8002440 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	041a      	lsls	r2, r3, #16
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	611a      	str	r2, [r3, #16]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
	...

0800244c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e12b      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fafc 	bl	8001a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800249e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b0:	f001 f830 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a81      	ldr	r2, [pc, #516]	; (80026c0 <HAL_I2C_Init+0x274>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d807      	bhi.n	80024d0 <HAL_I2C_Init+0x84>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a80      	ldr	r2, [pc, #512]	; (80026c4 <HAL_I2C_Init+0x278>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e006      	b.n	80024de <HAL_I2C_Init+0x92>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a7d      	ldr	r2, [pc, #500]	; (80026c8 <HAL_I2C_Init+0x27c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0e7      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a78      	ldr	r2, [pc, #480]	; (80026cc <HAL_I2C_Init+0x280>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a6a      	ldr	r2, [pc, #424]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d802      	bhi.n	8002520 <HAL_I2C_Init+0xd4>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	e009      	b.n	8002534 <HAL_I2C_Init+0xe8>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_I2C_Init+0x284>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	3301      	adds	r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	495c      	ldr	r1, [pc, #368]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002550:	428b      	cmp	r3, r1
 8002552:	d819      	bhi.n	8002588 <HAL_I2C_Init+0x13c>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002568:	400b      	ands	r3, r1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_I2C_Init+0x138>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1e59      	subs	r1, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	e051      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002584:	2304      	movs	r3, #4
 8002586:	e04f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_I2C_Init+0x168>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	440b      	add	r3, r1
 800259e:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e012      	b.n	80025da <HAL_I2C_Init+0x18e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x196>
 80025de:	2301      	movs	r3, #1
 80025e0:	e022      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10e      	bne.n	8002608 <HAL_I2C_Init+0x1bc>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e58      	subs	r0, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	e00f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	6809      	ldr	r1, [r1, #0]
 800262c:	4313      	orrs	r3, r2
 800262e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6911      	ldr	r1, [r2, #16]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	000186a0 	.word	0x000186a0
 80026c4:	001e847f 	.word	0x001e847f
 80026c8:	003d08ff 	.word	0x003d08ff
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	10624dd3 	.word	0x10624dd3

080026d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	461a      	mov	r2, r3
 80026e0:	460b      	mov	r3, r1
 80026e2:	817b      	strh	r3, [r7, #10]
 80026e4:	4613      	mov	r3, r2
 80026e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff fbc0 	bl	8001e6c <HAL_GetTick>
 80026ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	f040 80e0 	bne.w	80028bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2319      	movs	r3, #25
 8002702:	2201      	movs	r2, #1
 8002704:	4970      	ldr	r1, [pc, #448]	; (80028c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f964 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	e0d3      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_I2C_Master_Transmit+0x50>
 8002720:	2302      	movs	r3, #2
 8002722:	e0cc      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d007      	beq.n	800274a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002758:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2221      	movs	r2, #33	; 0x21
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2210      	movs	r2, #16
 8002766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	893a      	ldrh	r2, [r7, #8]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a50      	ldr	r2, [pc, #320]	; (80028cc <HAL_I2C_Master_Transmit+0x1f8>)
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800278c:	8979      	ldrh	r1, [r7, #10]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	6a3a      	ldr	r2, [r7, #32]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f89c 	bl	80028d0 <I2C_MasterRequestWrite>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e08d      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027b8:	e066      	b.n	8002888 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	6a39      	ldr	r1, [r7, #32]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fa22 	bl	8002c08 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00d      	beq.n	80027e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d107      	bne.n	80027e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06b      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b04      	cmp	r3, #4
 8002822:	d11b      	bne.n	800285c <HAL_I2C_Master_Transmit+0x188>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	d017      	beq.n	800285c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	6a39      	ldr	r1, [r7, #32]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fa19 	bl	8002c98 <I2C_WaitOnBTFFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00d      	beq.n	8002888 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	2b04      	cmp	r3, #4
 8002872:	d107      	bne.n	8002884 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002882:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e01a      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	d194      	bne.n	80027ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e000      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	00100002 	.word	0x00100002
 80028cc:	ffff0000 	.word	0xffff0000

080028d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	460b      	mov	r3, r1
 80028de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d006      	beq.n	80028fa <I2C_MasterRequestWrite+0x2a>
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d003      	beq.n	80028fa <I2C_MasterRequestWrite+0x2a>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028f8:	d108      	bne.n	800290c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e00b      	b.n	8002924 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	2b12      	cmp	r3, #18
 8002912:	d107      	bne.n	8002924 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002922:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f84f 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00d      	beq.n	8002958 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294a:	d103      	bne.n	8002954 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e035      	b.n	80029c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002960:	d108      	bne.n	8002974 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002962:	897b      	ldrh	r3, [r7, #10]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002970:	611a      	str	r2, [r3, #16]
 8002972:	e01b      	b.n	80029ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002974:	897b      	ldrh	r3, [r7, #10]
 8002976:	11db      	asrs	r3, r3, #7
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f003 0306 	and.w	r3, r3, #6
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f063 030f 	orn	r3, r3, #15
 8002984:	b2da      	uxtb	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	490e      	ldr	r1, [pc, #56]	; (80029cc <I2C_MasterRequestWrite+0xfc>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f898 	bl	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e010      	b.n	80029c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029a2:	897b      	ldrh	r3, [r7, #10]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4907      	ldr	r1, [pc, #28]	; (80029d0 <I2C_MasterRequestWrite+0x100>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f888 	bl	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	00010008 	.word	0x00010008
 80029d0:	00010002 	.word	0x00010002

080029d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e4:	e048      	b.n	8002a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d044      	beq.n	8002a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7ff fa3d 	bl	8001e6c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d139      	bne.n	8002a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d10d      	bne.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	43da      	mvns	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	e00c      	b.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	43da      	mvns	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4013      	ands	r3, r2
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d116      	bne.n	8002a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f043 0220 	orr.w	r2, r3, #32
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e023      	b.n	8002ac0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	0c1b      	lsrs	r3, r3, #16
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d10d      	bne.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	43da      	mvns	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	e00c      	b.n	8002ab8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d093      	beq.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad6:	e071      	b.n	8002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae6:	d123      	bne.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f043 0204 	orr.w	r2, r3, #4
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e067      	b.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d041      	beq.n	8002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b38:	f7ff f998 	bl	8001e6c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d136      	bne.n	8002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d10c      	bne.n	8002b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4013      	ands	r3, r2
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf14      	ite	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	2300      	moveq	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	e00b      	b.n	8002b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	43da      	mvns	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d016      	beq.n	8002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e021      	b.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d10c      	bne.n	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e00b      	b.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4013      	ands	r3, r2
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf14      	ite	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	2300      	moveq	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f47f af6d 	bne.w	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c14:	e034      	b.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f886 	bl	8002d28 <I2C_IsAcknowledgeFailed>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e034      	b.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d028      	beq.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7ff f91d 	bl	8001e6c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d302      	bcc.n	8002c44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d11d      	bne.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	2b80      	cmp	r3, #128	; 0x80
 8002c50:	d016      	beq.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f043 0220 	orr.w	r2, r3, #32
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e007      	b.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b80      	cmp	r3, #128	; 0x80
 8002c8c:	d1c3      	bne.n	8002c16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ca4:	e034      	b.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f83e 	bl	8002d28 <I2C_IsAcknowledgeFailed>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e034      	b.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d028      	beq.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7ff f8d5 	bl	8001e6c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11d      	bne.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d016      	beq.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e007      	b.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d1c3      	bne.n	8002ca6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3e:	d11b      	bne.n	8002d78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f043 0204 	orr.w	r2, r3, #4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e26c      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8087 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002da4:	4b92      	ldr	r3, [pc, #584]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d00c      	beq.n	8002dca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002db0:	4b8f      	ldr	r3, [pc, #572]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d112      	bne.n	8002de2 <HAL_RCC_OscConfig+0x5e>
 8002dbc:	4b8c      	ldr	r3, [pc, #560]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc8:	d10b      	bne.n	8002de2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dca:	4b89      	ldr	r3, [pc, #548]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d06c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x12c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d168      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e246      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x76>
 8002dec:	4b80      	ldr	r3, [pc, #512]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a7f      	ldr	r2, [pc, #508]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	e02e      	b.n	8002e58 <HAL_RCC_OscConfig+0xd4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x98>
 8002e02:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a7a      	ldr	r2, [pc, #488]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b78      	ldr	r3, [pc, #480]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a77      	ldr	r2, [pc, #476]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e01d      	b.n	8002e58 <HAL_RCC_OscConfig+0xd4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0xbc>
 8002e26:	4b72      	ldr	r3, [pc, #456]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a71      	ldr	r2, [pc, #452]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a6e      	ldr	r2, [pc, #440]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0xd4>
 8002e40:	4b6b      	ldr	r3, [pc, #428]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a6a      	ldr	r2, [pc, #424]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b68      	ldr	r3, [pc, #416]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a67      	ldr	r2, [pc, #412]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7ff f804 	bl	8001e6c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e68:	f7ff f800 	bl	8001e6c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1fa      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	4b5d      	ldr	r3, [pc, #372]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0xe4>
 8002e86:	e014      	b.n	8002eb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fff0 	bl	8001e6c <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe ffec 	bl	8001e6c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1e6      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea2:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x10c>
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d063      	beq.n	8002f86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ebe:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eca:	4b49      	ldr	r3, [pc, #292]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d11c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x18c>
 8002ed6:	4b46      	ldr	r3, [pc, #280]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d116      	bne.n	8002f10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_RCC_OscConfig+0x176>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e1ba      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4939      	ldr	r1, [pc, #228]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	e03a      	b.n	8002f86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f18:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe ffa5 	bl	8001e6c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f26:	f7fe ffa1 	bl	8001e6c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e19b      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4927      	ldr	r1, [pc, #156]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]
 8002f58:	e015      	b.n	8002f86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5a:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe ff84 	bl	8001e6c <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f68:	f7fe ff80 	bl	8001e6c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e17a      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d03a      	beq.n	8003008 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d019      	beq.n	8002fce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9a:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fe ff64 	bl	8001e6c <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7fe ff60 	bl	8001e6c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e15a      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f000 facc 	bl	8003564 <RCC_Delay>
 8002fcc:	e01c      	b.n	8003008 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd4:	f7fe ff4a 	bl	8001e6c <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fda:	e00f      	b.n	8002ffc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7fe ff46 	bl	8001e6c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d908      	bls.n	8002ffc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e140      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	42420000 	.word	0x42420000
 8002ff8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	4b9e      	ldr	r3, [pc, #632]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e9      	bne.n	8002fdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80a6 	beq.w	8003162 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301a:	4b97      	ldr	r3, [pc, #604]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	4b94      	ldr	r3, [pc, #592]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4a93      	ldr	r2, [pc, #588]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003030:	61d3      	str	r3, [r2, #28]
 8003032:	4b91      	ldr	r3, [pc, #580]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	4b8e      	ldr	r3, [pc, #568]	; (800327c <HAL_RCC_OscConfig+0x4f8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d118      	bne.n	8003080 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304e:	4b8b      	ldr	r3, [pc, #556]	; (800327c <HAL_RCC_OscConfig+0x4f8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a8a      	ldr	r2, [pc, #552]	; (800327c <HAL_RCC_OscConfig+0x4f8>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305a:	f7fe ff07 	bl	8001e6c <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003062:	f7fe ff03 	bl	8001e6c <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b64      	cmp	r3, #100	; 0x64
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e0fd      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	4b81      	ldr	r3, [pc, #516]	; (800327c <HAL_RCC_OscConfig+0x4f8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x312>
 8003088:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4a7a      	ldr	r2, [pc, #488]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6213      	str	r3, [r2, #32]
 8003094:	e02d      	b.n	80030f2 <HAL_RCC_OscConfig+0x36e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x334>
 800309e:	4b76      	ldr	r3, [pc, #472]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	4a75      	ldr	r2, [pc, #468]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	6213      	str	r3, [r2, #32]
 80030aa:	4b73      	ldr	r3, [pc, #460]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	4a72      	ldr	r2, [pc, #456]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030b0:	f023 0304 	bic.w	r3, r3, #4
 80030b4:	6213      	str	r3, [r2, #32]
 80030b6:	e01c      	b.n	80030f2 <HAL_RCC_OscConfig+0x36e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d10c      	bne.n	80030da <HAL_RCC_OscConfig+0x356>
 80030c0:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	4a6c      	ldr	r2, [pc, #432]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030c6:	f043 0304 	orr.w	r3, r3, #4
 80030ca:	6213      	str	r3, [r2, #32]
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4a69      	ldr	r2, [pc, #420]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6213      	str	r3, [r2, #32]
 80030d8:	e00b      	b.n	80030f2 <HAL_RCC_OscConfig+0x36e>
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4a66      	ldr	r2, [pc, #408]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6213      	str	r3, [r2, #32]
 80030e6:	4b64      	ldr	r3, [pc, #400]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4a63      	ldr	r2, [pc, #396]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d015      	beq.n	8003126 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7fe feb7 	bl	8001e6c <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe feb3 	bl	8001e6c <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0ab      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003118:	4b57      	ldr	r3, [pc, #348]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ee      	beq.n	8003102 <HAL_RCC_OscConfig+0x37e>
 8003124:	e014      	b.n	8003150 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003126:	f7fe fea1 	bl	8001e6c <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312e:	f7fe fe9d 	bl	8001e6c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e095      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003144:	4b4c      	ldr	r3, [pc, #304]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ee      	bne.n	800312e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d105      	bne.n	8003162 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003156:	4b48      	ldr	r3, [pc, #288]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a47      	ldr	r2, [pc, #284]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800315c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003160:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8081 	beq.w	800326e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800316c:	4b42      	ldr	r3, [pc, #264]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b08      	cmp	r3, #8
 8003176:	d061      	beq.n	800323c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d146      	bne.n	800320e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003180:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_RCC_OscConfig+0x4fc>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7fe fe71 	bl	8001e6c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318e:	f7fe fe6d 	bl	8001e6c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e067      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a0:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b4:	d108      	bne.n	80031c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031b6:	4b30      	ldr	r3, [pc, #192]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	492d      	ldr	r1, [pc, #180]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a19      	ldr	r1, [r3, #32]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	430b      	orrs	r3, r1
 80031da:	4927      	ldr	r1, [pc, #156]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e0:	4b27      	ldr	r3, [pc, #156]	; (8003280 <HAL_RCC_OscConfig+0x4fc>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fe fe41 	bl	8001e6c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fe3d 	bl	8001e6c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e037      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x46a>
 800320c:	e02f      	b.n	800326e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_RCC_OscConfig+0x4fc>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fe2a 	bl	8001e6c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe fe26 	bl	8001e6c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e020      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x498>
 800323a:	e018      	b.n	800326e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e013      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	429a      	cmp	r2, r3
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	40007000 	.word	0x40007000
 8003280:	42420060 	.word	0x42420060

08003284 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0d0      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d910      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 0207 	bic.w	r2, r3, #7
 80032ae:	4965      	ldr	r1, [pc, #404]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b8      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e0:	4b59      	ldr	r3, [pc, #356]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f8:	4b53      	ldr	r3, [pc, #332]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a52      	ldr	r2, [pc, #328]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003302:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	494d      	ldr	r1, [pc, #308]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d040      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d115      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07f      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e073      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06b      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4936      	ldr	r1, [pc, #216]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003374:	f7fe fd7a 	bl	8001e6c <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fe fd76 	bl	8001e6c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e053      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 020c 	and.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1eb      	bne.n	800337c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d210      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 0207 	bic.w	r2, r3, #7
 80033ba:	4922      	ldr	r1, [pc, #136]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e032      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4916      	ldr	r1, [pc, #88]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003412:	f000 f821 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003416:	4602      	mov	r2, r0
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	490a      	ldr	r1, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	5ccb      	ldrb	r3, [r1, r3]
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1cc>)
 800342c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1d0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fcd8 	bl	8001de8 <HAL_InitTick>

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40022000 	.word	0x40022000
 8003448:	40021000 	.word	0x40021000
 800344c:	08004884 	.word	0x08004884
 8003450:	2000000c 	.word	0x2000000c
 8003454:	20000014 	.word	0x20000014

08003458 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b04      	cmp	r3, #4
 8003480:	d002      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x30>
 8003482:	2b08      	cmp	r3, #8
 8003484:	d003      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x36>
 8003486:	e027      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800348a:	613b      	str	r3, [r7, #16]
      break;
 800348c:	e027      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0c9b      	lsrs	r3, r3, #18
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <HAL_RCC_GetSysClockFreq+0x94>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	0c5b      	lsrs	r3, r3, #17
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	4a11      	ldr	r2, [pc, #68]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ba:	fb02 f203 	mul.w	r2, r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e004      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	613b      	str	r3, [r7, #16]
      break;
 80034d6:	e002      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034da:	613b      	str	r3, [r7, #16]
      break;
 80034dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034de:	693b      	ldr	r3, [r7, #16]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	007a1200 	.word	0x007a1200
 80034f4:	0800489c 	.word	0x0800489c
 80034f8:	080048ac 	.word	0x080048ac
 80034fc:	003d0900 	.word	0x003d0900

08003500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <HAL_RCC_GetHCLKFreq+0x10>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	2000000c 	.word	0x2000000c

08003514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003518:	f7ff fff2 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4903      	ldr	r1, [pc, #12]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000
 8003538:	08004894 	.word	0x08004894

0800353c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003540:	f7ff ffde 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	0adb      	lsrs	r3, r3, #11
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000
 8003560:	08004894 	.word	0x08004894

08003564 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <RCC_Delay+0x34>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <RCC_Delay+0x38>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0a5b      	lsrs	r3, r3, #9
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003580:	bf00      	nop
  }
  while (Delay --);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1e5a      	subs	r2, r3, #1
 8003586:	60fa      	str	r2, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f9      	bne.n	8003580 <RCC_Delay+0x1c>
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	2000000c 	.word	0x2000000c
 800359c:	10624dd3 	.word	0x10624dd3

080035a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e041      	b.n	8003636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe faa2 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f000 fa5c 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e03a      	b.n	80036ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <HAL_TIM_Base_Start_IT+0x98>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x58>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003682:	d009      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x58>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <HAL_TIM_Base_Start_IT+0x9c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x58>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d111      	bne.n	80036bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d010      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	e007      	b.n	80036cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800

080036e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d020      	beq.n	8003748 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0202 	mvn.w	r2, #2
 8003718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f998 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f98b 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f99a 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d020      	beq.n	8003794 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0204 	mvn.w	r2, #4
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f972 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f965 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f974 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d020      	beq.n	80037e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01b      	beq.n	80037e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0208 	mvn.w	r2, #8
 80037b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2204      	movs	r2, #4
 80037b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f94c 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f93f 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f94e 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d020      	beq.n	800382c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01b      	beq.n	800382c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0210 	mvn.w	r2, #16
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2208      	movs	r2, #8
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f926 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f919 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f928 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0201 	mvn.w	r2, #1
 8003848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fe fa7e 	bl	8001d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa7f 	bl	8003d72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00c      	beq.n	8003898 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8f8 	bl	8003a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0220 	mvn.w	r2, #32
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa52 	bl	8003d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_TIM_ConfigClockSource+0x1c>
 80038dc:	2302      	movs	r3, #2
 80038de:	e0b4      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x186>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003918:	d03e      	beq.n	8003998 <HAL_TIM_ConfigClockSource+0xd4>
 800391a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391e:	f200 8087 	bhi.w	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003926:	f000 8086 	beq.w	8003a36 <HAL_TIM_ConfigClockSource+0x172>
 800392a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392e:	d87f      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003930:	2b70      	cmp	r3, #112	; 0x70
 8003932:	d01a      	beq.n	800396a <HAL_TIM_ConfigClockSource+0xa6>
 8003934:	2b70      	cmp	r3, #112	; 0x70
 8003936:	d87b      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003938:	2b60      	cmp	r3, #96	; 0x60
 800393a:	d050      	beq.n	80039de <HAL_TIM_ConfigClockSource+0x11a>
 800393c:	2b60      	cmp	r3, #96	; 0x60
 800393e:	d877      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003940:	2b50      	cmp	r3, #80	; 0x50
 8003942:	d03c      	beq.n	80039be <HAL_TIM_ConfigClockSource+0xfa>
 8003944:	2b50      	cmp	r3, #80	; 0x50
 8003946:	d873      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d058      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0x13a>
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d86f      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003950:	2b30      	cmp	r3, #48	; 0x30
 8003952:	d064      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x15a>
 8003954:	2b30      	cmp	r3, #48	; 0x30
 8003956:	d86b      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003958:	2b20      	cmp	r3, #32
 800395a:	d060      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x15a>
 800395c:	2b20      	cmp	r3, #32
 800395e:	d867      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05c      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x15a>
 8003964:	2b10      	cmp	r3, #16
 8003966:	d05a      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x15a>
 8003968:	e062      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6899      	ldr	r1, [r3, #8]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f000 f974 	bl	8003c66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800398c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	609a      	str	r2, [r3, #8]
      break;
 8003996:	e04f      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6899      	ldr	r1, [r3, #8]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f000 f95d 	bl	8003c66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ba:	609a      	str	r2, [r3, #8]
      break;
 80039bc:	e03c      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f000 f8d4 	bl	8003b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2150      	movs	r1, #80	; 0x50
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f92b 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80039dc:	e02c      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6859      	ldr	r1, [r3, #4]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f000 f8f2 	bl	8003bd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2160      	movs	r1, #96	; 0x60
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f91b 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80039fc:	e01c      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f000 f8b4 	bl	8003b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2140      	movs	r1, #64	; 0x40
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f90b 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e00c      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4619      	mov	r1, r3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f000 f902 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003a2e:	e003      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      break;
 8003a34:	e000      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
	...

08003a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <TIM_Base_SetConfig+0xd0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <TIM_Base_SetConfig+0x30>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d007      	beq.n	8003acc <TIM_Base_SetConfig+0x30>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a2c      	ldr	r2, [pc, #176]	; (8003b70 <TIM_Base_SetConfig+0xd4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0x30>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a2b      	ldr	r2, [pc, #172]	; (8003b74 <TIM_Base_SetConfig+0xd8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d108      	bne.n	8003ade <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <TIM_Base_SetConfig+0xd0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_Base_SetConfig+0x62>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d007      	beq.n	8003afe <TIM_Base_SetConfig+0x62>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <TIM_Base_SetConfig+0xd4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_Base_SetConfig+0x62>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <TIM_Base_SetConfig+0xd8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <TIM_Base_SetConfig+0xd0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d103      	bne.n	8003b44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f023 0201 	bic.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	611a      	str	r2, [r3, #16]
  }
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800

08003b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0201 	bic.w	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 030a 	bic.w	r3, r3, #10
 8003bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f023 0210 	bic.w	r2, r3, #16
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	031b      	lsls	r3, r3, #12
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f043 0307 	orr.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b087      	sub	sp, #28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	021a      	lsls	r2, r3, #8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	bf00      	nop
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e046      	b.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d08:	d009      	beq.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a12      	ldr	r2, [pc, #72]	; (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d10c      	bne.n	8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800

08003d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e042      	b.n	8003e1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd fed4 	bl	8001b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f82b 	bl	8003e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e5e:	f023 030c 	bic.w	r3, r3, #12
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2c      	ldr	r2, [pc, #176]	; (8003f38 <UART_SetConfig+0x114>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d103      	bne.n	8003e94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e8c:	f7ff fb56 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	e002      	b.n	8003e9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7ff fb3e 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8003e98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009a      	lsls	r2, r3, #2
 8003ea4:	441a      	add	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <UART_SetConfig+0x118>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	0119      	lsls	r1, r3, #4
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009a      	lsls	r2, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <UART_SetConfig+0x118>)
 8003ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	2064      	movs	r0, #100	; 0x64
 8003eda:	fb00 f303 	mul.w	r3, r0, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	3332      	adds	r3, #50	; 0x32
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <UART_SetConfig+0x118>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef0:	4419      	add	r1, r3
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009a      	lsls	r2, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f08:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <UART_SetConfig+0x118>)
 8003f0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2064      	movs	r0, #100	; 0x64
 8003f12:	fb00 f303 	mul.w	r3, r0, r3
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	3332      	adds	r3, #50	; 0x32
 8003f1c:	4a07      	ldr	r2, [pc, #28]	; (8003f3c <UART_SetConfig+0x118>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	f003 020f 	and.w	r2, r3, #15
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	440a      	add	r2, r1
 8003f2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	51eb851f 	.word	0x51eb851f

08003f40 <__errno>:
 8003f40:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <__errno+0x8>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	2000001c 	.word	0x2000001c

08003f4c <__libc_init_array>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	2600      	movs	r6, #0
 8003f50:	4d0c      	ldr	r5, [pc, #48]	; (8003f84 <__libc_init_array+0x38>)
 8003f52:	4c0d      	ldr	r4, [pc, #52]	; (8003f88 <__libc_init_array+0x3c>)
 8003f54:	1b64      	subs	r4, r4, r5
 8003f56:	10a4      	asrs	r4, r4, #2
 8003f58:	42a6      	cmp	r6, r4
 8003f5a:	d109      	bne.n	8003f70 <__libc_init_array+0x24>
 8003f5c:	f000 fc5c 	bl	8004818 <_init>
 8003f60:	2600      	movs	r6, #0
 8003f62:	4d0a      	ldr	r5, [pc, #40]	; (8003f8c <__libc_init_array+0x40>)
 8003f64:	4c0a      	ldr	r4, [pc, #40]	; (8003f90 <__libc_init_array+0x44>)
 8003f66:	1b64      	subs	r4, r4, r5
 8003f68:	10a4      	asrs	r4, r4, #2
 8003f6a:	42a6      	cmp	r6, r4
 8003f6c:	d105      	bne.n	8003f7a <__libc_init_array+0x2e>
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f74:	4798      	blx	r3
 8003f76:	3601      	adds	r6, #1
 8003f78:	e7ee      	b.n	8003f58 <__libc_init_array+0xc>
 8003f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7e:	4798      	blx	r3
 8003f80:	3601      	adds	r6, #1
 8003f82:	e7f2      	b.n	8003f6a <__libc_init_array+0x1e>
 8003f84:	080048e4 	.word	0x080048e4
 8003f88:	080048e4 	.word	0x080048e4
 8003f8c:	080048e4 	.word	0x080048e4
 8003f90:	080048e8 	.word	0x080048e8

08003f94 <memset>:
 8003f94:	4603      	mov	r3, r0
 8003f96:	4402      	add	r2, r0
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d100      	bne.n	8003f9e <memset+0xa>
 8003f9c:	4770      	bx	lr
 8003f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa2:	e7f9      	b.n	8003f98 <memset+0x4>

08003fa4 <siprintf>:
 8003fa4:	b40e      	push	{r1, r2, r3}
 8003fa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003faa:	b500      	push	{lr}
 8003fac:	b09c      	sub	sp, #112	; 0x70
 8003fae:	ab1d      	add	r3, sp, #116	; 0x74
 8003fb0:	9002      	str	r0, [sp, #8]
 8003fb2:	9006      	str	r0, [sp, #24]
 8003fb4:	9107      	str	r1, [sp, #28]
 8003fb6:	9104      	str	r1, [sp, #16]
 8003fb8:	4808      	ldr	r0, [pc, #32]	; (8003fdc <siprintf+0x38>)
 8003fba:	4909      	ldr	r1, [pc, #36]	; (8003fe0 <siprintf+0x3c>)
 8003fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fc0:	9105      	str	r1, [sp, #20]
 8003fc2:	6800      	ldr	r0, [r0, #0]
 8003fc4:	a902      	add	r1, sp, #8
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	f000 f868 	bl	800409c <_svfiprintf_r>
 8003fcc:	2200      	movs	r2, #0
 8003fce:	9b02      	ldr	r3, [sp, #8]
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	b01c      	add	sp, #112	; 0x70
 8003fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fd8:	b003      	add	sp, #12
 8003fda:	4770      	bx	lr
 8003fdc:	2000001c 	.word	0x2000001c
 8003fe0:	ffff0208 	.word	0xffff0208

08003fe4 <__ssputs_r>:
 8003fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	688e      	ldr	r6, [r1, #8]
 8003fea:	4682      	mov	sl, r0
 8003fec:	429e      	cmp	r6, r3
 8003fee:	460c      	mov	r4, r1
 8003ff0:	4690      	mov	r8, r2
 8003ff2:	461f      	mov	r7, r3
 8003ff4:	d838      	bhi.n	8004068 <__ssputs_r+0x84>
 8003ff6:	898a      	ldrh	r2, [r1, #12]
 8003ff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ffc:	d032      	beq.n	8004064 <__ssputs_r+0x80>
 8003ffe:	6825      	ldr	r5, [r4, #0]
 8004000:	6909      	ldr	r1, [r1, #16]
 8004002:	3301      	adds	r3, #1
 8004004:	eba5 0901 	sub.w	r9, r5, r1
 8004008:	6965      	ldr	r5, [r4, #20]
 800400a:	444b      	add	r3, r9
 800400c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004014:	106d      	asrs	r5, r5, #1
 8004016:	429d      	cmp	r5, r3
 8004018:	bf38      	it	cc
 800401a:	461d      	movcc	r5, r3
 800401c:	0553      	lsls	r3, r2, #21
 800401e:	d531      	bpl.n	8004084 <__ssputs_r+0xa0>
 8004020:	4629      	mov	r1, r5
 8004022:	f000 fb53 	bl	80046cc <_malloc_r>
 8004026:	4606      	mov	r6, r0
 8004028:	b950      	cbnz	r0, 8004040 <__ssputs_r+0x5c>
 800402a:	230c      	movs	r3, #12
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	f8ca 3000 	str.w	r3, [sl]
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403a:	81a3      	strh	r3, [r4, #12]
 800403c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004040:	464a      	mov	r2, r9
 8004042:	6921      	ldr	r1, [r4, #16]
 8004044:	f000 face 	bl	80045e4 <memcpy>
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800404e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	6126      	str	r6, [r4, #16]
 8004056:	444e      	add	r6, r9
 8004058:	6026      	str	r6, [r4, #0]
 800405a:	463e      	mov	r6, r7
 800405c:	6165      	str	r5, [r4, #20]
 800405e:	eba5 0509 	sub.w	r5, r5, r9
 8004062:	60a5      	str	r5, [r4, #8]
 8004064:	42be      	cmp	r6, r7
 8004066:	d900      	bls.n	800406a <__ssputs_r+0x86>
 8004068:	463e      	mov	r6, r7
 800406a:	4632      	mov	r2, r6
 800406c:	4641      	mov	r1, r8
 800406e:	6820      	ldr	r0, [r4, #0]
 8004070:	f000 fac6 	bl	8004600 <memmove>
 8004074:	68a3      	ldr	r3, [r4, #8]
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	1b9b      	subs	r3, r3, r6
 800407a:	4432      	add	r2, r6
 800407c:	2000      	movs	r0, #0
 800407e:	60a3      	str	r3, [r4, #8]
 8004080:	6022      	str	r2, [r4, #0]
 8004082:	e7db      	b.n	800403c <__ssputs_r+0x58>
 8004084:	462a      	mov	r2, r5
 8004086:	f000 fb7b 	bl	8004780 <_realloc_r>
 800408a:	4606      	mov	r6, r0
 800408c:	2800      	cmp	r0, #0
 800408e:	d1e1      	bne.n	8004054 <__ssputs_r+0x70>
 8004090:	4650      	mov	r0, sl
 8004092:	6921      	ldr	r1, [r4, #16]
 8004094:	f000 face 	bl	8004634 <_free_r>
 8004098:	e7c7      	b.n	800402a <__ssputs_r+0x46>
	...

0800409c <_svfiprintf_r>:
 800409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a0:	4698      	mov	r8, r3
 80040a2:	898b      	ldrh	r3, [r1, #12]
 80040a4:	4607      	mov	r7, r0
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	460d      	mov	r5, r1
 80040aa:	4614      	mov	r4, r2
 80040ac:	b09d      	sub	sp, #116	; 0x74
 80040ae:	d50e      	bpl.n	80040ce <_svfiprintf_r+0x32>
 80040b0:	690b      	ldr	r3, [r1, #16]
 80040b2:	b963      	cbnz	r3, 80040ce <_svfiprintf_r+0x32>
 80040b4:	2140      	movs	r1, #64	; 0x40
 80040b6:	f000 fb09 	bl	80046cc <_malloc_r>
 80040ba:	6028      	str	r0, [r5, #0]
 80040bc:	6128      	str	r0, [r5, #16]
 80040be:	b920      	cbnz	r0, 80040ca <_svfiprintf_r+0x2e>
 80040c0:	230c      	movs	r3, #12
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	e0d1      	b.n	800426e <_svfiprintf_r+0x1d2>
 80040ca:	2340      	movs	r3, #64	; 0x40
 80040cc:	616b      	str	r3, [r5, #20]
 80040ce:	2300      	movs	r3, #0
 80040d0:	9309      	str	r3, [sp, #36]	; 0x24
 80040d2:	2320      	movs	r3, #32
 80040d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040d8:	2330      	movs	r3, #48	; 0x30
 80040da:	f04f 0901 	mov.w	r9, #1
 80040de:	f8cd 800c 	str.w	r8, [sp, #12]
 80040e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004288 <_svfiprintf_r+0x1ec>
 80040e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040ea:	4623      	mov	r3, r4
 80040ec:	469a      	mov	sl, r3
 80040ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040f2:	b10a      	cbz	r2, 80040f8 <_svfiprintf_r+0x5c>
 80040f4:	2a25      	cmp	r2, #37	; 0x25
 80040f6:	d1f9      	bne.n	80040ec <_svfiprintf_r+0x50>
 80040f8:	ebba 0b04 	subs.w	fp, sl, r4
 80040fc:	d00b      	beq.n	8004116 <_svfiprintf_r+0x7a>
 80040fe:	465b      	mov	r3, fp
 8004100:	4622      	mov	r2, r4
 8004102:	4629      	mov	r1, r5
 8004104:	4638      	mov	r0, r7
 8004106:	f7ff ff6d 	bl	8003fe4 <__ssputs_r>
 800410a:	3001      	adds	r0, #1
 800410c:	f000 80aa 	beq.w	8004264 <_svfiprintf_r+0x1c8>
 8004110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004112:	445a      	add	r2, fp
 8004114:	9209      	str	r2, [sp, #36]	; 0x24
 8004116:	f89a 3000 	ldrb.w	r3, [sl]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80a2 	beq.w	8004264 <_svfiprintf_r+0x1c8>
 8004120:	2300      	movs	r3, #0
 8004122:	f04f 32ff 	mov.w	r2, #4294967295
 8004126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800412a:	f10a 0a01 	add.w	sl, sl, #1
 800412e:	9304      	str	r3, [sp, #16]
 8004130:	9307      	str	r3, [sp, #28]
 8004132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004136:	931a      	str	r3, [sp, #104]	; 0x68
 8004138:	4654      	mov	r4, sl
 800413a:	2205      	movs	r2, #5
 800413c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004140:	4851      	ldr	r0, [pc, #324]	; (8004288 <_svfiprintf_r+0x1ec>)
 8004142:	f000 fa41 	bl	80045c8 <memchr>
 8004146:	9a04      	ldr	r2, [sp, #16]
 8004148:	b9d8      	cbnz	r0, 8004182 <_svfiprintf_r+0xe6>
 800414a:	06d0      	lsls	r0, r2, #27
 800414c:	bf44      	itt	mi
 800414e:	2320      	movmi	r3, #32
 8004150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004154:	0711      	lsls	r1, r2, #28
 8004156:	bf44      	itt	mi
 8004158:	232b      	movmi	r3, #43	; 0x2b
 800415a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800415e:	f89a 3000 	ldrb.w	r3, [sl]
 8004162:	2b2a      	cmp	r3, #42	; 0x2a
 8004164:	d015      	beq.n	8004192 <_svfiprintf_r+0xf6>
 8004166:	4654      	mov	r4, sl
 8004168:	2000      	movs	r0, #0
 800416a:	f04f 0c0a 	mov.w	ip, #10
 800416e:	9a07      	ldr	r2, [sp, #28]
 8004170:	4621      	mov	r1, r4
 8004172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004176:	3b30      	subs	r3, #48	; 0x30
 8004178:	2b09      	cmp	r3, #9
 800417a:	d94e      	bls.n	800421a <_svfiprintf_r+0x17e>
 800417c:	b1b0      	cbz	r0, 80041ac <_svfiprintf_r+0x110>
 800417e:	9207      	str	r2, [sp, #28]
 8004180:	e014      	b.n	80041ac <_svfiprintf_r+0x110>
 8004182:	eba0 0308 	sub.w	r3, r0, r8
 8004186:	fa09 f303 	lsl.w	r3, r9, r3
 800418a:	4313      	orrs	r3, r2
 800418c:	46a2      	mov	sl, r4
 800418e:	9304      	str	r3, [sp, #16]
 8004190:	e7d2      	b.n	8004138 <_svfiprintf_r+0x9c>
 8004192:	9b03      	ldr	r3, [sp, #12]
 8004194:	1d19      	adds	r1, r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	9103      	str	r1, [sp, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfbb      	ittet	lt
 800419e:	425b      	neglt	r3, r3
 80041a0:	f042 0202 	orrlt.w	r2, r2, #2
 80041a4:	9307      	strge	r3, [sp, #28]
 80041a6:	9307      	strlt	r3, [sp, #28]
 80041a8:	bfb8      	it	lt
 80041aa:	9204      	strlt	r2, [sp, #16]
 80041ac:	7823      	ldrb	r3, [r4, #0]
 80041ae:	2b2e      	cmp	r3, #46	; 0x2e
 80041b0:	d10c      	bne.n	80041cc <_svfiprintf_r+0x130>
 80041b2:	7863      	ldrb	r3, [r4, #1]
 80041b4:	2b2a      	cmp	r3, #42	; 0x2a
 80041b6:	d135      	bne.n	8004224 <_svfiprintf_r+0x188>
 80041b8:	9b03      	ldr	r3, [sp, #12]
 80041ba:	3402      	adds	r4, #2
 80041bc:	1d1a      	adds	r2, r3, #4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	9203      	str	r2, [sp, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bfb8      	it	lt
 80041c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80041ca:	9305      	str	r3, [sp, #20]
 80041cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004298 <_svfiprintf_r+0x1fc>
 80041d0:	2203      	movs	r2, #3
 80041d2:	4650      	mov	r0, sl
 80041d4:	7821      	ldrb	r1, [r4, #0]
 80041d6:	f000 f9f7 	bl	80045c8 <memchr>
 80041da:	b140      	cbz	r0, 80041ee <_svfiprintf_r+0x152>
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	eba0 000a 	sub.w	r0, r0, sl
 80041e2:	fa03 f000 	lsl.w	r0, r3, r0
 80041e6:	9b04      	ldr	r3, [sp, #16]
 80041e8:	3401      	adds	r4, #1
 80041ea:	4303      	orrs	r3, r0
 80041ec:	9304      	str	r3, [sp, #16]
 80041ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f2:	2206      	movs	r2, #6
 80041f4:	4825      	ldr	r0, [pc, #148]	; (800428c <_svfiprintf_r+0x1f0>)
 80041f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041fa:	f000 f9e5 	bl	80045c8 <memchr>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d038      	beq.n	8004274 <_svfiprintf_r+0x1d8>
 8004202:	4b23      	ldr	r3, [pc, #140]	; (8004290 <_svfiprintf_r+0x1f4>)
 8004204:	bb1b      	cbnz	r3, 800424e <_svfiprintf_r+0x1b2>
 8004206:	9b03      	ldr	r3, [sp, #12]
 8004208:	3307      	adds	r3, #7
 800420a:	f023 0307 	bic.w	r3, r3, #7
 800420e:	3308      	adds	r3, #8
 8004210:	9303      	str	r3, [sp, #12]
 8004212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004214:	4433      	add	r3, r6
 8004216:	9309      	str	r3, [sp, #36]	; 0x24
 8004218:	e767      	b.n	80040ea <_svfiprintf_r+0x4e>
 800421a:	460c      	mov	r4, r1
 800421c:	2001      	movs	r0, #1
 800421e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004222:	e7a5      	b.n	8004170 <_svfiprintf_r+0xd4>
 8004224:	2300      	movs	r3, #0
 8004226:	f04f 0c0a 	mov.w	ip, #10
 800422a:	4619      	mov	r1, r3
 800422c:	3401      	adds	r4, #1
 800422e:	9305      	str	r3, [sp, #20]
 8004230:	4620      	mov	r0, r4
 8004232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004236:	3a30      	subs	r2, #48	; 0x30
 8004238:	2a09      	cmp	r2, #9
 800423a:	d903      	bls.n	8004244 <_svfiprintf_r+0x1a8>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0c5      	beq.n	80041cc <_svfiprintf_r+0x130>
 8004240:	9105      	str	r1, [sp, #20]
 8004242:	e7c3      	b.n	80041cc <_svfiprintf_r+0x130>
 8004244:	4604      	mov	r4, r0
 8004246:	2301      	movs	r3, #1
 8004248:	fb0c 2101 	mla	r1, ip, r1, r2
 800424c:	e7f0      	b.n	8004230 <_svfiprintf_r+0x194>
 800424e:	ab03      	add	r3, sp, #12
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	462a      	mov	r2, r5
 8004254:	4638      	mov	r0, r7
 8004256:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <_svfiprintf_r+0x1f8>)
 8004258:	a904      	add	r1, sp, #16
 800425a:	f3af 8000 	nop.w
 800425e:	1c42      	adds	r2, r0, #1
 8004260:	4606      	mov	r6, r0
 8004262:	d1d6      	bne.n	8004212 <_svfiprintf_r+0x176>
 8004264:	89ab      	ldrh	r3, [r5, #12]
 8004266:	065b      	lsls	r3, r3, #25
 8004268:	f53f af2c 	bmi.w	80040c4 <_svfiprintf_r+0x28>
 800426c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800426e:	b01d      	add	sp, #116	; 0x74
 8004270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004274:	ab03      	add	r3, sp, #12
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	462a      	mov	r2, r5
 800427a:	4638      	mov	r0, r7
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <_svfiprintf_r+0x1f8>)
 800427e:	a904      	add	r1, sp, #16
 8004280:	f000 f87c 	bl	800437c <_printf_i>
 8004284:	e7eb      	b.n	800425e <_svfiprintf_r+0x1c2>
 8004286:	bf00      	nop
 8004288:	080048ae 	.word	0x080048ae
 800428c:	080048b8 	.word	0x080048b8
 8004290:	00000000 	.word	0x00000000
 8004294:	08003fe5 	.word	0x08003fe5
 8004298:	080048b4 	.word	0x080048b4

0800429c <_printf_common>:
 800429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	4616      	mov	r6, r2
 80042a2:	4699      	mov	r9, r3
 80042a4:	688a      	ldr	r2, [r1, #8]
 80042a6:	690b      	ldr	r3, [r1, #16]
 80042a8:	4607      	mov	r7, r0
 80042aa:	4293      	cmp	r3, r2
 80042ac:	bfb8      	it	lt
 80042ae:	4613      	movlt	r3, r2
 80042b0:	6033      	str	r3, [r6, #0]
 80042b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042b6:	460c      	mov	r4, r1
 80042b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042bc:	b10a      	cbz	r2, 80042c2 <_printf_common+0x26>
 80042be:	3301      	adds	r3, #1
 80042c0:	6033      	str	r3, [r6, #0]
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	0699      	lsls	r1, r3, #26
 80042c6:	bf42      	ittt	mi
 80042c8:	6833      	ldrmi	r3, [r6, #0]
 80042ca:	3302      	addmi	r3, #2
 80042cc:	6033      	strmi	r3, [r6, #0]
 80042ce:	6825      	ldr	r5, [r4, #0]
 80042d0:	f015 0506 	ands.w	r5, r5, #6
 80042d4:	d106      	bne.n	80042e4 <_printf_common+0x48>
 80042d6:	f104 0a19 	add.w	sl, r4, #25
 80042da:	68e3      	ldr	r3, [r4, #12]
 80042dc:	6832      	ldr	r2, [r6, #0]
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	42ab      	cmp	r3, r5
 80042e2:	dc28      	bgt.n	8004336 <_printf_common+0x9a>
 80042e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042e8:	1e13      	subs	r3, r2, #0
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	bf18      	it	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	0692      	lsls	r2, r2, #26
 80042f2:	d42d      	bmi.n	8004350 <_printf_common+0xb4>
 80042f4:	4649      	mov	r1, r9
 80042f6:	4638      	mov	r0, r7
 80042f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042fc:	47c0      	blx	r8
 80042fe:	3001      	adds	r0, #1
 8004300:	d020      	beq.n	8004344 <_printf_common+0xa8>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	68e5      	ldr	r5, [r4, #12]
 8004306:	f003 0306 	and.w	r3, r3, #6
 800430a:	2b04      	cmp	r3, #4
 800430c:	bf18      	it	ne
 800430e:	2500      	movne	r5, #0
 8004310:	6832      	ldr	r2, [r6, #0]
 8004312:	f04f 0600 	mov.w	r6, #0
 8004316:	68a3      	ldr	r3, [r4, #8]
 8004318:	bf08      	it	eq
 800431a:	1aad      	subeq	r5, r5, r2
 800431c:	6922      	ldr	r2, [r4, #16]
 800431e:	bf08      	it	eq
 8004320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004324:	4293      	cmp	r3, r2
 8004326:	bfc4      	itt	gt
 8004328:	1a9b      	subgt	r3, r3, r2
 800432a:	18ed      	addgt	r5, r5, r3
 800432c:	341a      	adds	r4, #26
 800432e:	42b5      	cmp	r5, r6
 8004330:	d11a      	bne.n	8004368 <_printf_common+0xcc>
 8004332:	2000      	movs	r0, #0
 8004334:	e008      	b.n	8004348 <_printf_common+0xac>
 8004336:	2301      	movs	r3, #1
 8004338:	4652      	mov	r2, sl
 800433a:	4649      	mov	r1, r9
 800433c:	4638      	mov	r0, r7
 800433e:	47c0      	blx	r8
 8004340:	3001      	adds	r0, #1
 8004342:	d103      	bne.n	800434c <_printf_common+0xb0>
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434c:	3501      	adds	r5, #1
 800434e:	e7c4      	b.n	80042da <_printf_common+0x3e>
 8004350:	2030      	movs	r0, #48	; 0x30
 8004352:	18e1      	adds	r1, r4, r3
 8004354:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800435e:	4422      	add	r2, r4
 8004360:	3302      	adds	r3, #2
 8004362:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004366:	e7c5      	b.n	80042f4 <_printf_common+0x58>
 8004368:	2301      	movs	r3, #1
 800436a:	4622      	mov	r2, r4
 800436c:	4649      	mov	r1, r9
 800436e:	4638      	mov	r0, r7
 8004370:	47c0      	blx	r8
 8004372:	3001      	adds	r0, #1
 8004374:	d0e6      	beq.n	8004344 <_printf_common+0xa8>
 8004376:	3601      	adds	r6, #1
 8004378:	e7d9      	b.n	800432e <_printf_common+0x92>
	...

0800437c <_printf_i>:
 800437c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004380:	460c      	mov	r4, r1
 8004382:	7e27      	ldrb	r7, [r4, #24]
 8004384:	4691      	mov	r9, r2
 8004386:	2f78      	cmp	r7, #120	; 0x78
 8004388:	4680      	mov	r8, r0
 800438a:	469a      	mov	sl, r3
 800438c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800438e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004392:	d807      	bhi.n	80043a4 <_printf_i+0x28>
 8004394:	2f62      	cmp	r7, #98	; 0x62
 8004396:	d80a      	bhi.n	80043ae <_printf_i+0x32>
 8004398:	2f00      	cmp	r7, #0
 800439a:	f000 80d9 	beq.w	8004550 <_printf_i+0x1d4>
 800439e:	2f58      	cmp	r7, #88	; 0x58
 80043a0:	f000 80a4 	beq.w	80044ec <_printf_i+0x170>
 80043a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043ac:	e03a      	b.n	8004424 <_printf_i+0xa8>
 80043ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043b2:	2b15      	cmp	r3, #21
 80043b4:	d8f6      	bhi.n	80043a4 <_printf_i+0x28>
 80043b6:	a001      	add	r0, pc, #4	; (adr r0, 80043bc <_printf_i+0x40>)
 80043b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043bc:	08004415 	.word	0x08004415
 80043c0:	08004429 	.word	0x08004429
 80043c4:	080043a5 	.word	0x080043a5
 80043c8:	080043a5 	.word	0x080043a5
 80043cc:	080043a5 	.word	0x080043a5
 80043d0:	080043a5 	.word	0x080043a5
 80043d4:	08004429 	.word	0x08004429
 80043d8:	080043a5 	.word	0x080043a5
 80043dc:	080043a5 	.word	0x080043a5
 80043e0:	080043a5 	.word	0x080043a5
 80043e4:	080043a5 	.word	0x080043a5
 80043e8:	08004537 	.word	0x08004537
 80043ec:	08004459 	.word	0x08004459
 80043f0:	08004519 	.word	0x08004519
 80043f4:	080043a5 	.word	0x080043a5
 80043f8:	080043a5 	.word	0x080043a5
 80043fc:	08004559 	.word	0x08004559
 8004400:	080043a5 	.word	0x080043a5
 8004404:	08004459 	.word	0x08004459
 8004408:	080043a5 	.word	0x080043a5
 800440c:	080043a5 	.word	0x080043a5
 8004410:	08004521 	.word	0x08004521
 8004414:	680b      	ldr	r3, [r1, #0]
 8004416:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800441a:	1d1a      	adds	r2, r3, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	600a      	str	r2, [r1, #0]
 8004420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004424:	2301      	movs	r3, #1
 8004426:	e0a4      	b.n	8004572 <_printf_i+0x1f6>
 8004428:	6825      	ldr	r5, [r4, #0]
 800442a:	6808      	ldr	r0, [r1, #0]
 800442c:	062e      	lsls	r6, r5, #24
 800442e:	f100 0304 	add.w	r3, r0, #4
 8004432:	d50a      	bpl.n	800444a <_printf_i+0xce>
 8004434:	6805      	ldr	r5, [r0, #0]
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	2d00      	cmp	r5, #0
 800443a:	da03      	bge.n	8004444 <_printf_i+0xc8>
 800443c:	232d      	movs	r3, #45	; 0x2d
 800443e:	426d      	negs	r5, r5
 8004440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004444:	230a      	movs	r3, #10
 8004446:	485e      	ldr	r0, [pc, #376]	; (80045c0 <_printf_i+0x244>)
 8004448:	e019      	b.n	800447e <_printf_i+0x102>
 800444a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800444e:	6805      	ldr	r5, [r0, #0]
 8004450:	600b      	str	r3, [r1, #0]
 8004452:	bf18      	it	ne
 8004454:	b22d      	sxthne	r5, r5
 8004456:	e7ef      	b.n	8004438 <_printf_i+0xbc>
 8004458:	680b      	ldr	r3, [r1, #0]
 800445a:	6825      	ldr	r5, [r4, #0]
 800445c:	1d18      	adds	r0, r3, #4
 800445e:	6008      	str	r0, [r1, #0]
 8004460:	0628      	lsls	r0, r5, #24
 8004462:	d501      	bpl.n	8004468 <_printf_i+0xec>
 8004464:	681d      	ldr	r5, [r3, #0]
 8004466:	e002      	b.n	800446e <_printf_i+0xf2>
 8004468:	0669      	lsls	r1, r5, #25
 800446a:	d5fb      	bpl.n	8004464 <_printf_i+0xe8>
 800446c:	881d      	ldrh	r5, [r3, #0]
 800446e:	2f6f      	cmp	r7, #111	; 0x6f
 8004470:	bf0c      	ite	eq
 8004472:	2308      	moveq	r3, #8
 8004474:	230a      	movne	r3, #10
 8004476:	4852      	ldr	r0, [pc, #328]	; (80045c0 <_printf_i+0x244>)
 8004478:	2100      	movs	r1, #0
 800447a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800447e:	6866      	ldr	r6, [r4, #4]
 8004480:	2e00      	cmp	r6, #0
 8004482:	bfa8      	it	ge
 8004484:	6821      	ldrge	r1, [r4, #0]
 8004486:	60a6      	str	r6, [r4, #8]
 8004488:	bfa4      	itt	ge
 800448a:	f021 0104 	bicge.w	r1, r1, #4
 800448e:	6021      	strge	r1, [r4, #0]
 8004490:	b90d      	cbnz	r5, 8004496 <_printf_i+0x11a>
 8004492:	2e00      	cmp	r6, #0
 8004494:	d04d      	beq.n	8004532 <_printf_i+0x1b6>
 8004496:	4616      	mov	r6, r2
 8004498:	fbb5 f1f3 	udiv	r1, r5, r3
 800449c:	fb03 5711 	mls	r7, r3, r1, r5
 80044a0:	5dc7      	ldrb	r7, [r0, r7]
 80044a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044a6:	462f      	mov	r7, r5
 80044a8:	42bb      	cmp	r3, r7
 80044aa:	460d      	mov	r5, r1
 80044ac:	d9f4      	bls.n	8004498 <_printf_i+0x11c>
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d10b      	bne.n	80044ca <_printf_i+0x14e>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	07df      	lsls	r7, r3, #31
 80044b6:	d508      	bpl.n	80044ca <_printf_i+0x14e>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	6861      	ldr	r1, [r4, #4]
 80044bc:	4299      	cmp	r1, r3
 80044be:	bfde      	ittt	le
 80044c0:	2330      	movle	r3, #48	; 0x30
 80044c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044ca:	1b92      	subs	r2, r2, r6
 80044cc:	6122      	str	r2, [r4, #16]
 80044ce:	464b      	mov	r3, r9
 80044d0:	4621      	mov	r1, r4
 80044d2:	4640      	mov	r0, r8
 80044d4:	f8cd a000 	str.w	sl, [sp]
 80044d8:	aa03      	add	r2, sp, #12
 80044da:	f7ff fedf 	bl	800429c <_printf_common>
 80044de:	3001      	adds	r0, #1
 80044e0:	d14c      	bne.n	800457c <_printf_i+0x200>
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295
 80044e6:	b004      	add	sp, #16
 80044e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ec:	4834      	ldr	r0, [pc, #208]	; (80045c0 <_printf_i+0x244>)
 80044ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044f2:	680e      	ldr	r6, [r1, #0]
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80044fa:	061f      	lsls	r7, r3, #24
 80044fc:	600e      	str	r6, [r1, #0]
 80044fe:	d514      	bpl.n	800452a <_printf_i+0x1ae>
 8004500:	07d9      	lsls	r1, r3, #31
 8004502:	bf44      	itt	mi
 8004504:	f043 0320 	orrmi.w	r3, r3, #32
 8004508:	6023      	strmi	r3, [r4, #0]
 800450a:	b91d      	cbnz	r5, 8004514 <_printf_i+0x198>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	f023 0320 	bic.w	r3, r3, #32
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	2310      	movs	r3, #16
 8004516:	e7af      	b.n	8004478 <_printf_i+0xfc>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	f043 0320 	orr.w	r3, r3, #32
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	2378      	movs	r3, #120	; 0x78
 8004522:	4828      	ldr	r0, [pc, #160]	; (80045c4 <_printf_i+0x248>)
 8004524:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004528:	e7e3      	b.n	80044f2 <_printf_i+0x176>
 800452a:	065e      	lsls	r6, r3, #25
 800452c:	bf48      	it	mi
 800452e:	b2ad      	uxthmi	r5, r5
 8004530:	e7e6      	b.n	8004500 <_printf_i+0x184>
 8004532:	4616      	mov	r6, r2
 8004534:	e7bb      	b.n	80044ae <_printf_i+0x132>
 8004536:	680b      	ldr	r3, [r1, #0]
 8004538:	6826      	ldr	r6, [r4, #0]
 800453a:	1d1d      	adds	r5, r3, #4
 800453c:	6960      	ldr	r0, [r4, #20]
 800453e:	600d      	str	r5, [r1, #0]
 8004540:	0635      	lsls	r5, r6, #24
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	d501      	bpl.n	800454a <_printf_i+0x1ce>
 8004546:	6018      	str	r0, [r3, #0]
 8004548:	e002      	b.n	8004550 <_printf_i+0x1d4>
 800454a:	0671      	lsls	r1, r6, #25
 800454c:	d5fb      	bpl.n	8004546 <_printf_i+0x1ca>
 800454e:	8018      	strh	r0, [r3, #0]
 8004550:	2300      	movs	r3, #0
 8004552:	4616      	mov	r6, r2
 8004554:	6123      	str	r3, [r4, #16]
 8004556:	e7ba      	b.n	80044ce <_printf_i+0x152>
 8004558:	680b      	ldr	r3, [r1, #0]
 800455a:	1d1a      	adds	r2, r3, #4
 800455c:	600a      	str	r2, [r1, #0]
 800455e:	681e      	ldr	r6, [r3, #0]
 8004560:	2100      	movs	r1, #0
 8004562:	4630      	mov	r0, r6
 8004564:	6862      	ldr	r2, [r4, #4]
 8004566:	f000 f82f 	bl	80045c8 <memchr>
 800456a:	b108      	cbz	r0, 8004570 <_printf_i+0x1f4>
 800456c:	1b80      	subs	r0, r0, r6
 800456e:	6060      	str	r0, [r4, #4]
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	2300      	movs	r3, #0
 8004576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457a:	e7a8      	b.n	80044ce <_printf_i+0x152>
 800457c:	4632      	mov	r2, r6
 800457e:	4649      	mov	r1, r9
 8004580:	4640      	mov	r0, r8
 8004582:	6923      	ldr	r3, [r4, #16]
 8004584:	47d0      	blx	sl
 8004586:	3001      	adds	r0, #1
 8004588:	d0ab      	beq.n	80044e2 <_printf_i+0x166>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	079b      	lsls	r3, r3, #30
 800458e:	d413      	bmi.n	80045b8 <_printf_i+0x23c>
 8004590:	68e0      	ldr	r0, [r4, #12]
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	4298      	cmp	r0, r3
 8004596:	bfb8      	it	lt
 8004598:	4618      	movlt	r0, r3
 800459a:	e7a4      	b.n	80044e6 <_printf_i+0x16a>
 800459c:	2301      	movs	r3, #1
 800459e:	4632      	mov	r2, r6
 80045a0:	4649      	mov	r1, r9
 80045a2:	4640      	mov	r0, r8
 80045a4:	47d0      	blx	sl
 80045a6:	3001      	adds	r0, #1
 80045a8:	d09b      	beq.n	80044e2 <_printf_i+0x166>
 80045aa:	3501      	adds	r5, #1
 80045ac:	68e3      	ldr	r3, [r4, #12]
 80045ae:	9903      	ldr	r1, [sp, #12]
 80045b0:	1a5b      	subs	r3, r3, r1
 80045b2:	42ab      	cmp	r3, r5
 80045b4:	dcf2      	bgt.n	800459c <_printf_i+0x220>
 80045b6:	e7eb      	b.n	8004590 <_printf_i+0x214>
 80045b8:	2500      	movs	r5, #0
 80045ba:	f104 0619 	add.w	r6, r4, #25
 80045be:	e7f5      	b.n	80045ac <_printf_i+0x230>
 80045c0:	080048bf 	.word	0x080048bf
 80045c4:	080048d0 	.word	0x080048d0

080045c8 <memchr>:
 80045c8:	4603      	mov	r3, r0
 80045ca:	b510      	push	{r4, lr}
 80045cc:	b2c9      	uxtb	r1, r1
 80045ce:	4402      	add	r2, r0
 80045d0:	4293      	cmp	r3, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	d101      	bne.n	80045da <memchr+0x12>
 80045d6:	2000      	movs	r0, #0
 80045d8:	e003      	b.n	80045e2 <memchr+0x1a>
 80045da:	7804      	ldrb	r4, [r0, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	428c      	cmp	r4, r1
 80045e0:	d1f6      	bne.n	80045d0 <memchr+0x8>
 80045e2:	bd10      	pop	{r4, pc}

080045e4 <memcpy>:
 80045e4:	440a      	add	r2, r1
 80045e6:	4291      	cmp	r1, r2
 80045e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045ec:	d100      	bne.n	80045f0 <memcpy+0xc>
 80045ee:	4770      	bx	lr
 80045f0:	b510      	push	{r4, lr}
 80045f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045f6:	4291      	cmp	r1, r2
 80045f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045fc:	d1f9      	bne.n	80045f2 <memcpy+0xe>
 80045fe:	bd10      	pop	{r4, pc}

08004600 <memmove>:
 8004600:	4288      	cmp	r0, r1
 8004602:	b510      	push	{r4, lr}
 8004604:	eb01 0402 	add.w	r4, r1, r2
 8004608:	d902      	bls.n	8004610 <memmove+0x10>
 800460a:	4284      	cmp	r4, r0
 800460c:	4623      	mov	r3, r4
 800460e:	d807      	bhi.n	8004620 <memmove+0x20>
 8004610:	1e43      	subs	r3, r0, #1
 8004612:	42a1      	cmp	r1, r4
 8004614:	d008      	beq.n	8004628 <memmove+0x28>
 8004616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800461a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800461e:	e7f8      	b.n	8004612 <memmove+0x12>
 8004620:	4601      	mov	r1, r0
 8004622:	4402      	add	r2, r0
 8004624:	428a      	cmp	r2, r1
 8004626:	d100      	bne.n	800462a <memmove+0x2a>
 8004628:	bd10      	pop	{r4, pc}
 800462a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800462e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004632:	e7f7      	b.n	8004624 <memmove+0x24>

08004634 <_free_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4605      	mov	r5, r0
 8004638:	2900      	cmp	r1, #0
 800463a:	d043      	beq.n	80046c4 <_free_r+0x90>
 800463c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004640:	1f0c      	subs	r4, r1, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	bfb8      	it	lt
 8004646:	18e4      	addlt	r4, r4, r3
 8004648:	f000 f8d0 	bl	80047ec <__malloc_lock>
 800464c:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <_free_r+0x94>)
 800464e:	6813      	ldr	r3, [r2, #0]
 8004650:	4610      	mov	r0, r2
 8004652:	b933      	cbnz	r3, 8004662 <_free_r+0x2e>
 8004654:	6063      	str	r3, [r4, #4]
 8004656:	6014      	str	r4, [r2, #0]
 8004658:	4628      	mov	r0, r5
 800465a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800465e:	f000 b8cb 	b.w	80047f8 <__malloc_unlock>
 8004662:	42a3      	cmp	r3, r4
 8004664:	d90a      	bls.n	800467c <_free_r+0x48>
 8004666:	6821      	ldr	r1, [r4, #0]
 8004668:	1862      	adds	r2, r4, r1
 800466a:	4293      	cmp	r3, r2
 800466c:	bf01      	itttt	eq
 800466e:	681a      	ldreq	r2, [r3, #0]
 8004670:	685b      	ldreq	r3, [r3, #4]
 8004672:	1852      	addeq	r2, r2, r1
 8004674:	6022      	streq	r2, [r4, #0]
 8004676:	6063      	str	r3, [r4, #4]
 8004678:	6004      	str	r4, [r0, #0]
 800467a:	e7ed      	b.n	8004658 <_free_r+0x24>
 800467c:	461a      	mov	r2, r3
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	b10b      	cbz	r3, 8004686 <_free_r+0x52>
 8004682:	42a3      	cmp	r3, r4
 8004684:	d9fa      	bls.n	800467c <_free_r+0x48>
 8004686:	6811      	ldr	r1, [r2, #0]
 8004688:	1850      	adds	r0, r2, r1
 800468a:	42a0      	cmp	r0, r4
 800468c:	d10b      	bne.n	80046a6 <_free_r+0x72>
 800468e:	6820      	ldr	r0, [r4, #0]
 8004690:	4401      	add	r1, r0
 8004692:	1850      	adds	r0, r2, r1
 8004694:	4283      	cmp	r3, r0
 8004696:	6011      	str	r1, [r2, #0]
 8004698:	d1de      	bne.n	8004658 <_free_r+0x24>
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4401      	add	r1, r0
 80046a0:	6011      	str	r1, [r2, #0]
 80046a2:	6053      	str	r3, [r2, #4]
 80046a4:	e7d8      	b.n	8004658 <_free_r+0x24>
 80046a6:	d902      	bls.n	80046ae <_free_r+0x7a>
 80046a8:	230c      	movs	r3, #12
 80046aa:	602b      	str	r3, [r5, #0]
 80046ac:	e7d4      	b.n	8004658 <_free_r+0x24>
 80046ae:	6820      	ldr	r0, [r4, #0]
 80046b0:	1821      	adds	r1, r4, r0
 80046b2:	428b      	cmp	r3, r1
 80046b4:	bf01      	itttt	eq
 80046b6:	6819      	ldreq	r1, [r3, #0]
 80046b8:	685b      	ldreq	r3, [r3, #4]
 80046ba:	1809      	addeq	r1, r1, r0
 80046bc:	6021      	streq	r1, [r4, #0]
 80046be:	6063      	str	r3, [r4, #4]
 80046c0:	6054      	str	r4, [r2, #4]
 80046c2:	e7c9      	b.n	8004658 <_free_r+0x24>
 80046c4:	bd38      	pop	{r3, r4, r5, pc}
 80046c6:	bf00      	nop
 80046c8:	200000fc 	.word	0x200000fc

080046cc <_malloc_r>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	1ccd      	adds	r5, r1, #3
 80046d0:	f025 0503 	bic.w	r5, r5, #3
 80046d4:	3508      	adds	r5, #8
 80046d6:	2d0c      	cmp	r5, #12
 80046d8:	bf38      	it	cc
 80046da:	250c      	movcc	r5, #12
 80046dc:	2d00      	cmp	r5, #0
 80046de:	4606      	mov	r6, r0
 80046e0:	db01      	blt.n	80046e6 <_malloc_r+0x1a>
 80046e2:	42a9      	cmp	r1, r5
 80046e4:	d903      	bls.n	80046ee <_malloc_r+0x22>
 80046e6:	230c      	movs	r3, #12
 80046e8:	6033      	str	r3, [r6, #0]
 80046ea:	2000      	movs	r0, #0
 80046ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ee:	f000 f87d 	bl	80047ec <__malloc_lock>
 80046f2:	4921      	ldr	r1, [pc, #132]	; (8004778 <_malloc_r+0xac>)
 80046f4:	680a      	ldr	r2, [r1, #0]
 80046f6:	4614      	mov	r4, r2
 80046f8:	b99c      	cbnz	r4, 8004722 <_malloc_r+0x56>
 80046fa:	4f20      	ldr	r7, [pc, #128]	; (800477c <_malloc_r+0xb0>)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b923      	cbnz	r3, 800470a <_malloc_r+0x3e>
 8004700:	4621      	mov	r1, r4
 8004702:	4630      	mov	r0, r6
 8004704:	f000 f862 	bl	80047cc <_sbrk_r>
 8004708:	6038      	str	r0, [r7, #0]
 800470a:	4629      	mov	r1, r5
 800470c:	4630      	mov	r0, r6
 800470e:	f000 f85d 	bl	80047cc <_sbrk_r>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d123      	bne.n	800475e <_malloc_r+0x92>
 8004716:	230c      	movs	r3, #12
 8004718:	4630      	mov	r0, r6
 800471a:	6033      	str	r3, [r6, #0]
 800471c:	f000 f86c 	bl	80047f8 <__malloc_unlock>
 8004720:	e7e3      	b.n	80046ea <_malloc_r+0x1e>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	1b5b      	subs	r3, r3, r5
 8004726:	d417      	bmi.n	8004758 <_malloc_r+0x8c>
 8004728:	2b0b      	cmp	r3, #11
 800472a:	d903      	bls.n	8004734 <_malloc_r+0x68>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	441c      	add	r4, r3
 8004730:	6025      	str	r5, [r4, #0]
 8004732:	e004      	b.n	800473e <_malloc_r+0x72>
 8004734:	6863      	ldr	r3, [r4, #4]
 8004736:	42a2      	cmp	r2, r4
 8004738:	bf0c      	ite	eq
 800473a:	600b      	streq	r3, [r1, #0]
 800473c:	6053      	strne	r3, [r2, #4]
 800473e:	4630      	mov	r0, r6
 8004740:	f000 f85a 	bl	80047f8 <__malloc_unlock>
 8004744:	f104 000b 	add.w	r0, r4, #11
 8004748:	1d23      	adds	r3, r4, #4
 800474a:	f020 0007 	bic.w	r0, r0, #7
 800474e:	1ac2      	subs	r2, r0, r3
 8004750:	d0cc      	beq.n	80046ec <_malloc_r+0x20>
 8004752:	1a1b      	subs	r3, r3, r0
 8004754:	50a3      	str	r3, [r4, r2]
 8004756:	e7c9      	b.n	80046ec <_malloc_r+0x20>
 8004758:	4622      	mov	r2, r4
 800475a:	6864      	ldr	r4, [r4, #4]
 800475c:	e7cc      	b.n	80046f8 <_malloc_r+0x2c>
 800475e:	1cc4      	adds	r4, r0, #3
 8004760:	f024 0403 	bic.w	r4, r4, #3
 8004764:	42a0      	cmp	r0, r4
 8004766:	d0e3      	beq.n	8004730 <_malloc_r+0x64>
 8004768:	1a21      	subs	r1, r4, r0
 800476a:	4630      	mov	r0, r6
 800476c:	f000 f82e 	bl	80047cc <_sbrk_r>
 8004770:	3001      	adds	r0, #1
 8004772:	d1dd      	bne.n	8004730 <_malloc_r+0x64>
 8004774:	e7cf      	b.n	8004716 <_malloc_r+0x4a>
 8004776:	bf00      	nop
 8004778:	200000fc 	.word	0x200000fc
 800477c:	20000100 	.word	0x20000100

08004780 <_realloc_r>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	4607      	mov	r7, r0
 8004784:	4614      	mov	r4, r2
 8004786:	460e      	mov	r6, r1
 8004788:	b921      	cbnz	r1, 8004794 <_realloc_r+0x14>
 800478a:	4611      	mov	r1, r2
 800478c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004790:	f7ff bf9c 	b.w	80046cc <_malloc_r>
 8004794:	b922      	cbnz	r2, 80047a0 <_realloc_r+0x20>
 8004796:	f7ff ff4d 	bl	8004634 <_free_r>
 800479a:	4625      	mov	r5, r4
 800479c:	4628      	mov	r0, r5
 800479e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a0:	f000 f830 	bl	8004804 <_malloc_usable_size_r>
 80047a4:	42a0      	cmp	r0, r4
 80047a6:	d20f      	bcs.n	80047c8 <_realloc_r+0x48>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4638      	mov	r0, r7
 80047ac:	f7ff ff8e 	bl	80046cc <_malloc_r>
 80047b0:	4605      	mov	r5, r0
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d0f2      	beq.n	800479c <_realloc_r+0x1c>
 80047b6:	4631      	mov	r1, r6
 80047b8:	4622      	mov	r2, r4
 80047ba:	f7ff ff13 	bl	80045e4 <memcpy>
 80047be:	4631      	mov	r1, r6
 80047c0:	4638      	mov	r0, r7
 80047c2:	f7ff ff37 	bl	8004634 <_free_r>
 80047c6:	e7e9      	b.n	800479c <_realloc_r+0x1c>
 80047c8:	4635      	mov	r5, r6
 80047ca:	e7e7      	b.n	800479c <_realloc_r+0x1c>

080047cc <_sbrk_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	2300      	movs	r3, #0
 80047d0:	4d05      	ldr	r5, [pc, #20]	; (80047e8 <_sbrk_r+0x1c>)
 80047d2:	4604      	mov	r4, r0
 80047d4:	4608      	mov	r0, r1
 80047d6:	602b      	str	r3, [r5, #0]
 80047d8:	f7fd fa2e 	bl	8001c38 <_sbrk>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d102      	bne.n	80047e6 <_sbrk_r+0x1a>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	b103      	cbz	r3, 80047e6 <_sbrk_r+0x1a>
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	2000023c 	.word	0x2000023c

080047ec <__malloc_lock>:
 80047ec:	4801      	ldr	r0, [pc, #4]	; (80047f4 <__malloc_lock+0x8>)
 80047ee:	f000 b811 	b.w	8004814 <__retarget_lock_acquire_recursive>
 80047f2:	bf00      	nop
 80047f4:	20000244 	.word	0x20000244

080047f8 <__malloc_unlock>:
 80047f8:	4801      	ldr	r0, [pc, #4]	; (8004800 <__malloc_unlock+0x8>)
 80047fa:	f000 b80c 	b.w	8004816 <__retarget_lock_release_recursive>
 80047fe:	bf00      	nop
 8004800:	20000244 	.word	0x20000244

08004804 <_malloc_usable_size_r>:
 8004804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004808:	1f18      	subs	r0, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	bfbc      	itt	lt
 800480e:	580b      	ldrlt	r3, [r1, r0]
 8004810:	18c0      	addlt	r0, r0, r3
 8004812:	4770      	bx	lr

08004814 <__retarget_lock_acquire_recursive>:
 8004814:	4770      	bx	lr

08004816 <__retarget_lock_release_recursive>:
 8004816:	4770      	bx	lr

08004818 <_init>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr

08004824 <_fini>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	bf00      	nop
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr
